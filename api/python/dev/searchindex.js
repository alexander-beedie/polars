Search.setIndex({"alltitles": {"ABS": [[1426, "abs"]], "ACOS": [[1429, "acos"]], "ACOSD": [[1429, "acosd"]], "ARRAY_AGG": [[1422, "array-agg"]], "ARRAY_CONTAINS": [[1422, "array-contains"]], "ARRAY_GET": [[1422, "array-get"]], "ARRAY_LENGTH": [[1422, "array-length"]], "ARRAY_LOWER": [[1422, "array-lower"]], "ARRAY_MEAN": [[1422, "array-mean"]], "ARRAY_REVERSE": [[1422, "array-reverse"]], "ARRAY_SUM": [[1422, "array-sum"]], "ARRAY_TO_STRING": [[1422, "array-to-string"]], "ARRAY_UNIQUE": [[1422, "array-unique"]], "ARRAY_UPPER": [[1422, "array-upper"]], "ASIN": [[1429, "asin"]], "ASIND": [[1429, "asind"]], "ATAN": [[1429, "atan"]], "ATAN2": [[1429, "atan2"]], "ATAN2D": [[1429, "atan2d"]], "ATAND": [[1429, "atand"]], "AVG": [[1421, "avg"]], "Aggregate": [[1421, null]], "Aggregation": [[208, null], [378, null], [883, null], [998, null]], "Aliases": [[1421, null], [1421, null], [1421, null], [1426, null], [1426, null], [1427, null], [1427, null]], "Array": [[371, null], [861, null], [1396, null], [1422, null]], "Asserts": [[1435, "asserts"]], "Attributes": [[352, null], [986, null], [1397, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[882, "avro"]], "BIT_AND": [[1423, "bit-and"]], "BIT_COUNT": [[1423, "bit-count"]], "BIT_LENGTH": [[1427, "bit-length"]], "BIT_OR": [[1423, "bit-or"]], "BIT_XOR": [[1423, "bit-xor"]], "Binary": [[862, null], [875, "binary"], [1398, null]], "Bitwise": [[1423, null]], "Boolean": [[863, null], [1399, null]], "CAST": [[1430, "cast"]], "CBRT": [[1426, "cbrt"]], "CEIL": [[1426, "ceil"]], "COALESCE": [[1424, "coalesce"]], "CONCAT": [[1427, "concat"]], "CONCAT_WS": [[1427, "concat-ws"]], "CORR": [[1421, "corr"]], "COS": [[1429, "cos"]], "COSD": [[1429, "cosd"]], "COT": [[1429, "cot"]], "COTD": [[1429, "cotd"]], "COUNT": [[1421, "count"]], "CREATE TABLE": [[1434, "create-table"]], "CSV": [[882, "csv"]], "Catalog": [[205, null]], "Categories": [[864, null], [1400, null]], "Clipboard": [[882, "clipboard"]], "Cloud Credentials": [[882, "cloud-credentials"]], "Columns / names": [[866, null]], "Comparison": [[875, "comparison"], [1408, "comparison"]], "Computation": [[353, null], [867, null], [1401, null]], "Conditional": [[1424, null]], "Config": [[207, null]], "Config load, save, state": [[207, "config-load-save-state"]], "Config options": [[207, "config-options"]], "Conjunction": [[875, "conjunction"]], "Conversion": [[880, "conversion"]], "DATE": [[1427, "date"]], "DATE_PART": [[1428, "date-part"]], "DEGREES": [[1429, "degrees"]], "DELETE": [[1434, "delete"]], "DISTINCT": [[1420, "distinct"]], "DIV": [[1426, "div"]], "DROP TABLES": [[1434, "drop-tables"]], "Data types": [[376, null]], "DataFrame": [[357, null]], "DataType": [[376, "datatype"]], "DataType expressions": [[375, null]], "Database": [[882, "database"]], "Delta Lake": [[882, "delta-lake"]], "Descriptive": [[354, null], [987, null], [1402, null]], "Documentation": [[1432, null], [1432, null], [1432, null]], "ENDS_WITH": [[1427, "ends-with"]], "EXCEPT": [[1433, "except"]], "EXP": [[1426, "exp"]], "EXPLAIN": [[1434, "explain"]], "EXTRACT": [[1428, "extract"]], "Errors": [[377, "errors"]], "Examples": [[1, "examples"], [997, "examples"], [1435, "examples"]], "Excel / ODS": [[882, "excel-ods"]], "Exceptions": [[377, null]], "Export": [[355, null], [1403, null]], "Expression SQL": [[1432, "expression-sql"]], "Expression plugins": [[995, "expression-plugins"]], "Expressions": [[869, null]], "Extending the API": [[1, null]], "FIRST": [[1421, "first"]], "FLOOR": [[1426, "floor"]], "FROM": [[1420, "from"]], "Feather / IPC": [[882, "feather-ipc"]], "Frame SQL": [[1432, "frame-sql"]], "Functions": [[372, null], [868, null], [880, null], [997, "functions"]], "GPUEngine": [[988, null]], "GREATEST": [[1424, "greatest"]], "GROUP BY": [[1420, "group-by"]], "Global SQL": [[1432, "global-sql"]], "GroupBy": [[356, null], [989, null]], "HAVING": [[1420, "having"]], "IF": [[1424, "if"]], "IFNULL": [[1424, "ifnull"]], "INITCAP": [[1427, "initcap"]], "INTERSECT": [[1433, "intersect"]], "IO plugins": [[995, "io-plugins"]], "Iceberg": [[882, "iceberg"]], "Importing": [[997, "importing"]], "InProcessQuery": [[990, null]], "Index": [[0, null]], "Input/output": [[882, null]], "Introduction": [[1432, "introduction"]], "JOIN": [[1420, "join"]], "JSON": [[882, "json"]], "LAST": [[1421, "last"]], "LEAST": [[1424, "least"]], "LEFT": [[1427, "left"]], "LENGTH": [[1427, "length"]], "LIMIT": [[1420, "limit"]], "LN": [[1426, "ln"]], "LOG": [[1426, "log"]], "LOG10": [[1426, "log10"]], "LOG1P": [[1426, "log1p"]], "LOG2": [[1426, "log2"]], "LOWER": [[1427, "lower"]], "LTRIM": [[1427, "ltrim"]], "LazyFrame": [[991, null]], "List": [[373, null], [870, null], [1405, null]], "MAX": [[1421, "max"]], "MEDIAN": [[1421, "median"]], "MIN": [[1421, "min"]], "MOD": [[1426, "mod"]], "Manipulation/selection": [[359, null], [873, null], [993, null], [1407, null]], "Math": [[1426, null]], "Meta": [[871, null]], "Metadata": [[994, null]], "Methods": [[1432, "methods"]], "Miscellaneous": [[358, null], [872, null], [880, "miscellaneous"], [992, null], [1406, null]], "Multiple Config instances": [[207, "multiple-config-instances"]], "Multiple queries": [[880, "multiple-queries"]], "NORMALIZE": [[1427, "normalize"]], "NULLIF": [[1424, "nullif"]], "Name": [[874, null]], "Nested": [[376, "nested"]], "Numeric": [[376, "numeric"], [875, "numeric"], [1408, "numeric"]], "OCTET_LENGTH": [[1427, "octet-length"]], "OFFSET": [[1420, "offset"]], "ORDER BY": [[1420, "order-by"]], "Operators": [[875, null], [1408, null]], "Other": [[376, "other"]], "PI": [[1426, "pi"]], "POW": [[1426, "pow"]], "Panic": [[377, "panic"]], "Parametric testing": [[1435, "parametric-testing"]], "Parquet": [[882, "parquet"]], "Partition": [[882, "partition"]], "Plot": [[360, null], [1409, null]], "Plugins": [[995, null]], "Polars strategies": [[1435, "polars-strategies"]], "Profiles": [[1435, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[882, "pyarrow-datasets"]], "Python API": [[1432, null]], "Python API reference": [[881, null]], "QUANTILE_CONT": [[1421, "quantile-cont"]], "QUANTILE_DISC": [[1421, "quantile-disc"]], "Querying": [[1432, "querying"]], "RADIANS": [[1429, "radians"]], "REGEXP_LIKE": [[1427, "regexp-like"]], "REPLACE": [[1427, "replace"]], "REVERSE": [[1427, "reverse"]], "RIGHT": [[1427, "right"]], "ROUND": [[1426, "round"]], "RTRIM": [[1427, "rtrim"]], "Random": [[880, "random"]], "SELECT": [[1420, "select"]], "SHOW TABLES": [[1434, "show-tables"]], "SIGN": [[1426, "sign"]], "SIN": [[1429, "sin"]], "SIND": [[1429, "sind"]], "SPLIT_PART": [[1427, "split-part"]], "SQL Clauses": [[1420, null]], "SQL Functions": [[1425, null]], "SQL Interface": [[1431, null]], "SQLContext": [[1432, "sqlcontext"]], "SQRT": [[1426, "sqrt"]], "STARTS_WITH": [[1427, "starts-with"]], "STDDEV": [[1421, "stddev"]], "STRFTIME": [[1428, "strftime"]], "STRING_TO_ARRAY": [[1427, "string-to-array"]], "STRPOS": [[1427, "strpos"]], "STRPTIME": [[1427, "strptime"]], "SUBSTR": [[1427, "substr"]], "SUM": [[1421, "sum"]], "Scan Cast Options": [[882, "scan-cast-options"]], "Schema": [[996, null]], "Selectors": [[997, null]], "Serialization": [[358, "serialization"], [992, "serialization"]], "Series": [[1404, null]], "Set Operations": [[1433, null]], "Set operations": [[997, "set-operations"]], "Strategy helpers": [[1435, "strategy-helpers"]], "String": [[376, "string"], [876, null], [1410, null], [1427, null]], "StringCache": [[880, "stringcache"]], "Struct": [[374, null], [877, null], [1411, null]], "Style": [[361, null]], "TAN": [[1429, "tan"]], "TAND": [[1429, "tand"]], "TIMESTAMP": [[1427, "timestamp"]], "TRUNCATE": [[1434, "truncate"]], "TRY_CAST": [[1430, "try-cast"]], "Table Operations": [[1434, null]], "Temporal": [[376, "temporal"], [878, null], [1412, null], [1428, null]], "Testing": [[1435, null]], "Trigonometry": [[1429, null]], "Types": [[1430, null]], "UNION": [[1433, "union"]], "UNION ALL": [[1433, "union-all"]], "UNION BY NAME": [[1433, "union-by-name"]], "UNNEST": [[1422, "unnest"], [1434, "unnest"]], "UPPER": [[1427, "upper"]], "Unity Catalog": [[206, null]], "Use as a context manager": [[207, "use-as-a-context-manager"]], "Use as a decorator": [[207, "use-as-a-decorator"]], "VARIANCE": [[1421, "variance"]], "WHERE": [[1420, "where"]], "Warnings": [[377, "warnings"]], "Window": [[879, null]], "polars.Catalog": [[192, null]], "polars.Catalog.get_table_info": [[193, null]], "polars.Catalog.list_catalogs": [[194, null]], "polars.Catalog.list_namespaces": [[195, null]], "polars.Catalog.list_tables": [[196, null]], "polars.Catalog.scan_table": [[197, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_default_credential_provider": [[10, null]], "polars.Config.set_engine_affinity": [[11, null]], "polars.Config.set_float_precision": [[12, null]], "polars.Config.set_fmt_float": [[13, null]], "polars.Config.set_fmt_str_lengths": [[14, null]], "polars.Config.set_fmt_table_cell_list_len": [[15, null]], "polars.Config.set_streaming_chunk_size": [[16, null]], "polars.Config.set_tbl_cell_alignment": [[17, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[18, null]], "polars.Config.set_tbl_cols": [[19, null]], "polars.Config.set_tbl_column_data_type_inline": [[20, null]], "polars.Config.set_tbl_dataframe_shape_below": [[21, null]], "polars.Config.set_tbl_formatting": [[22, null]], "polars.Config.set_tbl_hide_column_data_types": [[23, null]], "polars.Config.set_tbl_hide_column_names": [[24, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[25, null]], "polars.Config.set_tbl_hide_dtype_separator": [[26, null]], "polars.Config.set_tbl_rows": [[27, null]], "polars.Config.set_tbl_width_chars": [[28, null]], "polars.Config.set_thousands_separator": [[29, null]], "polars.Config.set_trim_decimal_zeros": [[30, null]], "polars.Config.set_verbose": [[31, null]], "polars.Config.state": [[32, null]], "polars.CredentialProvider": [[33, null]], "polars.CredentialProviderAWS": [[34, null]], "polars.CredentialProviderAzure": [[35, null]], "polars.CredentialProviderGCP": [[36, null]], "polars.DataFrame.__array__": [[209, null]], "polars.DataFrame.__arrow_c_stream__": [[210, null]], "polars.DataFrame.__dataframe__": [[211, null]], "polars.DataFrame.__getitem__": [[212, null]], "polars.DataFrame.__setitem__": [[213, null]], "polars.DataFrame.approx_n_unique": [[214, null]], "polars.DataFrame.bottom_k": [[215, null]], "polars.DataFrame.cast": [[216, null]], "polars.DataFrame.clear": [[217, null]], "polars.DataFrame.clone": [[218, null]], "polars.DataFrame.collect_schema": [[219, null]], "polars.DataFrame.columns": [[220, null]], "polars.DataFrame.corr": [[221, null]], "polars.DataFrame.count": [[222, null]], "polars.DataFrame.describe": [[223, null]], "polars.DataFrame.deserialize": [[224, null]], "polars.DataFrame.drop": [[225, null]], "polars.DataFrame.drop_in_place": [[226, null]], "polars.DataFrame.drop_nans": [[227, null]], "polars.DataFrame.drop_nulls": [[228, null]], "polars.DataFrame.dtypes": [[229, null]], "polars.DataFrame.equals": [[230, null]], "polars.DataFrame.estimated_size": [[231, null]], "polars.DataFrame.explode": [[232, null]], "polars.DataFrame.extend": [[233, null]], "polars.DataFrame.fill_nan": [[234, null]], "polars.DataFrame.fill_null": [[235, null]], "polars.DataFrame.filter": [[236, null]], "polars.DataFrame.flags": [[237, null]], "polars.DataFrame.fold": [[238, null]], "polars.DataFrame.gather_every": [[239, null]], "polars.DataFrame.get_column": [[240, null]], "polars.DataFrame.get_column_index": [[241, null]], "polars.DataFrame.get_columns": [[242, null]], "polars.DataFrame.glimpse": [[243, null]], "polars.DataFrame.group_by": [[244, null]], "polars.DataFrame.group_by_dynamic": [[245, null]], "polars.DataFrame.hash_rows": [[246, null]], "polars.DataFrame.head": [[247, null]], "polars.DataFrame.height": [[248, null]], "polars.DataFrame.hstack": [[249, null]], "polars.DataFrame.insert_column": [[250, null]], "polars.DataFrame.interpolate": [[251, null]], "polars.DataFrame.is_duplicated": [[252, null]], "polars.DataFrame.is_empty": [[253, null]], "polars.DataFrame.is_unique": [[254, null]], "polars.DataFrame.item": [[255, null]], "polars.DataFrame.iter_columns": [[256, null]], "polars.DataFrame.iter_rows": [[257, null]], "polars.DataFrame.iter_slices": [[258, null]], "polars.DataFrame.join": [[259, null]], "polars.DataFrame.join_asof": [[260, null]], "polars.DataFrame.join_where": [[261, null]], "polars.DataFrame.lazy": [[262, null]], "polars.DataFrame.limit": [[263, null]], "polars.DataFrame.map_columns": [[264, null]], "polars.DataFrame.map_rows": [[265, null]], "polars.DataFrame.match_to_schema": [[266, null]], "polars.DataFrame.max": [[267, null]], "polars.DataFrame.max_horizontal": [[268, null]], "polars.DataFrame.mean": [[269, null]], "polars.DataFrame.mean_horizontal": [[270, null]], "polars.DataFrame.median": [[271, null]], "polars.DataFrame.melt": [[272, null]], "polars.DataFrame.merge_sorted": [[273, null]], "polars.DataFrame.min": [[274, null]], "polars.DataFrame.min_horizontal": [[275, null]], "polars.DataFrame.n_chunks": [[276, null]], "polars.DataFrame.n_unique": [[277, null]], "polars.DataFrame.null_count": [[278, null]], "polars.DataFrame.partition_by": [[279, null]], "polars.DataFrame.pipe": [[280, null]], "polars.DataFrame.pivot": [[281, null]], "polars.DataFrame.product": [[282, null]], "polars.DataFrame.quantile": [[283, null]], "polars.DataFrame.rechunk": [[284, null]], "polars.DataFrame.remove": [[285, null]], "polars.DataFrame.rename": [[286, null]], "polars.DataFrame.replace_column": [[287, null]], "polars.DataFrame.reverse": [[288, null]], "polars.DataFrame.rolling": [[289, null]], "polars.DataFrame.row": [[290, null]], "polars.DataFrame.rows": [[291, null]], "polars.DataFrame.rows_by_key": [[292, null]], "polars.DataFrame.sample": [[293, null]], "polars.DataFrame.schema": [[294, null]], "polars.DataFrame.select": [[295, null]], "polars.DataFrame.select_seq": [[296, null]], "polars.DataFrame.serialize": [[297, null]], "polars.DataFrame.set_sorted": [[298, null]], "polars.DataFrame.shape": [[299, null]], "polars.DataFrame.shift": [[300, null]], "polars.DataFrame.shrink_to_fit": [[301, null]], "polars.DataFrame.slice": [[302, null]], "polars.DataFrame.sort": [[303, null]], "polars.DataFrame.sql": [[304, null]], "polars.DataFrame.std": [[305, null]], "polars.DataFrame.sum": [[306, null]], "polars.DataFrame.sum_horizontal": [[307, null]], "polars.DataFrame.tail": [[308, null]], "polars.DataFrame.to_arrow": [[309, null]], "polars.DataFrame.to_dict": [[310, null]], "polars.DataFrame.to_dicts": [[311, null]], "polars.DataFrame.to_dummies": [[312, null]], "polars.DataFrame.to_init_repr": [[313, null]], "polars.DataFrame.to_jax": [[314, null]], "polars.DataFrame.to_numpy": [[315, null]], "polars.DataFrame.to_pandas": [[316, null]], "polars.DataFrame.to_series": [[317, null]], "polars.DataFrame.to_struct": [[318, null]], "polars.DataFrame.to_torch": [[319, null]], "polars.DataFrame.top_k": [[320, null]], "polars.DataFrame.transpose": [[321, null]], "polars.DataFrame.unique": [[322, null]], "polars.DataFrame.unnest": [[323, null]], "polars.DataFrame.unpivot": [[324, null]], "polars.DataFrame.unstack": [[325, null]], "polars.DataFrame.update": [[326, null]], "polars.DataFrame.upsample": [[327, null]], "polars.DataFrame.var": [[328, null]], "polars.DataFrame.vstack": [[329, null]], "polars.DataFrame.width": [[330, null]], "polars.DataFrame.with_columns": [[331, null]], "polars.DataFrame.with_columns_seq": [[332, null]], "polars.DataFrame.with_row_count": [[333, null]], "polars.DataFrame.with_row_index": [[334, null]], "polars.DataFrame.write_avro": [[37, null]], "polars.DataFrame.write_clipboard": [[38, null]], "polars.DataFrame.write_csv": [[39, null]], "polars.DataFrame.write_database": [[40, null]], "polars.DataFrame.write_delta": [[41, null]], "polars.DataFrame.write_excel": [[42, null]], "polars.DataFrame.write_iceberg": [[43, null]], "polars.DataFrame.write_ipc": [[44, null]], "polars.DataFrame.write_ipc_stream": [[45, null]], "polars.DataFrame.write_json": [[46, null]], "polars.DataFrame.write_ndjson": [[47, null]], "polars.DataFrame.write_parquet": [[48, null]], "polars.DataType.to_dtype_expr": [[362, null]], "polars.DataTypeExpr.arr.inner_dtype": [[363, null]], "polars.DataTypeExpr.arr.shape": [[364, null]], "polars.DataTypeExpr.arr.width": [[365, null]], "polars.DataTypeExpr.list.inner_dtype": [[366, null]], "polars.DataTypeExpr.struct.field_dtype": [[367, null]], "polars.DataTypeExpr.struct.field_names": [[368, null]], "polars.Expr.abs": [[379, null]], "polars.Expr.add": [[380, null]], "polars.Expr.agg_groups": [[381, null]], "polars.Expr.alias": [[382, null]], "polars.Expr.all": [[383, null]], "polars.Expr.and_": [[384, null]], "polars.Expr.any": [[385, null]], "polars.Expr.append": [[386, null]], "polars.Expr.approx_n_unique": [[387, null]], "polars.Expr.arccos": [[388, null]], "polars.Expr.arccosh": [[389, null]], "polars.Expr.arcsin": [[390, null]], "polars.Expr.arcsinh": [[391, null]], "polars.Expr.arctan": [[392, null]], "polars.Expr.arctanh": [[393, null]], "polars.Expr.arg_max": [[394, null]], "polars.Expr.arg_min": [[395, null]], "polars.Expr.arg_sort": [[396, null]], "polars.Expr.arg_true": [[397, null]], "polars.Expr.arg_unique": [[398, null]], "polars.Expr.arr.all": [[399, null]], "polars.Expr.arr.any": [[400, null]], "polars.Expr.arr.arg_max": [[401, null]], "polars.Expr.arr.arg_min": [[402, null]], "polars.Expr.arr.contains": [[403, null]], "polars.Expr.arr.count_matches": [[404, null]], "polars.Expr.arr.explode": [[405, null]], "polars.Expr.arr.first": [[406, null]], "polars.Expr.arr.get": [[407, null]], "polars.Expr.arr.join": [[408, null]], "polars.Expr.arr.last": [[409, null]], "polars.Expr.arr.len": [[410, null]], "polars.Expr.arr.max": [[411, null]], "polars.Expr.arr.mean": [[412, null]], "polars.Expr.arr.median": [[413, null]], "polars.Expr.arr.min": [[414, null]], "polars.Expr.arr.n_unique": [[415, null]], "polars.Expr.arr.reverse": [[416, null]], "polars.Expr.arr.shift": [[417, null]], "polars.Expr.arr.sort": [[418, null]], "polars.Expr.arr.std": [[419, null]], "polars.Expr.arr.sum": [[420, null]], "polars.Expr.arr.to_list": [[421, null]], "polars.Expr.arr.to_struct": [[422, null]], "polars.Expr.arr.unique": [[423, null]], "polars.Expr.arr.var": [[424, null]], "polars.Expr.backward_fill": [[425, null]], "polars.Expr.bin.contains": [[426, null]], "polars.Expr.bin.decode": [[427, null]], "polars.Expr.bin.encode": [[428, null]], "polars.Expr.bin.ends_with": [[429, null]], "polars.Expr.bin.reinterpret": [[430, null]], "polars.Expr.bin.size": [[431, null]], "polars.Expr.bin.starts_with": [[432, null]], "polars.Expr.bitwise_and": [[433, null]], "polars.Expr.bitwise_count_ones": [[434, null]], "polars.Expr.bitwise_count_zeros": [[435, null]], "polars.Expr.bitwise_leading_ones": [[436, null]], "polars.Expr.bitwise_leading_zeros": [[437, null]], "polars.Expr.bitwise_or": [[438, null]], "polars.Expr.bitwise_trailing_ones": [[439, null]], "polars.Expr.bitwise_trailing_zeros": [[440, null]], "polars.Expr.bitwise_xor": [[441, null]], "polars.Expr.bottom_k": [[442, null]], "polars.Expr.bottom_k_by": [[443, null]], "polars.Expr.cast": [[444, null]], "polars.Expr.cat.ends_with": [[445, null]], "polars.Expr.cat.get_categories": [[446, null]], "polars.Expr.cat.len_bytes": [[447, null]], "polars.Expr.cat.len_chars": [[448, null]], "polars.Expr.cat.starts_with": [[449, null]], "polars.Expr.cbrt": [[450, null]], "polars.Expr.ceil": [[451, null]], "polars.Expr.clip": [[452, null]], "polars.Expr.cos": [[453, null]], "polars.Expr.cosh": [[454, null]], "polars.Expr.cot": [[455, null]], "polars.Expr.count": [[456, null]], "polars.Expr.cum_count": [[457, null]], "polars.Expr.cum_max": [[458, null]], "polars.Expr.cum_min": [[459, null]], "polars.Expr.cum_prod": [[460, null]], "polars.Expr.cum_sum": [[461, null]], "polars.Expr.cumulative_eval": [[462, null]], "polars.Expr.cut": [[463, null]], "polars.Expr.degrees": [[464, null]], "polars.Expr.deserialize": [[465, null]], "polars.Expr.diff": [[466, null]], "polars.Expr.dot": [[467, null]], "polars.Expr.drop_nans": [[468, null]], "polars.Expr.drop_nulls": [[469, null]], "polars.Expr.dt.add_business_days": [[470, null]], "polars.Expr.dt.base_utc_offset": [[471, null]], "polars.Expr.dt.cast_time_unit": [[472, null]], "polars.Expr.dt.century": [[473, null]], "polars.Expr.dt.combine": [[474, null]], "polars.Expr.dt.convert_time_zone": [[475, null]], "polars.Expr.dt.date": [[476, null]], "polars.Expr.dt.datetime": [[477, null]], "polars.Expr.dt.day": [[478, null]], "polars.Expr.dt.dst_offset": [[479, null]], "polars.Expr.dt.epoch": [[480, null]], "polars.Expr.dt.hour": [[481, null]], "polars.Expr.dt.is_business_day": [[482, null]], "polars.Expr.dt.is_leap_year": [[483, null]], "polars.Expr.dt.iso_year": [[484, null]], "polars.Expr.dt.microsecond": [[485, null]], "polars.Expr.dt.millennium": [[486, null]], "polars.Expr.dt.millisecond": [[487, null]], "polars.Expr.dt.minute": [[488, null]], "polars.Expr.dt.month": [[489, null]], "polars.Expr.dt.month_end": [[490, null]], "polars.Expr.dt.month_start": [[491, null]], "polars.Expr.dt.nanosecond": [[492, null]], "polars.Expr.dt.offset_by": [[493, null]], "polars.Expr.dt.ordinal_day": [[494, null]], "polars.Expr.dt.quarter": [[495, null]], "polars.Expr.dt.replace": [[496, null]], "polars.Expr.dt.replace_time_zone": [[497, null]], "polars.Expr.dt.round": [[498, null]], "polars.Expr.dt.second": [[499, null]], "polars.Expr.dt.strftime": [[500, null]], "polars.Expr.dt.time": [[501, null]], "polars.Expr.dt.timestamp": [[502, null]], "polars.Expr.dt.to_string": [[503, null]], "polars.Expr.dt.total_days": [[504, null]], "polars.Expr.dt.total_hours": [[505, null]], "polars.Expr.dt.total_microseconds": [[506, null]], "polars.Expr.dt.total_milliseconds": [[507, null]], "polars.Expr.dt.total_minutes": [[508, null]], "polars.Expr.dt.total_nanoseconds": [[509, null]], "polars.Expr.dt.total_seconds": [[510, null]], "polars.Expr.dt.truncate": [[511, null]], "polars.Expr.dt.week": [[512, null]], "polars.Expr.dt.weekday": [[513, null]], "polars.Expr.dt.with_time_unit": [[514, null]], "polars.Expr.dt.year": [[515, null]], "polars.Expr.entropy": [[516, null]], "polars.Expr.eq": [[517, null]], "polars.Expr.eq_missing": [[518, null]], "polars.Expr.ewm_mean": [[519, null]], "polars.Expr.ewm_mean_by": [[520, null]], "polars.Expr.ewm_std": [[521, null]], "polars.Expr.ewm_var": [[522, null]], "polars.Expr.exclude": [[523, null]], "polars.Expr.exp": [[524, null]], "polars.Expr.explode": [[525, null]], "polars.Expr.extend_constant": [[526, null]], "polars.Expr.fill_nan": [[527, null]], "polars.Expr.fill_null": [[528, null]], "polars.Expr.filter": [[529, null]], "polars.Expr.first": [[530, null]], "polars.Expr.flatten": [[531, null]], "polars.Expr.floor": [[532, null]], "polars.Expr.floordiv": [[533, null]], "polars.Expr.forward_fill": [[534, null]], "polars.Expr.from_json": [[535, null]], "polars.Expr.gather": [[536, null]], "polars.Expr.gather_every": [[537, null]], "polars.Expr.ge": [[538, null]], "polars.Expr.get": [[539, null]], "polars.Expr.gt": [[540, null]], "polars.Expr.has_nulls": [[541, null]], "polars.Expr.hash": [[542, null]], "polars.Expr.head": [[543, null]], "polars.Expr.hist": [[544, null]], "polars.Expr.implode": [[545, null]], "polars.Expr.index_of": [[546, null]], "polars.Expr.inspect": [[547, null]], "polars.Expr.interpolate": [[548, null]], "polars.Expr.interpolate_by": [[549, null]], "polars.Expr.is_between": [[550, null]], "polars.Expr.is_close": [[551, null]], "polars.Expr.is_duplicated": [[552, null]], "polars.Expr.is_finite": [[553, null]], "polars.Expr.is_first_distinct": [[554, null]], "polars.Expr.is_in": [[555, null]], "polars.Expr.is_infinite": [[556, null]], "polars.Expr.is_last_distinct": [[557, null]], "polars.Expr.is_nan": [[558, null]], "polars.Expr.is_not_nan": [[559, null]], "polars.Expr.is_not_null": [[560, null]], "polars.Expr.is_null": [[561, null]], "polars.Expr.is_unique": [[562, null]], "polars.Expr.kurtosis": [[563, null]], "polars.Expr.last": [[564, null]], "polars.Expr.le": [[565, null]], "polars.Expr.len": [[566, null]], "polars.Expr.limit": [[567, null]], "polars.Expr.list.all": [[568, null]], "polars.Expr.list.any": [[569, null]], "polars.Expr.list.arg_max": [[570, null]], "polars.Expr.list.arg_min": [[571, null]], "polars.Expr.list.concat": [[572, null]], "polars.Expr.list.contains": [[573, null]], "polars.Expr.list.count_matches": [[574, null]], "polars.Expr.list.diff": [[575, null]], "polars.Expr.list.drop_nulls": [[576, null]], "polars.Expr.list.eval": [[577, null]], "polars.Expr.list.explode": [[578, null]], "polars.Expr.list.filter": [[579, null]], "polars.Expr.list.first": [[580, null]], "polars.Expr.list.gather": [[581, null]], "polars.Expr.list.gather_every": [[582, null]], "polars.Expr.list.get": [[583, null]], "polars.Expr.list.head": [[584, null]], "polars.Expr.list.join": [[585, null]], "polars.Expr.list.last": [[586, null]], "polars.Expr.list.len": [[587, null]], "polars.Expr.list.max": [[588, null]], "polars.Expr.list.mean": [[589, null]], "polars.Expr.list.median": [[590, null]], "polars.Expr.list.min": [[591, null]], "polars.Expr.list.n_unique": [[592, null]], "polars.Expr.list.reverse": [[593, null]], "polars.Expr.list.sample": [[594, null]], "polars.Expr.list.set_difference": [[595, null]], "polars.Expr.list.set_intersection": [[596, null]], "polars.Expr.list.set_symmetric_difference": [[597, null]], "polars.Expr.list.set_union": [[598, null]], "polars.Expr.list.shift": [[599, null]], "polars.Expr.list.slice": [[600, null]], "polars.Expr.list.sort": [[601, null]], "polars.Expr.list.std": [[602, null]], "polars.Expr.list.sum": [[603, null]], "polars.Expr.list.tail": [[604, null]], "polars.Expr.list.to_array": [[605, null]], "polars.Expr.list.to_struct": [[606, null]], "polars.Expr.list.unique": [[607, null]], "polars.Expr.list.var": [[608, null]], "polars.Expr.log": [[609, null]], "polars.Expr.log10": [[610, null]], "polars.Expr.log1p": [[611, null]], "polars.Expr.lower_bound": [[612, null]], "polars.Expr.lt": [[613, null]], "polars.Expr.map_batches": [[614, null]], "polars.Expr.map_elements": [[615, null]], "polars.Expr.max": [[616, null]], "polars.Expr.mean": [[617, null]], "polars.Expr.median": [[618, null]], "polars.Expr.meta.eq": [[619, null]], "polars.Expr.meta.has_multiple_outputs": [[620, null]], "polars.Expr.meta.is_column": [[621, null]], "polars.Expr.meta.is_column_selection": [[622, null]], "polars.Expr.meta.is_literal": [[623, null]], "polars.Expr.meta.is_regex_projection": [[624, null]], "polars.Expr.meta.ne": [[625, null]], "polars.Expr.meta.output_name": [[626, null]], "polars.Expr.meta.pop": [[627, null]], "polars.Expr.meta.root_names": [[628, null]], "polars.Expr.meta.serialize": [[629, null]], "polars.Expr.meta.show_graph": [[630, null]], "polars.Expr.meta.tree_format": [[631, null]], "polars.Expr.meta.undo_aliases": [[632, null]], "polars.Expr.meta.write_json": [[633, null]], "polars.Expr.min": [[634, null]], "polars.Expr.mod": [[635, null]], "polars.Expr.mode": [[636, null]], "polars.Expr.mul": [[637, null]], "polars.Expr.n_unique": [[638, null]], "polars.Expr.name.keep": [[639, null]], "polars.Expr.name.map": [[640, null]], "polars.Expr.name.map_fields": [[641, null]], "polars.Expr.name.prefix": [[642, null]], "polars.Expr.name.prefix_fields": [[643, null]], "polars.Expr.name.suffix": [[644, null]], "polars.Expr.name.suffix_fields": [[645, null]], "polars.Expr.name.to_lowercase": [[646, null]], "polars.Expr.name.to_uppercase": [[647, null]], "polars.Expr.nan_max": [[648, null]], "polars.Expr.nan_min": [[649, null]], "polars.Expr.ne": [[650, null]], "polars.Expr.ne_missing": [[651, null]], "polars.Expr.neg": [[652, null]], "polars.Expr.not_": [[653, null]], "polars.Expr.null_count": [[654, null]], "polars.Expr.or_": [[655, null]], "polars.Expr.over": [[656, null]], "polars.Expr.pct_change": [[657, null]], "polars.Expr.peak_max": [[658, null]], "polars.Expr.peak_min": [[659, null]], "polars.Expr.pipe": [[660, null]], "polars.Expr.pow": [[661, null]], "polars.Expr.product": [[662, null]], "polars.Expr.qcut": [[663, null]], "polars.Expr.quantile": [[664, null]], "polars.Expr.radians": [[665, null]], "polars.Expr.rank": [[666, null]], "polars.Expr.rechunk": [[667, null]], "polars.Expr.reinterpret": [[668, null]], "polars.Expr.repeat_by": [[669, null]], "polars.Expr.replace": [[670, null]], "polars.Expr.replace_strict": [[671, null]], "polars.Expr.reshape": [[672, null]], "polars.Expr.reverse": [[673, null]], "polars.Expr.rle": [[674, null]], "polars.Expr.rle_id": [[675, null]], "polars.Expr.rolling": [[676, null]], "polars.Expr.rolling_kurtosis": [[677, null]], "polars.Expr.rolling_map": [[678, null]], "polars.Expr.rolling_max": [[679, null]], "polars.Expr.rolling_max_by": [[680, null]], "polars.Expr.rolling_mean": [[681, null]], "polars.Expr.rolling_mean_by": [[682, null]], "polars.Expr.rolling_median": [[683, null]], "polars.Expr.rolling_median_by": [[684, null]], "polars.Expr.rolling_min": [[685, null]], "polars.Expr.rolling_min_by": [[686, null]], "polars.Expr.rolling_quantile": [[687, null]], "polars.Expr.rolling_quantile_by": [[688, null]], "polars.Expr.rolling_skew": [[689, null]], "polars.Expr.rolling_std": [[690, null]], "polars.Expr.rolling_std_by": [[691, null]], "polars.Expr.rolling_sum": [[692, null]], "polars.Expr.rolling_sum_by": [[693, null]], "polars.Expr.rolling_var": [[694, null]], "polars.Expr.rolling_var_by": [[695, null]], "polars.Expr.round": [[696, null]], "polars.Expr.round_sig_figs": [[697, null]], "polars.Expr.sample": [[698, null]], "polars.Expr.search_sorted": [[699, null]], "polars.Expr.set_sorted": [[700, null]], "polars.Expr.shift": [[701, null]], "polars.Expr.shrink_dtype": [[702, null]], "polars.Expr.shuffle": [[703, null]], "polars.Expr.sign": [[704, null]], "polars.Expr.sin": [[705, null]], "polars.Expr.sinh": [[706, null]], "polars.Expr.skew": [[707, null]], "polars.Expr.slice": [[708, null]], "polars.Expr.sort": [[709, null]], "polars.Expr.sort_by": [[710, null]], "polars.Expr.sqrt": [[711, null]], "polars.Expr.std": [[712, null]], "polars.Expr.str.concat": [[713, null]], "polars.Expr.str.contains": [[714, null]], "polars.Expr.str.contains_any": [[715, null]], "polars.Expr.str.count_matches": [[716, null]], "polars.Expr.str.decode": [[717, null]], "polars.Expr.str.encode": [[718, null]], "polars.Expr.str.ends_with": [[719, null]], "polars.Expr.str.escape_regex": [[720, null]], "polars.Expr.str.explode": [[721, null]], "polars.Expr.str.extract": [[722, null]], "polars.Expr.str.extract_all": [[723, null]], "polars.Expr.str.extract_groups": [[724, null]], "polars.Expr.str.extract_many": [[725, null]], "polars.Expr.str.find": [[726, null]], "polars.Expr.str.find_many": [[727, null]], "polars.Expr.str.head": [[728, null]], "polars.Expr.str.join": [[729, null]], "polars.Expr.str.json_decode": [[730, null]], "polars.Expr.str.json_path_match": [[731, null]], "polars.Expr.str.len_bytes": [[732, null]], "polars.Expr.str.len_chars": [[733, null]], "polars.Expr.str.normalize": [[734, null]], "polars.Expr.str.pad_end": [[735, null]], "polars.Expr.str.pad_start": [[736, null]], "polars.Expr.str.replace": [[737, null]], "polars.Expr.str.replace_all": [[738, null]], "polars.Expr.str.replace_many": [[739, null]], "polars.Expr.str.reverse": [[740, null]], "polars.Expr.str.slice": [[741, null]], "polars.Expr.str.split": [[742, null]], "polars.Expr.str.split_exact": [[743, null]], "polars.Expr.str.splitn": [[744, null]], "polars.Expr.str.starts_with": [[745, null]], "polars.Expr.str.strip_chars": [[746, null]], "polars.Expr.str.strip_chars_end": [[747, null]], "polars.Expr.str.strip_chars_start": [[748, null]], "polars.Expr.str.strip_prefix": [[749, null]], "polars.Expr.str.strip_suffix": [[750, null]], "polars.Expr.str.strptime": [[751, null]], "polars.Expr.str.tail": [[752, null]], "polars.Expr.str.to_date": [[753, null]], "polars.Expr.str.to_datetime": [[754, null]], "polars.Expr.str.to_decimal": [[755, null]], "polars.Expr.str.to_integer": [[756, null]], "polars.Expr.str.to_lowercase": [[757, null]], "polars.Expr.str.to_time": [[758, null]], "polars.Expr.str.to_titlecase": [[759, null]], "polars.Expr.str.to_uppercase": [[760, null]], "polars.Expr.str.zfill": [[761, null]], "polars.Expr.struct.field": [[762, null]], "polars.Expr.struct.json_encode": [[763, null]], "polars.Expr.struct.rename_fields": [[764, null]], "polars.Expr.struct.unnest": [[765, null]], "polars.Expr.struct.with_fields": [[766, null]], "polars.Expr.sub": [[767, null]], "polars.Expr.sum": [[768, null]], "polars.Expr.tail": [[769, null]], "polars.Expr.tan": [[770, null]], "polars.Expr.tanh": [[771, null]], "polars.Expr.to_physical": [[772, null]], "polars.Expr.top_k": [[773, null]], "polars.Expr.top_k_by": [[774, null]], "polars.Expr.truediv": [[775, null]], "polars.Expr.unique": [[776, null]], "polars.Expr.unique_counts": [[777, null]], "polars.Expr.upper_bound": [[778, null]], "polars.Expr.value_counts": [[779, null]], "polars.Expr.var": [[780, null]], "polars.Expr.where": [[781, null]], "polars.Expr.xor": [[782, null]], "polars.LazyFrame.__getitem__": [[884, null]], "polars.LazyFrame.approx_n_unique": [[885, null]], "polars.LazyFrame.bottom_k": [[886, null]], "polars.LazyFrame.cache": [[887, null]], "polars.LazyFrame.cast": [[888, null]], "polars.LazyFrame.clear": [[889, null]], "polars.LazyFrame.clone": [[890, null]], "polars.LazyFrame.collect": [[891, null]], "polars.LazyFrame.collect_async": [[892, null]], "polars.LazyFrame.collect_batches": [[893, null]], "polars.LazyFrame.collect_schema": [[894, null]], "polars.LazyFrame.columns": [[895, null]], "polars.LazyFrame.count": [[896, null]], "polars.LazyFrame.describe": [[897, null]], "polars.LazyFrame.deserialize": [[898, null]], "polars.LazyFrame.drop": [[899, null]], "polars.LazyFrame.drop_nans": [[900, null]], "polars.LazyFrame.drop_nulls": [[901, null]], "polars.LazyFrame.dtypes": [[902, null]], "polars.LazyFrame.explain": [[903, null]], "polars.LazyFrame.explode": [[904, null]], "polars.LazyFrame.fill_nan": [[905, null]], "polars.LazyFrame.fill_null": [[906, null]], "polars.LazyFrame.filter": [[907, null]], "polars.LazyFrame.first": [[908, null]], "polars.LazyFrame.gather_every": [[909, null]], "polars.LazyFrame.group_by": [[910, null]], "polars.LazyFrame.group_by_dynamic": [[911, null]], "polars.LazyFrame.head": [[912, null]], "polars.LazyFrame.inspect": [[913, null]], "polars.LazyFrame.interpolate": [[914, null]], "polars.LazyFrame.join": [[915, null]], "polars.LazyFrame.join_asof": [[916, null]], "polars.LazyFrame.join_where": [[917, null]], "polars.LazyFrame.last": [[918, null]], "polars.LazyFrame.lazy": [[919, null]], "polars.LazyFrame.limit": [[920, null]], "polars.LazyFrame.map_batches": [[921, null]], "polars.LazyFrame.match_to_schema": [[922, null]], "polars.LazyFrame.max": [[923, null]], "polars.LazyFrame.mean": [[924, null]], "polars.LazyFrame.median": [[925, null]], "polars.LazyFrame.melt": [[926, null]], "polars.LazyFrame.merge_sorted": [[927, null]], "polars.LazyFrame.min": [[928, null]], "polars.LazyFrame.null_count": [[929, null]], "polars.LazyFrame.pipe": [[930, null]], "polars.LazyFrame.pipe_with_schema": [[931, null]], "polars.LazyFrame.profile": [[932, null]], "polars.LazyFrame.quantile": [[933, null]], "polars.LazyFrame.remote": [[934, null]], "polars.LazyFrame.remove": [[935, null]], "polars.LazyFrame.rename": [[936, null]], "polars.LazyFrame.reverse": [[937, null]], "polars.LazyFrame.rolling": [[938, null]], "polars.LazyFrame.schema": [[939, null]], "polars.LazyFrame.select": [[940, null]], "polars.LazyFrame.select_seq": [[941, null]], "polars.LazyFrame.serialize": [[942, null]], "polars.LazyFrame.set_sorted": [[943, null]], "polars.LazyFrame.shift": [[944, null]], "polars.LazyFrame.show_graph": [[945, null]], "polars.LazyFrame.sink_batches": [[946, null]], "polars.LazyFrame.sink_csv": [[49, null]], "polars.LazyFrame.sink_ipc": [[50, null]], "polars.LazyFrame.sink_ndjson": [[51, null]], "polars.LazyFrame.sink_parquet": [[52, null]], "polars.LazyFrame.slice": [[947, null]], "polars.LazyFrame.sort": [[948, null]], "polars.LazyFrame.sql": [[949, null]], "polars.LazyFrame.std": [[950, null]], "polars.LazyFrame.sum": [[951, null]], "polars.LazyFrame.tail": [[952, null]], "polars.LazyFrame.top_k": [[953, null]], "polars.LazyFrame.unique": [[954, null]], "polars.LazyFrame.unnest": [[955, null]], "polars.LazyFrame.unpivot": [[956, null]], "polars.LazyFrame.update": [[957, null]], "polars.LazyFrame.var": [[958, null]], "polars.LazyFrame.width": [[959, null]], "polars.LazyFrame.with_columns": [[960, null]], "polars.LazyFrame.with_columns_seq": [[961, null]], "polars.LazyFrame.with_context": [[962, null]], "polars.LazyFrame.with_row_count": [[963, null]], "polars.LazyFrame.with_row_index": [[964, null]], "polars.PartitionByKey": [[53, null]], "polars.PartitionMaxSize": [[54, null]], "polars.PartitionParted": [[55, null]], "polars.QueryOptFlags": [[965, null]], "polars.SQLContext.execute": [[1413, null]], "polars.SQLContext.execute_global": [[1414, null]], "polars.SQLContext.register": [[1415, null]], "polars.SQLContext.register_globals": [[1416, null]], "polars.SQLContext.register_many": [[1417, null]], "polars.SQLContext.tables": [[1418, null]], "polars.SQLContext.unregister": [[1419, null]], "polars.ScanCastOptions": [[56, null]], "polars.Series.__array__": [[999, null]], "polars.Series.__arrow_c_stream__": [[1000, null]], "polars.Series.__getitem__": [[1001, null]], "polars.Series.abs": [[1002, null]], "polars.Series.alias": [[1003, null]], "polars.Series.all": [[1004, null]], "polars.Series.any": [[1005, null]], "polars.Series.append": [[1006, null]], "polars.Series.approx_n_unique": [[1007, null]], "polars.Series.arccos": [[1008, null]], "polars.Series.arccosh": [[1009, null]], "polars.Series.arcsin": [[1010, null]], "polars.Series.arcsinh": [[1011, null]], "polars.Series.arctan": [[1012, null]], "polars.Series.arctanh": [[1013, null]], "polars.Series.arg_max": [[1014, null]], "polars.Series.arg_min": [[1015, null]], "polars.Series.arg_sort": [[1016, null]], "polars.Series.arg_true": [[1017, null]], "polars.Series.arg_unique": [[1018, null]], "polars.Series.arr.all": [[1019, null]], "polars.Series.arr.any": [[1020, null]], "polars.Series.arr.arg_max": [[1021, null]], "polars.Series.arr.arg_min": [[1022, null]], "polars.Series.arr.contains": [[1023, null]], "polars.Series.arr.count_matches": [[1024, null]], "polars.Series.arr.explode": [[1025, null]], "polars.Series.arr.first": [[1026, null]], "polars.Series.arr.get": [[1027, null]], "polars.Series.arr.join": [[1028, null]], "polars.Series.arr.last": [[1029, null]], "polars.Series.arr.len": [[1030, null]], "polars.Series.arr.max": [[1031, null]], "polars.Series.arr.median": [[1032, null]], "polars.Series.arr.min": [[1033, null]], "polars.Series.arr.n_unique": [[1034, null]], "polars.Series.arr.reverse": [[1035, null]], "polars.Series.arr.shift": [[1036, null]], "polars.Series.arr.sort": [[1037, null]], "polars.Series.arr.std": [[1038, null]], "polars.Series.arr.sum": [[1039, null]], "polars.Series.arr.to_list": [[1040, null]], "polars.Series.arr.to_struct": [[1041, null]], "polars.Series.arr.unique": [[1042, null]], "polars.Series.arr.var": [[1043, null]], "polars.Series.backward_fill": [[1044, null]], "polars.Series.bin.contains": [[1045, null]], "polars.Series.bin.decode": [[1046, null]], "polars.Series.bin.encode": [[1047, null]], "polars.Series.bin.ends_with": [[1048, null]], "polars.Series.bin.reinterpret": [[1049, null]], "polars.Series.bin.size": [[1050, null]], "polars.Series.bin.starts_with": [[1051, null]], "polars.Series.bitwise_and": [[1052, null]], "polars.Series.bitwise_count_ones": [[1053, null]], "polars.Series.bitwise_count_zeros": [[1054, null]], "polars.Series.bitwise_leading_ones": [[1055, null]], "polars.Series.bitwise_leading_zeros": [[1056, null]], "polars.Series.bitwise_or": [[1057, null]], "polars.Series.bitwise_trailing_ones": [[1058, null]], "polars.Series.bitwise_trailing_zeros": [[1059, null]], "polars.Series.bitwise_xor": [[1060, null]], "polars.Series.bottom_k": [[1061, null]], "polars.Series.bottom_k_by": [[1062, null]], "polars.Series.cast": [[1063, null]], "polars.Series.cat.ends_with": [[1064, null]], "polars.Series.cat.get_categories": [[1065, null]], "polars.Series.cat.is_local": [[1066, null]], "polars.Series.cat.len_bytes": [[1067, null]], "polars.Series.cat.len_chars": [[1068, null]], "polars.Series.cat.starts_with": [[1069, null]], "polars.Series.cat.to_local": [[1070, null]], "polars.Series.cat.uses_lexical_ordering": [[1071, null]], "polars.Series.cbrt": [[1072, null]], "polars.Series.ceil": [[1073, null]], "polars.Series.chunk_lengths": [[1074, null]], "polars.Series.clear": [[1075, null]], "polars.Series.clip": [[1076, null]], "polars.Series.clone": [[1077, null]], "polars.Series.cos": [[1078, null]], "polars.Series.cosh": [[1079, null]], "polars.Series.cot": [[1080, null]], "polars.Series.count": [[1081, null]], "polars.Series.cum_count": [[1082, null]], "polars.Series.cum_max": [[1083, null]], "polars.Series.cum_min": [[1084, null]], "polars.Series.cum_prod": [[1085, null]], "polars.Series.cum_sum": [[1086, null]], "polars.Series.cumulative_eval": [[1087, null]], "polars.Series.cut": [[1088, null]], "polars.Series.describe": [[1089, null]], "polars.Series.diff": [[1090, null]], "polars.Series.dot": [[1091, null]], "polars.Series.drop_nans": [[1092, null]], "polars.Series.drop_nulls": [[1093, null]], "polars.Series.dt.add_business_days": [[1094, null]], "polars.Series.dt.base_utc_offset": [[1095, null]], "polars.Series.dt.cast_time_unit": [[1096, null]], "polars.Series.dt.century": [[1097, null]], "polars.Series.dt.combine": [[1098, null]], "polars.Series.dt.convert_time_zone": [[1099, null]], "polars.Series.dt.date": [[1100, null]], "polars.Series.dt.datetime": [[1101, null]], "polars.Series.dt.day": [[1102, null]], "polars.Series.dt.dst_offset": [[1103, null]], "polars.Series.dt.epoch": [[1104, null]], "polars.Series.dt.hour": [[1105, null]], "polars.Series.dt.is_business_day": [[1106, null]], "polars.Series.dt.is_leap_year": [[1107, null]], "polars.Series.dt.iso_year": [[1108, null]], "polars.Series.dt.max": [[1109, null]], "polars.Series.dt.mean": [[1110, null]], "polars.Series.dt.median": [[1111, null]], "polars.Series.dt.microsecond": [[1112, null]], "polars.Series.dt.millennium": [[1113, null]], "polars.Series.dt.millisecond": [[1114, null]], "polars.Series.dt.min": [[1115, null]], "polars.Series.dt.minute": [[1116, null]], "polars.Series.dt.month": [[1117, null]], "polars.Series.dt.month_end": [[1118, null]], "polars.Series.dt.month_start": [[1119, null]], "polars.Series.dt.nanosecond": [[1120, null]], "polars.Series.dt.offset_by": [[1121, null]], "polars.Series.dt.ordinal_day": [[1122, null]], "polars.Series.dt.quarter": [[1123, null]], "polars.Series.dt.replace": [[1124, null]], "polars.Series.dt.replace_time_zone": [[1125, null]], "polars.Series.dt.round": [[1126, null]], "polars.Series.dt.second": [[1127, null]], "polars.Series.dt.strftime": [[1128, null]], "polars.Series.dt.time": [[1129, null]], "polars.Series.dt.timestamp": [[1130, null]], "polars.Series.dt.to_string": [[1131, null]], "polars.Series.dt.total_days": [[1132, null]], "polars.Series.dt.total_hours": [[1133, null]], "polars.Series.dt.total_microseconds": [[1134, null]], "polars.Series.dt.total_milliseconds": [[1135, null]], "polars.Series.dt.total_minutes": [[1136, null]], "polars.Series.dt.total_nanoseconds": [[1137, null]], "polars.Series.dt.total_seconds": [[1138, null]], "polars.Series.dt.truncate": [[1139, null]], "polars.Series.dt.week": [[1140, null]], "polars.Series.dt.weekday": [[1141, null]], "polars.Series.dt.with_time_unit": [[1142, null]], "polars.Series.dt.year": [[1143, null]], "polars.Series.dtype": [[1144, null]], "polars.Series.entropy": [[1145, null]], "polars.Series.eq": [[1146, null]], "polars.Series.eq_missing": [[1147, null]], "polars.Series.equals": [[1148, null]], "polars.Series.estimated_size": [[1149, null]], "polars.Series.ewm_mean": [[1150, null]], "polars.Series.ewm_mean_by": [[1151, null]], "polars.Series.ewm_std": [[1152, null]], "polars.Series.ewm_var": [[1153, null]], "polars.Series.exp": [[1154, null]], "polars.Series.explode": [[1155, null]], "polars.Series.extend": [[1156, null]], "polars.Series.extend_constant": [[1157, null]], "polars.Series.fill_nan": [[1158, null]], "polars.Series.fill_null": [[1159, null]], "polars.Series.filter": [[1160, null]], "polars.Series.first": [[1161, null]], "polars.Series.flags": [[1162, null]], "polars.Series.floor": [[1163, null]], "polars.Series.forward_fill": [[1164, null]], "polars.Series.gather": [[1165, null]], "polars.Series.gather_every": [[1166, null]], "polars.Series.ge": [[1167, null]], "polars.Series.get_chunks": [[1168, null]], "polars.Series.gt": [[1169, null]], "polars.Series.has_nulls": [[1170, null]], "polars.Series.has_validity": [[1171, null]], "polars.Series.hash": [[1172, null]], "polars.Series.head": [[1173, null]], "polars.Series.hist": [[1174, null]], "polars.Series.implode": [[1175, null]], "polars.Series.index_of": [[1176, null]], "polars.Series.interpolate": [[1177, null]], "polars.Series.interpolate_by": [[1178, null]], "polars.Series.is_between": [[1179, null]], "polars.Series.is_close": [[1180, null]], "polars.Series.is_duplicated": [[1181, null]], "polars.Series.is_empty": [[1182, null]], "polars.Series.is_finite": [[1183, null]], "polars.Series.is_first_distinct": [[1184, null]], "polars.Series.is_in": [[1185, null]], "polars.Series.is_infinite": [[1186, null]], "polars.Series.is_last_distinct": [[1187, null]], "polars.Series.is_nan": [[1188, null]], "polars.Series.is_not_nan": [[1189, null]], "polars.Series.is_not_null": [[1190, null]], "polars.Series.is_null": [[1191, null]], "polars.Series.is_sorted": [[1192, null]], "polars.Series.is_unique": [[1193, null]], "polars.Series.item": [[1194, null]], "polars.Series.kurtosis": [[1195, null]], "polars.Series.last": [[1196, null]], "polars.Series.le": [[1197, null]], "polars.Series.len": [[1198, null]], "polars.Series.limit": [[1199, null]], "polars.Series.list.all": [[1200, null]], "polars.Series.list.any": [[1201, null]], "polars.Series.list.arg_max": [[1202, null]], "polars.Series.list.arg_min": [[1203, null]], "polars.Series.list.concat": [[1204, null]], "polars.Series.list.contains": [[1205, null]], "polars.Series.list.count_matches": [[1206, null]], "polars.Series.list.diff": [[1207, null]], "polars.Series.list.drop_nulls": [[1208, null]], "polars.Series.list.eval": [[1209, null]], "polars.Series.list.explode": [[1210, null]], "polars.Series.list.filter": [[1211, null]], "polars.Series.list.first": [[1212, null]], "polars.Series.list.gather": [[1213, null]], "polars.Series.list.gather_every": [[1214, null]], "polars.Series.list.get": [[1215, null]], "polars.Series.list.head": [[1216, null]], "polars.Series.list.join": [[1217, null]], "polars.Series.list.last": [[1218, null]], "polars.Series.list.len": [[1219, null]], "polars.Series.list.max": [[1220, null]], "polars.Series.list.mean": [[1221, null]], "polars.Series.list.median": [[1222, null]], "polars.Series.list.min": [[1223, null]], "polars.Series.list.n_unique": [[1224, null]], "polars.Series.list.reverse": [[1225, null]], "polars.Series.list.sample": [[1226, null]], "polars.Series.list.set_difference": [[1227, null]], "polars.Series.list.set_intersection": [[1228, null]], "polars.Series.list.set_symmetric_difference": [[1229, null]], "polars.Series.list.set_union": [[1230, null]], "polars.Series.list.shift": [[1231, null]], "polars.Series.list.slice": [[1232, null]], "polars.Series.list.sort": [[1233, null]], "polars.Series.list.std": [[1234, null]], "polars.Series.list.sum": [[1235, null]], "polars.Series.list.tail": [[1236, null]], "polars.Series.list.to_array": [[1237, null]], "polars.Series.list.to_struct": [[1238, null]], "polars.Series.list.unique": [[1239, null]], "polars.Series.list.var": [[1240, null]], "polars.Series.log": [[1241, null]], "polars.Series.log10": [[1242, null]], "polars.Series.log1p": [[1243, null]], "polars.Series.lower_bound": [[1244, null]], "polars.Series.lt": [[1245, null]], "polars.Series.map_elements": [[1246, null]], "polars.Series.max": [[1247, null]], "polars.Series.mean": [[1248, null]], "polars.Series.median": [[1249, null]], "polars.Series.min": [[1250, null]], "polars.Series.mode": [[1251, null]], "polars.Series.n_chunks": [[1252, null]], "polars.Series.n_unique": [[1253, null]], "polars.Series.name": [[1254, null]], "polars.Series.nan_max": [[1255, null]], "polars.Series.nan_min": [[1256, null]], "polars.Series.ne": [[1257, null]], "polars.Series.ne_missing": [[1258, null]], "polars.Series.new_from_index": [[1259, null]], "polars.Series.not_": [[1260, null]], "polars.Series.null_count": [[1261, null]], "polars.Series.pct_change": [[1262, null]], "polars.Series.peak_max": [[1263, null]], "polars.Series.peak_min": [[1264, null]], "polars.Series.pow": [[1265, null]], "polars.Series.product": [[1266, null]], "polars.Series.qcut": [[1267, null]], "polars.Series.quantile": [[1268, null]], "polars.Series.rank": [[1269, null]], "polars.Series.rechunk": [[1270, null]], "polars.Series.reinterpret": [[1271, null]], "polars.Series.rename": [[1272, null]], "polars.Series.repeat_by": [[1273, null]], "polars.Series.replace": [[1274, null]], "polars.Series.replace_strict": [[1275, null]], "polars.Series.reshape": [[1276, null]], "polars.Series.reverse": [[1277, null]], "polars.Series.rle": [[1278, null]], "polars.Series.rle_id": [[1279, null]], "polars.Series.rolling_kurtosis": [[1280, null]], "polars.Series.rolling_map": [[1281, null]], "polars.Series.rolling_max": [[1282, null]], "polars.Series.rolling_max_by": [[1283, null]], "polars.Series.rolling_mean": [[1284, null]], "polars.Series.rolling_mean_by": [[1285, null]], "polars.Series.rolling_median": [[1286, null]], "polars.Series.rolling_median_by": [[1287, null]], "polars.Series.rolling_min": [[1288, null]], "polars.Series.rolling_min_by": [[1289, null]], "polars.Series.rolling_quantile": [[1290, null]], "polars.Series.rolling_quantile_by": [[1291, null]], "polars.Series.rolling_skew": [[1292, null]], "polars.Series.rolling_std": [[1293, null]], "polars.Series.rolling_std_by": [[1294, null]], "polars.Series.rolling_sum": [[1295, null]], "polars.Series.rolling_sum_by": [[1296, null]], "polars.Series.rolling_var": [[1297, null]], "polars.Series.rolling_var_by": [[1298, null]], "polars.Series.round": [[1299, null]], "polars.Series.round_sig_figs": [[1300, null]], "polars.Series.sample": [[1301, null]], "polars.Series.scatter": [[1302, null]], "polars.Series.search_sorted": [[1303, null]], "polars.Series.set": [[1304, null]], "polars.Series.set_sorted": [[1305, null]], "polars.Series.shape": [[1306, null]], "polars.Series.shift": [[1307, null]], "polars.Series.shrink_dtype": [[1308, null]], "polars.Series.shrink_to_fit": [[1309, null]], "polars.Series.shuffle": [[1310, null]], "polars.Series.sign": [[1311, null]], "polars.Series.sin": [[1312, null]], "polars.Series.sinh": [[1313, null]], "polars.Series.skew": [[1314, null]], "polars.Series.slice": [[1315, null]], "polars.Series.sort": [[1316, null]], "polars.Series.sqrt": [[1317, null]], "polars.Series.std": [[1318, null]], "polars.Series.str.concat": [[1319, null]], "polars.Series.str.contains": [[1320, null]], "polars.Series.str.contains_any": [[1321, null]], "polars.Series.str.count_matches": [[1322, null]], "polars.Series.str.decode": [[1323, null]], "polars.Series.str.encode": [[1324, null]], "polars.Series.str.ends_with": [[1325, null]], "polars.Series.str.escape_regex": [[1326, null]], "polars.Series.str.explode": [[1327, null]], "polars.Series.str.extract": [[1328, null]], "polars.Series.str.extract_all": [[1329, null]], "polars.Series.str.extract_groups": [[1330, null]], "polars.Series.str.extract_many": [[1331, null]], "polars.Series.str.find": [[1332, null]], "polars.Series.str.find_many": [[1333, null]], "polars.Series.str.head": [[1334, null]], "polars.Series.str.join": [[1335, null]], "polars.Series.str.json_decode": [[1336, null]], "polars.Series.str.json_path_match": [[1337, null]], "polars.Series.str.len_bytes": [[1338, null]], "polars.Series.str.len_chars": [[1339, null]], "polars.Series.str.normalize": [[1340, null]], "polars.Series.str.pad_end": [[1341, null]], "polars.Series.str.pad_start": [[1342, null]], "polars.Series.str.replace": [[1343, null]], "polars.Series.str.replace_all": [[1344, null]], "polars.Series.str.replace_many": [[1345, null]], "polars.Series.str.reverse": [[1346, null]], "polars.Series.str.slice": [[1347, null]], "polars.Series.str.split": [[1348, null]], "polars.Series.str.split_exact": [[1349, null]], "polars.Series.str.splitn": [[1350, null]], "polars.Series.str.starts_with": [[1351, null]], "polars.Series.str.strip_chars": [[1352, null]], "polars.Series.str.strip_chars_end": [[1353, null]], "polars.Series.str.strip_chars_start": [[1354, null]], "polars.Series.str.strip_prefix": [[1355, null]], "polars.Series.str.strip_suffix": [[1356, null]], "polars.Series.str.strptime": [[1357, null]], "polars.Series.str.tail": [[1358, null]], "polars.Series.str.to_date": [[1359, null]], "polars.Series.str.to_datetime": [[1360, null]], "polars.Series.str.to_decimal": [[1361, null]], "polars.Series.str.to_integer": [[1362, null]], "polars.Series.str.to_lowercase": [[1363, null]], "polars.Series.str.to_time": [[1364, null]], "polars.Series.str.to_titlecase": [[1365, null]], "polars.Series.str.to_uppercase": [[1366, null]], "polars.Series.str.zfill": [[1367, null]], "polars.Series.struct.field": [[1368, null]], "polars.Series.struct.fields": [[1369, null]], "polars.Series.struct.json_encode": [[1370, null]], "polars.Series.struct.rename_fields": [[1371, null]], "polars.Series.struct.schema": [[1372, null]], "polars.Series.struct.unnest": [[1373, null]], "polars.Series.sum": [[1374, null]], "polars.Series.tail": [[1375, null]], "polars.Series.tan": [[1376, null]], "polars.Series.tanh": [[1377, null]], "polars.Series.to_arrow": [[1378, null]], "polars.Series.to_dummies": [[1379, null]], "polars.Series.to_frame": [[1380, null]], "polars.Series.to_init_repr": [[1381, null]], "polars.Series.to_jax": [[1382, null]], "polars.Series.to_list": [[1383, null]], "polars.Series.to_numpy": [[1384, null]], "polars.Series.to_pandas": [[1385, null]], "polars.Series.to_physical": [[1386, null]], "polars.Series.to_torch": [[1387, null]], "polars.Series.top_k": [[1388, null]], "polars.Series.top_k_by": [[1389, null]], "polars.Series.unique": [[1390, null]], "polars.Series.unique_counts": [[1391, null]], "polars.Series.upper_bound": [[1392, null]], "polars.Series.value_counts": [[1393, null]], "polars.Series.var": [[1394, null]], "polars.Series.zip_with": [[1395, null]], "polars.StringCache": [[57, null]], "polars.align_frames": [[58, null]], "polars.all": [[783, null]], "polars.all_horizontal": [[784, null]], "polars.any": [[785, null]], "polars.any_horizontal": [[786, null]], "polars.api.register_dataframe_namespace": [[59, null]], "polars.api.register_expr_namespace": [[60, null]], "polars.api.register_lazyframe_namespace": [[61, null]], "polars.api.register_series_namespace": [[62, null]], "polars.approx_n_unique": [[787, null]], "polars.arange": [[788, null]], "polars.arctan2": [[789, null]], "polars.arctan2d": [[790, null]], "polars.arg_sort_by": [[791, null]], "polars.arg_where": [[792, null]], "polars.build_info": [[63, null]], "polars.business_day_count": [[793, null]], "polars.catalog.unity.CatalogInfo": [[198, null]], "polars.catalog.unity.ColumnInfo": [[199, null]], "polars.catalog.unity.DataSourceFormat": [[200, null]], "polars.catalog.unity.NamespaceInfo": [[201, null]], "polars.catalog.unity.TableInfo": [[202, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[203, null]], "polars.catalog.unity.TableType": [[204, null]], "polars.coalesce": [[794, null]], "polars.col": [[865, null]], "polars.collect_all": [[64, null]], "polars.collect_all_async": [[65, null]], "polars.concat": [[66, null]], "polars.concat_arr": [[795, null]], "polars.concat_list": [[796, null]], "polars.concat_str": [[797, null]], "polars.corr": [[798, null]], "polars.count": [[799, null]], "polars.cov": [[800, null]], "polars.cum_count": [[801, null]], "polars.cum_fold": [[802, null]], "polars.cum_reduce": [[803, null]], "polars.cum_sum": [[804, null]], "polars.cum_sum_horizontal": [[805, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[335, null]], "polars.dataframe.group_by.GroupBy.agg": [[336, null]], "polars.dataframe.group_by.GroupBy.all": [[337, null]], "polars.dataframe.group_by.GroupBy.count": [[338, null]], "polars.dataframe.group_by.GroupBy.first": [[339, null]], "polars.dataframe.group_by.GroupBy.head": [[340, null]], "polars.dataframe.group_by.GroupBy.last": [[341, null]], "polars.dataframe.group_by.GroupBy.len": [[342, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[343, null]], "polars.dataframe.group_by.GroupBy.max": [[344, null]], "polars.dataframe.group_by.GroupBy.mean": [[345, null]], "polars.dataframe.group_by.GroupBy.median": [[346, null]], "polars.dataframe.group_by.GroupBy.min": [[347, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[348, null]], "polars.dataframe.group_by.GroupBy.quantile": [[349, null]], "polars.dataframe.group_by.GroupBy.sum": [[350, null]], "polars.dataframe.group_by.GroupBy.tail": [[351, null]], "polars.datatypes.Array": [[67, null]], "polars.datatypes.Binary": [[68, null]], "polars.datatypes.Boolean": [[69, null]], "polars.datatypes.Categorical": [[70, null]], "polars.datatypes.DataType": [[71, null]], "polars.datatypes.Date": [[72, null]], "polars.datatypes.Datetime": [[73, null]], "polars.datatypes.Decimal": [[74, null]], "polars.datatypes.Duration": [[75, null]], "polars.datatypes.Enum": [[76, null]], "polars.datatypes.Field": [[77, null]], "polars.datatypes.Float32": [[78, null]], "polars.datatypes.Float64": [[79, null]], "polars.datatypes.Int128": [[80, null]], "polars.datatypes.Int16": [[81, null]], "polars.datatypes.Int32": [[82, null]], "polars.datatypes.Int64": [[83, null]], "polars.datatypes.Int8": [[84, null]], "polars.datatypes.List": [[85, null]], "polars.datatypes.Null": [[86, null]], "polars.datatypes.Object": [[87, null]], "polars.datatypes.String": [[88, null]], "polars.datatypes.Struct": [[89, null]], "polars.datatypes.Time": [[90, null]], "polars.datatypes.UInt16": [[91, null]], "polars.datatypes.UInt32": [[92, null]], "polars.datatypes.UInt64": [[93, null]], "polars.datatypes.UInt8": [[94, null]], "polars.datatypes.Unknown": [[95, null]], "polars.datatypes.Utf8": [[96, null]], "polars.date": [[806, null]], "polars.date_range": [[807, null]], "polars.date_ranges": [[808, null]], "polars.datetime": [[809, null]], "polars.datetime_range": [[810, null]], "polars.datetime_ranges": [[811, null]], "polars.defer": [[97, null]], "polars.disable_string_cache": [[98, null]], "polars.dtype_of": [[369, null]], "polars.duration": [[812, null]], "polars.element": [[813, null]], "polars.enable_string_cache": [[99, null]], "polars.escape_regex": [[100, null]], "polars.exceptions.CategoricalRemappingWarning": [[101, null]], "polars.exceptions.ChronoFormatWarning": [[102, null]], "polars.exceptions.ColumnNotFoundError": [[103, null]], "polars.exceptions.ComputeError": [[104, null]], "polars.exceptions.CustomUFuncWarning": [[105, null]], "polars.exceptions.DataOrientationWarning": [[106, null]], "polars.exceptions.DuplicateError": [[107, null]], "polars.exceptions.InvalidOperationError": [[108, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[109, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[110, null]], "polars.exceptions.NoDataError": [[111, null]], "polars.exceptions.NoRowsReturnedError": [[112, null]], "polars.exceptions.OutOfBoundsError": [[113, null]], "polars.exceptions.PanicException": [[114, null]], "polars.exceptions.ParameterCollisionError": [[115, null]], "polars.exceptions.PerformanceWarning": [[116, null]], "polars.exceptions.PolarsError": [[117, null]], "polars.exceptions.PolarsInefficientMapWarning": [[118, null]], "polars.exceptions.PolarsWarning": [[119, null]], "polars.exceptions.RowsError": [[120, null]], "polars.exceptions.SQLInterfaceError": [[121, null]], "polars.exceptions.SQLSyntaxError": [[122, null]], "polars.exceptions.SchemaError": [[123, null]], "polars.exceptions.SchemaFieldNotFoundError": [[124, null]], "polars.exceptions.ShapeError": [[125, null]], "polars.exceptions.StringCacheMismatchError": [[126, null]], "polars.exceptions.StructFieldNotFoundError": [[127, null]], "polars.exceptions.TooManyRowsReturnedError": [[128, null]], "polars.exceptions.UnstableWarning": [[129, null]], "polars.exceptions.UnsuitableSQLError": [[130, null]], "polars.exclude": [[814, null]], "polars.explain_all": [[131, null]], "polars.first": [[815, null]], "polars.fold": [[816, null]], "polars.format": [[817, null]], "polars.from_arrow": [[132, null]], "polars.from_dataframe": [[133, null]], "polars.from_dict": [[134, null]], "polars.from_dicts": [[135, null]], "polars.from_epoch": [[818, null]], "polars.from_numpy": [[136, null]], "polars.from_pandas": [[137, null]], "polars.from_records": [[138, null]], "polars.from_repr": [[139, null]], "polars.get_index_type": [[140, null]], "polars.groups": [[819, null]], "polars.head": [[820, null]], "polars.implode": [[821, null]], "polars.int_range": [[822, null]], "polars.int_ranges": [[823, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[141, null]], "polars.io.parquet.ParquetFieldOverwrites": [[142, null]], "polars.io.partition.BasePartitionContext": [[143, null]], "polars.io.partition.KeyedPartition": [[144, null]], "polars.io.partition.KeyedPartitionContext": [[145, null]], "polars.io.plugins.register_io_source": [[146, null]], "polars.json_normalize": [[147, null]], "polars.last": [[824, null]], "polars.lazyframe.engine_config.GPUEngine": [[966, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[967, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[968, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[969, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[970, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[971, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[972, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[973, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[974, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[975, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[976, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[977, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[978, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[979, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[980, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[981, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[982, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[983, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[984, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[985, null]], "polars.len": [[825, null]], "polars.linear_space": [[826, null]], "polars.linear_spaces": [[827, null]], "polars.lit": [[828, null]], "polars.map_batches": [[829, null]], "polars.map_groups": [[830, null]], "polars.max": [[831, null]], "polars.max_horizontal": [[832, null]], "polars.mean": [[833, null]], "polars.mean_horizontal": [[834, null]], "polars.median": [[835, null]], "polars.min": [[836, null]], "polars.min_horizontal": [[837, null]], "polars.n_unique": [[838, null]], "polars.nth": [[839, null]], "polars.ones": [[840, null]], "polars.plugins.register_plugin_function": [[148, null]], "polars.quantile": [[841, null]], "polars.read_avro": [[149, null]], "polars.read_clipboard": [[150, null]], "polars.read_csv": [[151, null]], "polars.read_csv_batched": [[152, null]], "polars.read_database": [[153, null]], "polars.read_database_uri": [[154, null]], "polars.read_delta": [[155, null]], "polars.read_excel": [[156, null]], "polars.read_ipc": [[157, null]], "polars.read_ipc_schema": [[158, null]], "polars.read_ipc_stream": [[159, null]], "polars.read_json": [[160, null]], "polars.read_ndjson": [[161, null]], "polars.read_ods": [[162, null]], "polars.read_parquet": [[163, null]], "polars.read_parquet_metadata": [[164, null]], "polars.read_parquet_schema": [[165, null]], "polars.reduce": [[842, null]], "polars.repeat": [[843, null]], "polars.rolling_corr": [[844, null]], "polars.rolling_cov": [[845, null]], "polars.row_index": [[846, null]], "polars.scan_csv": [[166, null]], "polars.scan_delta": [[167, null]], "polars.scan_iceberg": [[168, null]], "polars.scan_ipc": [[169, null]], "polars.scan_ndjson": [[170, null]], "polars.scan_parquet": [[171, null]], "polars.scan_pyarrow_dataset": [[172, null]], "polars.select": [[847, null]], "polars.self_dtype": [[370, null]], "polars.set_random_seed": [[173, null]], "polars.show_versions": [[174, null]], "polars.sql": [[848, null]], "polars.sql_expr": [[849, null]], "polars.std": [[850, null]], "polars.struct": [[851, null]], "polars.sum": [[852, null]], "polars.sum_horizontal": [[853, null]], "polars.tail": [[854, null]], "polars.testing.assert_frame_equal": [[175, null]], "polars.testing.assert_frame_not_equal": [[176, null]], "polars.testing.assert_series_equal": [[177, null]], "polars.testing.assert_series_not_equal": [[178, null]], "polars.testing.parametric.column": [[179, null]], "polars.testing.parametric.columns": [[180, null]], "polars.testing.parametric.create_list_strategy": [[181, null]], "polars.testing.parametric.dataframes": [[182, null]], "polars.testing.parametric.dtypes": [[183, null]], "polars.testing.parametric.lists": [[184, null]], "polars.testing.parametric.load_profile": [[185, null]], "polars.testing.parametric.series": [[186, null]], "polars.testing.parametric.set_profile": [[187, null]], "polars.thread_pool_size": [[188, null]], "polars.threadpool_size": [[189, null]], "polars.time": [[855, null]], "polars.time_range": [[856, null]], "polars.time_ranges": [[857, null]], "polars.union": [[190, null]], "polars.using_string_cache": [[191, null]], "polars.var": [[858, null]], "polars.when": [[859, null]], "polars.zeros": [[860, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_default_credential_provider", "reference/api/polars.Config.set_engine_affinity", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_iceberg", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.PartitionByKey", "reference/api/polars.PartitionMaxSize", "reference/api/polars.PartitionParted", "reference/api/polars.ScanCastOptions", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.defer", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.explain_all", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.parquet.ParquetFieldOverwrites", "reference/api/polars.io.partition.BasePartitionContext", "reference/api/polars.io.partition.KeyedPartition", "reference/api/polars.io.partition.KeyedPartitionContext", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_metadata", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.union", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.__setitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_columns", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.match_to_schema", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.remove", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatype_expr/api/polars.DataType.to_dtype_expr", "reference/datatype_expr/api/polars.DataTypeExpr.arr.inner_dtype", "reference/datatype_expr/api/polars.DataTypeExpr.arr.shape", "reference/datatype_expr/api/polars.DataTypeExpr.arr.width", "reference/datatype_expr/api/polars.DataTypeExpr.list.inner_dtype", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_dtype", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_names", "reference/datatype_expr/api/polars.dtype_of", "reference/datatype_expr/api/polars.self_dtype", "reference/datatype_expr/dt_array", "reference/datatype_expr/dt_functions", "reference/datatype_expr/dt_list", "reference/datatype_expr/dt_struct", "reference/datatype_expr/index", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.len", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.mean", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_business_day", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_close", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.filter", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_kurtosis", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.linear_spaces", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.row_index", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.__getitem__", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_batches", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.match_to_schema", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.pipe_with_schema", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.remote", "reference/lazyframe/api/polars.LazyFrame.remove", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.sink_batches", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.QueryOptFlags", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.len", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.backward_fill", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.bottom_k_by", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_business_day", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.forward_fill", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_close", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.filter", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.repeat_by", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_kurtosis", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_max_by", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_mean_by", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_median_by", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_min_by", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_quantile_by", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_std_by", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_sum_by", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.rolling_var_by", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.top_k_by", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_default_credential_provider.rst", "reference/api/polars.Config.set_engine_affinity.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_iceberg.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.PartitionByKey.rst", "reference/api/polars.PartitionMaxSize.rst", "reference/api/polars.PartitionParted.rst", "reference/api/polars.ScanCastOptions.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.defer.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.explain_all.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.parquet.ParquetFieldOverwrites.rst", "reference/api/polars.io.partition.BasePartitionContext.rst", "reference/api/polars.io.partition.KeyedPartition.rst", "reference/api/polars.io.partition.KeyedPartitionContext.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_metadata.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.union.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.__setitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_columns.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.match_to_schema.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.remove.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatype_expr/api/polars.DataType.to_dtype_expr.rst", "reference/datatype_expr/api/polars.DataTypeExpr.arr.inner_dtype.rst", "reference/datatype_expr/api/polars.DataTypeExpr.arr.shape.rst", "reference/datatype_expr/api/polars.DataTypeExpr.arr.width.rst", "reference/datatype_expr/api/polars.DataTypeExpr.list.inner_dtype.rst", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_dtype.rst", "reference/datatype_expr/api/polars.DataTypeExpr.struct.field_names.rst", "reference/datatype_expr/api/polars.dtype_of.rst", "reference/datatype_expr/api/polars.self_dtype.rst", "reference/datatype_expr/dt_array.rst", "reference/datatype_expr/dt_functions.rst", "reference/datatype_expr/dt_list.rst", "reference/datatype_expr/dt_struct.rst", "reference/datatype_expr/index.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.len.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.mean.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_business_day.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_close.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.filter.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_kurtosis.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.linear_spaces.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.row_index.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.__getitem__.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_batches.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.match_to_schema.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.pipe_with_schema.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.remote.rst", "reference/lazyframe/api/polars.LazyFrame.remove.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.sink_batches.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.QueryOptFlags.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.len.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.backward_fill.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.bottom_k_by.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_business_day.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.forward_fill.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_close.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.filter.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.repeat_by.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_kurtosis.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_max_by.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_mean_by.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_median_by.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_min_by.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_quantile_by.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_std_by.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_sum_by.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.rolling_var_by.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.top_k_by.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[209, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[999, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[210, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[1000, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[211, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1432, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1432, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[212, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.lazyframe method)": [[884, "polars.LazyFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[1001, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[192, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[198, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[199, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[201, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[202, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[33, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[34, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[35, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[36, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[67, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[68, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[69, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[70, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[71, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[72, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[73, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[74, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[75, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[76, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[77, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[78, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[79, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[80, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[81, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[82, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[83, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[84, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[85, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[86, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[87, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[88, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[89, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[90, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[91, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[92, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[93, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[94, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[95, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.io.parquet.parquetfieldoverwrites method)": [[142, "polars.io.parquet.ParquetFieldOverwrites.__init__", false]], "__init__() (polars.io.partition.basepartitioncontext method)": [[143, "polars.io.partition.BasePartitionContext.__init__", false]], "__init__() (polars.io.partition.keyedpartition method)": [[144, "polars.io.partition.KeyedPartition.__init__", false]], "__init__() (polars.io.partition.keyedpartitioncontext method)": [[145, "polars.io.partition.KeyedPartitionContext.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[966, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.partitionbykey method)": [[53, "polars.PartitionByKey.__init__", false]], "__init__() (polars.partitionmaxsize method)": [[54, "polars.PartitionMaxSize.__init__", false]], "__init__() (polars.partitionparted method)": [[55, "polars.PartitionParted.__init__", false]], "__init__() (polars.queryoptflags method)": [[965, "polars.QueryOptFlags.__init__", false]], "__init__() (polars.scancastoptions method)": [[56, "polars.ScanCastOptions.__init__", false]], "__init__() (polars.sqlcontext method)": [[1432, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[57, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[179, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[335, "polars.dataframe.group_by.GroupBy.__iter__", false]], "__setitem__() (polars.dataframe method)": [[213, "polars.DataFrame.__setitem__", false]], "abs() (polars.expr method)": [[379, "polars.Expr.abs", false]], "abs() (polars.series method)": [[1002, "polars.Series.abs", false]], "add() (polars.expr method)": [[380, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[470, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1094, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[336, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[967, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[381, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[382, "polars.Expr.alias", false]], "alias() (polars.series method)": [[1003, "polars.Series.alias", false]], "align_frames() (in module polars)": [[58, "polars.align_frames", false]], "all() (in module polars)": [[783, "polars.all", false]], "all() (in module polars.selectors)": [[997, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[337, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[383, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[399, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[568, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[968, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[1004, "polars.Series.all", false]], "all() (polars.series.arr method)": [[1019, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1200, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[784, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[997, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[997, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[384, "polars.Expr.and_", false]], "any() (in module polars)": [[785, "polars.any", false]], "any() (polars.expr method)": [[385, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[400, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[569, "polars.Expr.list.any", false]], "any() (polars.series method)": [[1005, "polars.Series.any", false]], "any() (polars.series.arr method)": [[1020, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1201, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[786, "polars.any_horizontal", false]], "append() (polars.expr method)": [[386, "polars.Expr.append", false]], "append() (polars.series method)": [[1006, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[787, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[214, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[387, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[885, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[1007, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[788, "polars.arange", false]], "arccos() (polars.expr method)": [[388, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[1008, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[389, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[1009, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[390, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[1010, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[391, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[1011, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[392, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[1012, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[789, "polars.arctan2", false]], "arctan2d() (in module polars)": [[790, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[393, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[1013, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[394, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[401, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[570, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[1014, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[1021, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1202, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[395, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[402, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[571, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[1015, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[1022, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1203, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[396, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[1016, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[791, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[397, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[1017, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[398, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[1018, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[792, "polars.arg_where", false]], "array (class in polars.datatypes)": [[67, "polars.datatypes.Array", false]], "array() (in module polars.selectors)": [[997, "polars.selectors.array", false]], "as_expr() (polars.selectors.selector method)": [[997, "polars.selectors.Selector.as_expr", false]], "assert_frame_equal() (in module polars.testing)": [[175, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[176, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[177, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[178, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[425, "polars.Expr.backward_fill", false]], "backward_fill() (polars.series method)": [[1044, "polars.Series.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[471, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1095, "polars.Series.dt.base_utc_offset", false]], "basepartitioncontext (class in polars.io.partition)": [[143, "polars.io.partition.BasePartitionContext", false]], "binary (class in polars.datatypes)": [[68, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[997, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[433, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1052, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[434, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1053, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[435, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1054, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[436, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1055, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[437, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1056, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[438, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1057, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[439, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1058, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[440, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1059, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[441, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1060, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[69, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[997, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[215, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[442, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[886, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1061, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[443, "polars.Expr.bottom_k_by", false]], "bottom_k_by() (polars.series method)": [[1062, "polars.Series.bottom_k_by", false]], "build_info() (in module polars)": [[63, "polars.build_info", false]], "business_day_count() (in module polars)": [[793, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[997, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[997, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[997, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[887, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[983, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[216, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[444, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[888, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1063, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[472, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1096, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[192, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[198, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[70, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[997, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[101, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[450, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1072, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[451, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1073, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[473, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1097, "polars.Series.dt.century", false]], "chronoformatwarning": [[102, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1074, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[217, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[889, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1075, "polars.Series.clear", false]], "clip() (polars.expr method)": [[452, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1076, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[218, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[890, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1077, "polars.Series.clone", false]], "coalesce() (in module polars)": [[794, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[891, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[64, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[65, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[892, "polars.LazyFrame.collect_async", false]], "collect_batches() (polars.lazyframe method)": [[893, "polars.LazyFrame.collect_batches", false]], "collect_schema() (polars.dataframe method)": [[219, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[894, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[179, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[199, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[103, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[220, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[895, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[180, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[474, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1098, "polars.Series.dt.combine", false]], "computeerror": [[104, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[66, "polars.concat", false]], "concat() (polars.expr.list method)": [[572, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[713, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1204, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1319, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[795, "polars.concat_arr", false]], "concat_list() (in module polars)": [[796, "polars.concat_list", false]], "concat_str() (in module polars)": [[797, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[997, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[403, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[426, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[573, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[714, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[1023, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[1045, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1205, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1320, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[715, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1321, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[475, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1099, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[798, "polars.corr", false]], "corr() (polars.dataframe method)": [[221, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[453, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1078, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[454, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1079, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[455, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1080, "polars.Series.cot", false]], "count() (in module polars)": [[799, "polars.count", false]], "count() (polars.dataframe method)": [[222, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[338, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[456, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[896, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[969, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1081, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[404, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[574, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[716, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[1024, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1206, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1322, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[800, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[181, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[33, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[34, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[35, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[36, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[801, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[457, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1082, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[802, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[458, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1083, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[459, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1084, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[460, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1085, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[803, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[804, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[461, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1086, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[805, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[462, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1087, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[105, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[463, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1088, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[182, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[106, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[200, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[71, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[72, "polars.datatypes.Date", false]], "date() (in module polars)": [[806, "polars.date", false]], "date() (in module polars.selectors)": [[997, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[476, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1100, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[807, "polars.date_range", false]], "date_ranges() (in module polars)": [[808, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[73, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[809, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[997, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[477, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1101, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[810, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[811, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[478, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1102, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[74, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[997, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[427, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[717, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[1046, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1323, "polars.Series.str.decode", false]], "defer() (in module polars)": [[97, "polars.defer", false]], "degrees() (polars.expr method)": [[464, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[223, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[897, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1089, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[224, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[465, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[898, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[466, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[575, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1090, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1207, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[997, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[98, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[467, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1091, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[225, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[899, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[226, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[227, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[468, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[900, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1092, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[228, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[469, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[576, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[901, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1093, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1208, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[479, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1103, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1144, "polars.Series.dtype", false]], "dtype_of() (in module polars)": [[369, "polars.dtype_of", false]], "dtypes (polars.dataframe property)": [[229, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[902, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[183, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[107, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[75, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[812, "polars.duration", false]], "duration() (in module polars.selectors)": [[997, "polars.selectors.duration", false]], "element() (in module polars)": [[813, "polars.element", false]], "enable_string_cache() (in module polars)": [[99, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[428, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[718, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[1047, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1324, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[997, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[429, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[445, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[719, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[1048, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1064, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1325, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[516, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1145, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[76, "polars.datatypes.Enum", false]], "enum() (in module polars.selectors)": [[997, "polars.selectors.enum", false]], "epoch() (polars.expr.dt method)": [[480, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1104, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[517, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[619, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1146, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[518, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1147, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[230, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1148, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[100, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[720, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1326, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[231, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1149, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[577, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1209, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[519, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1150, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[520, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1151, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[521, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1152, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[522, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1153, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[814, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[997, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[523, "polars.Expr.exclude", false]], "exclude() (polars.selectors.selector method)": [[997, "polars.selectors.Selector.exclude", false]], "execute() (polars.sqlcontext method)": [[1413, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1414, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[524, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1154, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[997, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[903, "polars.LazyFrame.explain", false]], "explain_all() (in module polars)": [[131, "polars.explain_all", false]], "explode() (polars.dataframe method)": [[232, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[525, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[405, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[578, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[721, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[904, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1155, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[1025, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1210, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1327, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[233, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1156, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[526, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1157, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[722, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1328, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[723, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1329, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[724, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1330, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[725, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1331, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[984, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[985, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[77, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[762, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1368, "polars.Series.struct.field", false]], "field_dtype() (polars.datatypeexpr.struct method)": [[367, "polars.DataTypeExpr.struct.field_dtype", false]], "field_names() (polars.datatypeexpr.struct method)": [[368, "polars.DataTypeExpr.struct.field_names", false]], "fields (polars.series.struct attribute)": [[1369, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[234, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[527, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[905, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1158, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[235, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[528, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[906, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1159, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[236, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[529, "polars.Expr.filter", false]], "filter() (polars.expr.list method)": [[579, "polars.Expr.list.filter", false]], "filter() (polars.lazyframe method)": [[907, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1160, "polars.Series.filter", false]], "filter() (polars.series.list method)": [[1211, "polars.Series.list.filter", false]], "find() (polars.expr.str method)": [[726, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1332, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[727, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1333, "polars.Series.str.find_many", false]], "first() (in module polars)": [[815, "polars.first", false]], "first() (in module polars.selectors)": [[997, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[339, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[530, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[406, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[580, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[908, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[970, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1161, "polars.Series.first", false]], "first() (polars.series.arr method)": [[1026, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1212, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[237, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1162, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[531, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[997, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[78, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[79, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[532, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1163, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[533, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[816, "polars.fold", false]], "fold() (polars.dataframe method)": [[238, "polars.DataFrame.fold", false]], "format() (in module polars)": [[817, "polars.format", false]], "forward_fill() (polars.expr method)": [[534, "polars.Expr.forward_fill", false]], "forward_fill() (polars.series method)": [[1164, "polars.Series.forward_fill", false]], "from_arrow() (in module polars)": [[132, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[133, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[134, "polars.from_dict", false]], "from_dicts() (in module polars)": [[135, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[818, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[535, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[136, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[137, "polars.from_pandas", false]], "from_records() (in module polars)": [[138, "polars.from_records", false]], "from_repr() (in module polars)": [[139, "polars.from_repr", false]], "gather() (polars.expr method)": [[536, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[581, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1165, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1213, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[239, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[537, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[582, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[909, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1166, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1214, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[538, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1167, "polars.Series.ge", false]], "get() (polars.expr method)": [[539, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[407, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[583, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[1027, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1215, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[446, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1065, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1168, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[240, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[241, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[242, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[140, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[203, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[193, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[243, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[966, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[244, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[910, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[245, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[911, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[819, "polars.groups", false]], "gt() (polars.expr method)": [[540, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1169, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[620, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[541, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1170, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1171, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[542, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1172, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[246, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[820, "polars.head", false]], "head() (polars.dataframe method)": [[247, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[340, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[543, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[584, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[728, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[912, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[971, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1173, "polars.Series.head", false]], "head() (polars.series.list method)": [[1216, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1334, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[248, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[544, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1174, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[481, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1105, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[249, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[821, "polars.implode", false]], "implode() (polars.expr method)": [[545, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1175, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[546, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1176, "polars.Series.index_of", false]], "inner_dtype() (polars.datatypeexpr.arr method)": [[363, "polars.DataTypeExpr.arr.inner_dtype", false]], "inner_dtype() (polars.datatypeexpr.list method)": [[366, "polars.DataTypeExpr.list.inner_dtype", false]], "insert_column() (polars.dataframe method)": [[250, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[547, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[913, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[80, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[81, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[82, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[83, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[84, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[822, "polars.int_range", false]], "int_ranges() (in module polars)": [[823, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[997, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[251, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[548, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[914, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1177, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[549, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1178, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[108, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[550, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1179, "polars.Series.is_between", false]], "is_business_day() (polars.expr.dt method)": [[482, "polars.Expr.dt.is_business_day", false]], "is_business_day() (polars.series.dt method)": [[1106, "polars.Series.dt.is_business_day", false]], "is_close() (polars.expr method)": [[551, "polars.Expr.is_close", false]], "is_close() (polars.series method)": [[1180, "polars.Series.is_close", false]], "is_column() (polars.expr.meta method)": [[621, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[622, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[252, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[552, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1181, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[253, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1182, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[553, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1183, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[554, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1184, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[555, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1185, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[556, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1186, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[557, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1187, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[483, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1107, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[623, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1066, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[558, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1188, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[559, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1189, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[560, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1190, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[561, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1191, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[624, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[997, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1192, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[254, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[562, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1193, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[484, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1108, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[255, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1194, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[256, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[257, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[258, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[259, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[408, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[585, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[729, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[915, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[1028, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1217, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1335, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[260, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[916, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[261, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[917, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[730, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1336, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[763, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1370, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[147, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[731, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1337, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[639, "polars.Expr.name.keep", false]], "keyedpartition (class in polars.io.partition)": [[144, "polars.io.partition.KeyedPartition", false]], "keyedpartitioncontext (class in polars.io.partition)": [[145, "polars.io.partition.KeyedPartitionContext", false]], "kurtosis() (polars.expr method)": [[563, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1195, "polars.Series.kurtosis", false]], "last() (in module polars)": [[824, "polars.last", false]], "last() (in module polars.selectors)": [[997, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[341, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[564, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[409, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[586, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[918, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[972, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1196, "polars.Series.last", false]], "last() (polars.series.arr method)": [[1029, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1218, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[262, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[919, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[565, "polars.Expr.le", false]], "le() (polars.series method)": [[1197, "polars.Series.le", false]], "len() (in module polars)": [[825, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[342, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[566, "polars.Expr.len", false]], "len() (polars.expr.arr method)": [[410, "polars.Expr.arr.len", false]], "len() (polars.expr.list method)": [[587, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[973, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1198, "polars.Series.len", false]], "len() (polars.series.arr method)": [[1030, "polars.Series.arr.len", false]], "len() (polars.series.list method)": [[1219, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[447, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[732, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1067, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1338, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[448, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[733, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1068, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1339, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[263, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[567, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[920, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1199, "polars.Series.limit", false]], "linear_space() (in module polars)": [[826, "polars.linear_space", false]], "linear_spaces() (in module polars)": [[827, "polars.linear_spaces", false]], "list (class in polars.datatypes)": [[85, "polars.datatypes.List", false]], "list() (in module polars.selectors)": [[997, "polars.selectors.list", false]], "list_catalogs() (polars.catalog method)": [[194, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[195, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[196, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[184, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[828, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[185, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[609, "polars.Expr.log", false]], "log() (polars.series method)": [[1241, "polars.Series.log", false]], "log10() (polars.expr method)": [[610, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1242, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[611, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1243, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[612, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1244, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[613, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1245, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[640, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[829, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[614, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[921, "polars.LazyFrame.map_batches", false]], "map_columns() (polars.dataframe method)": [[264, "polars.DataFrame.map_columns", false]], "map_elements() (polars.expr method)": [[615, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1246, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[641, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[830, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[343, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[974, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[265, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[109, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "match_to_schema() (polars.dataframe method)": [[266, "polars.DataFrame.match_to_schema", false]], "match_to_schema() (polars.lazyframe method)": [[922, "polars.LazyFrame.match_to_schema", false]], "matches() (in module polars.selectors)": [[997, "polars.selectors.matches", false]], "max() (in module polars)": [[831, "polars.max", false]], "max() (polars.dataframe method)": [[267, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[344, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[616, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[411, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[588, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[923, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[975, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1247, "polars.Series.max", false]], "max() (polars.series.arr method)": [[1031, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1109, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1220, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[832, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[268, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[833, "polars.mean", false]], "mean() (polars.dataframe method)": [[269, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[345, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[617, "polars.Expr.mean", false]], "mean() (polars.expr.arr method)": [[412, "polars.Expr.arr.mean", false]], "mean() (polars.expr.list method)": [[589, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[924, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[976, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1248, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1110, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1221, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[834, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[270, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[835, "polars.median", false]], "median() (polars.dataframe method)": [[271, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[346, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[618, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[413, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[590, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[925, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[977, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1249, "polars.Series.median", false]], "median() (polars.series.arr method)": [[1032, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1111, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1222, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[272, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[926, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[273, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[927, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[485, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1112, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[486, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1113, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[487, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1114, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[836, "polars.min", false]], "min() (polars.dataframe method)": [[274, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[347, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[634, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[414, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[591, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[928, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[978, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1250, "polars.Series.min", false]], "min() (polars.series.arr method)": [[1033, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1115, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1223, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[837, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[275, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[488, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1116, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[635, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[636, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1251, "polars.Series.mode", false]], "module": [[997, "module-polars.selectors", false]], "moduleupgraderequirederror": [[110, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[489, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1117, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[490, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1118, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[491, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1119, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[637, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[276, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1252, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[838, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[277, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[348, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[638, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[415, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[592, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[979, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1253, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[1034, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1224, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1254, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[201, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[648, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1255, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[649, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1256, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[492, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1120, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[650, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[625, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1257, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[651, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1258, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[652, "polars.Expr.neg", false]], "nested() (in module polars.selectors)": [[997, "polars.selectors.nested", false]], "new_from_index() (polars.series method)": [[1259, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[141, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[111, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[734, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1340, "polars.Series.str.normalize", false]], "norowsreturnederror": [[112, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[653, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1260, "polars.Series.not_", false]], "nth() (in module polars)": [[839, "polars.nth", false]], "null (class in polars.datatypes)": [[86, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[278, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[654, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[929, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1261, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[997, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[87, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[493, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1121, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[840, "polars.ones", false]], "or_() (polars.expr method)": [[655, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[494, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1122, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[113, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[626, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[656, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[735, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1341, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[736, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1342, "polars.Series.str.pad_start", false]], "panicexception": [[114, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[115, "polars.exceptions.ParameterCollisionError", false]], "parquetfieldoverwrites (class in polars.io.parquet)": [[142, "polars.io.parquet.ParquetFieldOverwrites", false]], "partition_by() (polars.dataframe method)": [[279, "polars.DataFrame.partition_by", false]], "partitionbykey (class in polars)": [[53, "polars.PartitionByKey", false]], "partitionmaxsize (class in polars)": [[54, "polars.PartitionMaxSize", false]], "partitionparted (class in polars)": [[55, "polars.PartitionParted", false]], "pct_change() (polars.expr method)": [[657, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1262, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[658, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1263, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[659, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1264, "polars.Series.peak_min", false]], "performancewarning": [[116, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[280, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[660, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[930, "polars.LazyFrame.pipe", false]], "pipe_with_schema() (polars.lazyframe method)": [[931, "polars.LazyFrame.pipe_with_schema", false]], "pivot() (polars.dataframe method)": [[281, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[360, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1409, "polars.Series.plot", false]], "polars.selectors": [[997, "module-polars.selectors", false]], "polarserror": [[117, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[118, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[119, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[627, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[661, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1265, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[642, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[643, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[282, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[662, "polars.Expr.product", false]], "product() (polars.series method)": [[1266, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[932, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[663, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1267, "polars.Series.qcut", false]], "quantile() (in module polars)": [[841, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[283, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[349, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[664, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[933, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[980, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1268, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[495, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1123, "polars.Series.dt.quarter", false]], "queryoptflags (class in polars)": [[965, "polars.QueryOptFlags", false]], "radians() (polars.expr method)": [[665, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[666, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1269, "polars.Series.rank", false]], "read_avro() (in module polars)": [[149, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[150, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[151, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[152, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[153, "polars.read_database", false]], "read_database_uri() (in module polars)": [[154, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[155, "polars.read_delta", false]], "read_excel() (in module polars)": [[156, "polars.read_excel", false]], "read_ipc() (in module polars)": [[157, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[158, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[159, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[160, "polars.read_json", false]], "read_ndjson() (in module polars)": [[161, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[162, "polars.read_ods", false]], "read_parquet() (in module polars)": [[163, "polars.read_parquet", false]], "read_parquet_metadata() (in module polars)": [[164, "polars.read_parquet_metadata", false]], "read_parquet_schema() (in module polars)": [[165, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[284, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[667, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1270, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[842, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1415, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[59, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[60, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1416, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[146, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[61, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1417, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[148, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[62, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[668, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[430, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1271, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[1049, "polars.Series.bin.reinterpret", false]], "remote() (polars.lazyframe method)": [[934, "polars.LazyFrame.remote", false]], "remove() (polars.dataframe method)": [[285, "polars.DataFrame.remove", false]], "remove() (polars.lazyframe method)": [[935, "polars.LazyFrame.remove", false]], "rename() (polars.dataframe method)": [[286, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[936, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1272, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[764, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1371, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[843, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[669, "polars.Expr.repeat_by", false]], "repeat_by() (polars.series method)": [[1273, "polars.Series.repeat_by", false]], "replace() (polars.expr method)": [[670, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[496, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[737, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1274, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1124, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1343, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[738, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1344, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[287, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[739, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1345, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[671, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1275, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[497, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1125, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[672, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1276, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[288, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[673, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[416, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[593, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[740, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[937, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1277, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[1035, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1225, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1346, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[674, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1278, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[675, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1279, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[289, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[676, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[938, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[844, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[845, "polars.rolling_cov", false]], "rolling_kurtosis() (polars.expr method)": [[677, "polars.Expr.rolling_kurtosis", false]], "rolling_kurtosis() (polars.series method)": [[1280, "polars.Series.rolling_kurtosis", false]], "rolling_map() (polars.expr method)": [[678, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1281, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[679, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1282, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[680, "polars.Expr.rolling_max_by", false]], "rolling_max_by() (polars.series method)": [[1283, "polars.Series.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[681, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1284, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[682, "polars.Expr.rolling_mean_by", false]], "rolling_mean_by() (polars.series method)": [[1285, "polars.Series.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[683, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1286, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[684, "polars.Expr.rolling_median_by", false]], "rolling_median_by() (polars.series method)": [[1287, "polars.Series.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[685, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1288, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[686, "polars.Expr.rolling_min_by", false]], "rolling_min_by() (polars.series method)": [[1289, "polars.Series.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[687, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1290, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[688, "polars.Expr.rolling_quantile_by", false]], "rolling_quantile_by() (polars.series method)": [[1291, "polars.Series.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[689, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1292, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[690, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1293, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[691, "polars.Expr.rolling_std_by", false]], "rolling_std_by() (polars.series method)": [[1294, "polars.Series.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[692, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1295, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[693, "polars.Expr.rolling_sum_by", false]], "rolling_sum_by() (polars.series method)": [[1296, "polars.Series.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[694, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1297, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[695, "polars.Expr.rolling_var_by", false]], "rolling_var_by() (polars.series method)": [[1298, "polars.Series.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[628, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[696, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[498, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1299, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1126, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[697, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1300, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[290, "polars.DataFrame.row", false]], "row_index() (in module polars)": [[846, "polars.row_index", false]], "rows() (polars.dataframe method)": [[291, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[292, "polars.DataFrame.rows_by_key", false]], "rowserror": [[120, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[293, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[698, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[594, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1301, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1226, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[166, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[167, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[168, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[169, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[170, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[171, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[172, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[197, "polars.Catalog.scan_table", false]], "scancastoptions (class in polars)": [[56, "polars.ScanCastOptions", false]], "scatter() (polars.series method)": [[1302, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[294, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[939, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1372, "polars.Series.struct.schema", false]], "schemaerror": [[123, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[124, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[699, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1303, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[499, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1127, "polars.Series.dt.second", false]], "select() (in module polars)": [[847, "polars.select", false]], "select() (polars.dataframe method)": [[295, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[940, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[296, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[941, "polars.LazyFrame.select_seq", false]], "selector (class in polars.selectors)": [[997, "polars.selectors.Selector", false]], "self_dtype() (in module polars)": [[370, "polars.self_dtype", false]], "serialize() (polars.dataframe method)": [[297, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[629, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[942, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[186, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1304, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_default_credential_provider() (polars.config class method)": [[10, "polars.Config.set_default_credential_provider", false]], "set_difference() (polars.expr.list method)": [[595, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1227, "polars.Series.list.set_difference", false]], "set_engine_affinity() (polars.config class method)": [[11, "polars.Config.set_engine_affinity", false]], "set_float_precision() (polars.config class method)": [[12, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[13, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[14, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[15, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[596, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1228, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[187, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[173, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[298, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[700, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[943, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1305, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[16, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[597, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1229, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[17, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[18, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[19, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[20, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[21, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[22, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[25, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[26, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[27, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[28, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[29, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[30, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[598, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1230, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[31, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[299, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1306, "polars.Series.shape", false]], "shape() (polars.datatypeexpr.arr method)": [[364, "polars.DataTypeExpr.arr.shape", false]], "shapeerror": [[125, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[300, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[701, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[417, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[599, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[944, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1307, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[1036, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1231, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[630, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[945, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[174, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[702, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1308, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[301, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1309, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[703, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1310, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[704, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1311, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[997, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[705, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1312, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[706, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1313, "polars.Series.sinh", false]], "sink_batches() (polars.lazyframe method)": [[946, "polars.LazyFrame.sink_batches", false]], "sink_csv() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[50, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[51, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[52, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[431, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[1050, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[707, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1314, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[302, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[708, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[600, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[741, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[947, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1315, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1232, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1347, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[303, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[709, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[418, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[601, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[948, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1316, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[1037, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1233, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[710, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[742, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1348, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[743, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1349, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[744, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1350, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[848, "polars.sql", false]], "sql() (polars.dataframe method)": [[304, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[949, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[849, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1432, "polars.SQLContext", false]], "sqlinterfaceerror": [[121, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[122, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[711, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1317, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[997, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[432, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[449, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[745, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1051, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1069, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1351, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[32, "polars.Config.state", false]], "std() (in module polars)": [[850, "polars.std", false]], "std() (polars.dataframe method)": [[305, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[712, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[419, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[602, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[950, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1318, "polars.Series.std", false]], "std() (polars.series.arr method)": [[1038, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1234, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[500, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1128, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[88, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[997, "polars.selectors.string", false]], "stringcache (class in polars)": [[57, "polars.StringCache", false]], "stringcachemismatcherror": [[126, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[746, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1352, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[747, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1353, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[748, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1354, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[749, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1355, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[750, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1356, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[751, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1357, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[89, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[851, "polars.struct", false]], "struct() (in module polars.selectors)": [[997, "polars.selectors.struct", false]], "structfieldnotfounderror": [[127, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[361, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[767, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[644, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[645, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[852, "polars.sum", false]], "sum() (polars.dataframe method)": [[306, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[350, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[768, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[420, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[603, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[951, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[981, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1374, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[1039, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1235, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[853, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[307, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[202, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1418, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[204, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[854, "polars.tail", false]], "tail() (polars.dataframe method)": [[308, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[351, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[769, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[604, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[752, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[952, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[982, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1375, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1236, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1358, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[770, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1376, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[771, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1377, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[997, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[188, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[189, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[90, "polars.datatypes.Time", false]], "time() (in module polars)": [[855, "polars.time", false]], "time() (in module polars.selectors)": [[997, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[501, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1129, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[856, "polars.time_range", false]], "time_ranges() (in module polars)": [[857, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[502, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1130, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[605, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1237, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[309, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1378, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[753, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1359, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[754, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1360, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[755, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1361, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[310, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[311, "polars.DataFrame.to_dicts", false]], "to_dtype_expr() (polars.datatype method)": [[362, "polars.DataType.to_dtype_expr", false]], "to_dummies() (polars.dataframe method)": [[312, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1379, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1380, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[313, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1381, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[756, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1362, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[314, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1382, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[421, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1383, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[1040, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1070, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[646, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[757, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1363, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[315, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1384, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[316, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1385, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[772, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1386, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[317, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[503, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1131, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[318, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[422, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[606, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[1041, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1238, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[758, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1364, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[759, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1365, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[319, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1387, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[647, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[760, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1366, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[128, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[320, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[773, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[953, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1388, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[774, "polars.Expr.top_k_by", false]], "top_k_by() (polars.series method)": [[1389, "polars.Series.top_k_by", false]], "total_days() (polars.expr.dt method)": [[504, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1132, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[505, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1133, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[506, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1134, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[507, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1135, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[508, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1136, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[509, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1137, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[510, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1138, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[321, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[631, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[775, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[511, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1139, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[91, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[92, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[93, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[94, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[632, "polars.Expr.meta.undo_aliases", false]], "union() (in module polars)": [[190, "polars.union", false]], "unique() (polars.dataframe method)": [[322, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[776, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[423, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[607, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[954, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1390, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[1042, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1239, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[777, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1391, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[95, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[323, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[765, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[955, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1373, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[324, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[956, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1419, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[997, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[129, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[325, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[130, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[326, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[957, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[778, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1392, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[327, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1071, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[191, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[96, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[779, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1393, "polars.Series.value_counts", false]], "var() (in module polars)": [[858, "polars.var", false]], "var() (polars.dataframe method)": [[328, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[780, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[424, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[608, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[958, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1394, "polars.Series.var", false]], "var() (polars.series.arr method)": [[1043, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1240, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[329, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[512, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1140, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[513, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1141, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[859, "polars.when", false]], "where() (polars.expr method)": [[781, "polars.Expr.where", false]], "width (polars.dataframe property)": [[330, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[959, "polars.LazyFrame.width", false]], "width() (polars.datatypeexpr.arr method)": [[365, "polars.DataTypeExpr.arr.width", false]], "with_columns() (polars.dataframe method)": [[331, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[960, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[332, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[961, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[962, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[766, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[333, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[963, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[334, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[964, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[514, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1142, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[37, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[38, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[39, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[40, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[41, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[42, "polars.DataFrame.write_excel", false]], "write_iceberg() (polars.dataframe method)": [[43, "polars.DataFrame.write_iceberg", false]], "write_ipc() (polars.dataframe method)": [[44, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[45, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[46, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[633, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[47, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[48, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[782, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[515, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1143, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[860, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[761, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1367, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1395, "polars.Series.zip_with", false]]}, "objects": {"polars": [[192, 0, 1, "", "Catalog"], [33, 0, 1, "", "CredentialProvider"], [34, 0, 1, "", "CredentialProviderAWS"], [35, 0, 1, "", "CredentialProviderAzure"], [36, 0, 1, "", "CredentialProviderGCP"], [53, 0, 1, "", "PartitionByKey"], [54, 0, 1, "", "PartitionMaxSize"], [55, 0, 1, "", "PartitionParted"], [965, 0, 1, "", "QueryOptFlags"], [1432, 0, 1, "", "SQLContext"], [56, 0, 1, "", "ScanCastOptions"], [57, 0, 1, "", "StringCache"], [58, 4, 1, "", "align_frames"], [783, 4, 1, "", "all"], [784, 4, 1, "", "all_horizontal"], [785, 4, 1, "", "any"], [786, 4, 1, "", "any_horizontal"], [787, 4, 1, "", "approx_n_unique"], [788, 4, 1, "", "arange"], [789, 4, 1, "", "arctan2"], [790, 4, 1, "", "arctan2d"], [791, 4, 1, "", "arg_sort_by"], [792, 4, 1, "", "arg_where"], [63, 4, 1, "", "build_info"], [793, 4, 1, "", "business_day_count"], [794, 4, 1, "", "coalesce"], [64, 4, 1, "", "collect_all"], [65, 4, 1, "", "collect_all_async"], [66, 4, 1, "", "concat"], [795, 4, 1, "", "concat_arr"], [796, 4, 1, "", "concat_list"], [797, 4, 1, "", "concat_str"], [798, 4, 1, "", "corr"], [799, 4, 1, "", "count"], [800, 4, 1, "", "cov"], [801, 4, 1, "", "cum_count"], [802, 4, 1, "", "cum_fold"], [803, 4, 1, "", "cum_reduce"], [804, 4, 1, "", "cum_sum"], [805, 4, 1, "", "cum_sum_horizontal"], [806, 4, 1, "", "date"], [807, 4, 1, "", "date_range"], [808, 4, 1, "", "date_ranges"], [809, 4, 1, "", "datetime"], [810, 4, 1, "", "datetime_range"], [811, 4, 1, "", "datetime_ranges"], [97, 4, 1, "", "defer"], [98, 4, 1, "", "disable_string_cache"], [369, 4, 1, "", "dtype_of"], [812, 4, 1, "", "duration"], [813, 4, 1, "", "element"], [99, 4, 1, "", "enable_string_cache"], [100, 4, 1, "", "escape_regex"], [814, 4, 1, "", "exclude"], [131, 4, 1, "", "explain_all"], [815, 4, 1, "", "first"], [816, 4, 1, "", "fold"], [817, 4, 1, "", "format"], [132, 4, 1, "", "from_arrow"], [133, 4, 1, "", "from_dataframe"], [134, 4, 1, "", "from_dict"], [135, 4, 1, "", "from_dicts"], [818, 4, 1, "", "from_epoch"], [136, 4, 1, "", "from_numpy"], [137, 4, 1, "", "from_pandas"], [138, 4, 1, "", "from_records"], [139, 4, 1, "", "from_repr"], [140, 4, 1, "", "get_index_type"], [819, 4, 1, "", "groups"], [820, 4, 1, "", "head"], [821, 4, 1, "", "implode"], [822, 4, 1, "", "int_range"], [823, 4, 1, "", "int_ranges"], [147, 4, 1, "", "json_normalize"], [824, 4, 1, "", "last"], [825, 4, 1, "", "len"], [826, 4, 1, "", "linear_space"], [827, 4, 1, "", "linear_spaces"], [828, 4, 1, "", "lit"], [829, 4, 1, "", "map_batches"], [830, 4, 1, "", "map_groups"], [831, 4, 1, "", "max"], [832, 4, 1, "", "max_horizontal"], [833, 4, 1, "", "mean"], [834, 4, 1, "", "mean_horizontal"], [835, 4, 1, "", "median"], [836, 4, 1, "", "min"], [837, 4, 1, "", "min_horizontal"], [838, 4, 1, "", "n_unique"], [839, 4, 1, "", "nth"], [840, 4, 1, "", "ones"], [841, 4, 1, "", "quantile"], [149, 4, 1, "", "read_avro"], [150, 4, 1, "", "read_clipboard"], [151, 4, 1, "", "read_csv"], [152, 4, 1, "", "read_csv_batched"], [153, 4, 1, "", "read_database"], [154, 4, 1, "", "read_database_uri"], [155, 4, 1, "", "read_delta"], [156, 4, 1, "", "read_excel"], [157, 4, 1, "", "read_ipc"], [158, 4, 1, "", "read_ipc_schema"], [159, 4, 1, "", "read_ipc_stream"], [160, 4, 1, "", "read_json"], [161, 4, 1, "", "read_ndjson"], [162, 4, 1, "", "read_ods"], [163, 4, 1, "", "read_parquet"], [164, 4, 1, "", "read_parquet_metadata"], [165, 4, 1, "", "read_parquet_schema"], [842, 4, 1, "", "reduce"], [843, 4, 1, "", "repeat"], [844, 4, 1, "", "rolling_corr"], [845, 4, 1, "", "rolling_cov"], [846, 4, 1, "", "row_index"], [166, 4, 1, "", "scan_csv"], [167, 4, 1, "", "scan_delta"], [168, 4, 1, "", "scan_iceberg"], [169, 4, 1, "", "scan_ipc"], [170, 4, 1, "", "scan_ndjson"], [171, 4, 1, "", "scan_parquet"], [172, 4, 1, "", "scan_pyarrow_dataset"], [847, 4, 1, "", "select"], [997, 7, 0, "-", "selectors"], [370, 4, 1, "", "self_dtype"], [173, 4, 1, "", "set_random_seed"], [174, 4, 1, "", "show_versions"], [848, 4, 1, "", "sql"], [849, 4, 1, "", "sql_expr"], [850, 4, 1, "", "std"], [851, 4, 1, "", "struct"], [852, 4, 1, "", "sum"], [853, 4, 1, "", "sum_horizontal"], [854, 4, 1, "", "tail"], [188, 4, 1, "", "thread_pool_size"], [189, 4, 1, "", "threadpool_size"], [855, 4, 1, "", "time"], [856, 4, 1, "", "time_range"], [857, 4, 1, "", "time_ranges"], [190, 4, 1, "", "union"], [191, 4, 1, "", "using_string_cache"], [858, 4, 1, "", "var"], [859, 4, 1, "", "when"], [860, 4, 1, "", "zeros"]], "polars.Catalog": [[192, 1, 1, "", "__init__"], [193, 1, 1, "", "get_table_info"], [194, 1, 1, "", "list_catalogs"], [195, 1, 1, "", "list_namespaces"], [196, 1, 1, "", "list_tables"], [197, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_default_credential_provider"], [11, 1, 1, "", "set_engine_affinity"], [12, 1, 1, "", "set_float_precision"], [13, 1, 1, "", "set_fmt_float"], [14, 1, 1, "", "set_fmt_str_lengths"], [15, 1, 1, "", "set_fmt_table_cell_list_len"], [16, 1, 1, "", "set_streaming_chunk_size"], [17, 1, 1, "", "set_tbl_cell_alignment"], [18, 1, 1, "", "set_tbl_cell_numeric_alignment"], [19, 1, 1, "", "set_tbl_cols"], [20, 1, 1, "", "set_tbl_column_data_type_inline"], [21, 1, 1, "", "set_tbl_dataframe_shape_below"], [22, 1, 1, "", "set_tbl_formatting"], [23, 1, 1, "", "set_tbl_hide_column_data_types"], [24, 1, 1, "", "set_tbl_hide_column_names"], [25, 1, 1, "", "set_tbl_hide_dataframe_shape"], [26, 1, 1, "", "set_tbl_hide_dtype_separator"], [27, 1, 1, "", "set_tbl_rows"], [28, 1, 1, "", "set_tbl_width_chars"], [29, 1, 1, "", "set_thousands_separator"], [30, 1, 1, "", "set_trim_decimal_zeros"], [31, 1, 1, "", "set_verbose"], [32, 1, 1, "", "state"]], "polars.CredentialProvider": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[34, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[35, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[36, 1, 1, "", "__init__"]], "polars.DataFrame": [[209, 1, 1, "", "__array__"], [210, 1, 1, "", "__arrow_c_stream__"], [211, 1, 1, "", "__dataframe__"], [212, 1, 1, "", "__getitem__"], [213, 1, 1, "", "__setitem__"], [214, 1, 1, "", "approx_n_unique"], [215, 1, 1, "", "bottom_k"], [216, 1, 1, "", "cast"], [217, 1, 1, "", "clear"], [218, 1, 1, "", "clone"], [219, 1, 1, "", "collect_schema"], [220, 2, 1, "", "columns"], [221, 1, 1, "", "corr"], [222, 1, 1, "", "count"], [223, 1, 1, "", "describe"], [224, 1, 1, "", "deserialize"], [225, 1, 1, "", "drop"], [226, 1, 1, "", "drop_in_place"], [227, 1, 1, "", "drop_nans"], [228, 1, 1, "", "drop_nulls"], [229, 2, 1, "", "dtypes"], [230, 1, 1, "", "equals"], [231, 1, 1, "", "estimated_size"], [232, 1, 1, "", "explode"], [233, 1, 1, "", "extend"], [234, 1, 1, "", "fill_nan"], [235, 1, 1, "", "fill_null"], [236, 1, 1, "", "filter"], [237, 2, 1, "", "flags"], [238, 1, 1, "", "fold"], [239, 1, 1, "", "gather_every"], [240, 1, 1, "", "get_column"], [241, 1, 1, "", "get_column_index"], [242, 1, 1, "", "get_columns"], [243, 1, 1, "", "glimpse"], [244, 1, 1, "", "group_by"], [245, 1, 1, "", "group_by_dynamic"], [246, 1, 1, "", "hash_rows"], [247, 1, 1, "", "head"], [248, 2, 1, "", "height"], [249, 1, 1, "", "hstack"], [250, 1, 1, "", "insert_column"], [251, 1, 1, "", "interpolate"], [252, 1, 1, "", "is_duplicated"], [253, 1, 1, "", "is_empty"], [254, 1, 1, "", "is_unique"], [255, 1, 1, "", "item"], [256, 1, 1, "", "iter_columns"], [257, 1, 1, "", "iter_rows"], [258, 1, 1, "", "iter_slices"], [259, 1, 1, "", "join"], [260, 1, 1, "", "join_asof"], [261, 1, 1, "", "join_where"], [262, 1, 1, "", "lazy"], [263, 1, 1, "", "limit"], [264, 1, 1, "", "map_columns"], [265, 1, 1, "", "map_rows"], [266, 1, 1, "", "match_to_schema"], [267, 1, 1, "", "max"], [268, 1, 1, "", "max_horizontal"], [269, 1, 1, "", "mean"], [270, 1, 1, "", "mean_horizontal"], [271, 1, 1, "", "median"], [272, 1, 1, "", "melt"], [273, 1, 1, "", "merge_sorted"], [274, 1, 1, "", "min"], [275, 1, 1, "", "min_horizontal"], [276, 1, 1, "", "n_chunks"], [277, 1, 1, "", "n_unique"], [278, 1, 1, "", "null_count"], [279, 1, 1, "", "partition_by"], [280, 1, 1, "", "pipe"], [281, 1, 1, "", "pivot"], [360, 2, 1, "", "plot"], [282, 1, 1, "", "product"], [283, 1, 1, "", "quantile"], [284, 1, 1, "", "rechunk"], [285, 1, 1, "", "remove"], [286, 1, 1, "", "rename"], [287, 1, 1, "", "replace_column"], [288, 1, 1, "", "reverse"], [289, 1, 1, "", "rolling"], [290, 1, 1, "", "row"], [291, 1, 1, "", "rows"], [292, 1, 1, "", "rows_by_key"], [293, 1, 1, "", "sample"], [294, 2, 1, "", "schema"], [295, 1, 1, "", "select"], [296, 1, 1, "", "select_seq"], [297, 1, 1, "", "serialize"], [298, 1, 1, "", "set_sorted"], [299, 2, 1, "", "shape"], [300, 1, 1, "", "shift"], [301, 1, 1, "", "shrink_to_fit"], [302, 1, 1, "", "slice"], [303, 1, 1, "", "sort"], [304, 1, 1, "", "sql"], [305, 1, 1, "", "std"], [361, 2, 1, "", "style"], [306, 1, 1, "", "sum"], [307, 1, 1, "", "sum_horizontal"], [308, 1, 1, "", "tail"], [309, 1, 1, "", "to_arrow"], [310, 1, 1, "", "to_dict"], [311, 1, 1, "", "to_dicts"], [312, 1, 1, "", "to_dummies"], [313, 1, 1, "", "to_init_repr"], [314, 1, 1, "", "to_jax"], [315, 1, 1, "", "to_numpy"], [316, 1, 1, "", "to_pandas"], [317, 1, 1, "", "to_series"], [318, 1, 1, "", "to_struct"], [319, 1, 1, "", "to_torch"], [320, 1, 1, "", "top_k"], [321, 1, 1, "", "transpose"], [322, 1, 1, "", "unique"], [323, 1, 1, "", "unnest"], [324, 1, 1, "", "unpivot"], [325, 1, 1, "", "unstack"], [326, 1, 1, "", "update"], [327, 1, 1, "", "upsample"], [328, 1, 1, "", "var"], [329, 1, 1, "", "vstack"], [330, 2, 1, "", "width"], [331, 1, 1, "", "with_columns"], [332, 1, 1, "", "with_columns_seq"], [333, 1, 1, "", "with_row_count"], [334, 1, 1, "", "with_row_index"], [37, 1, 1, "", "write_avro"], [38, 1, 1, "", "write_clipboard"], [39, 1, 1, "", "write_csv"], [40, 1, 1, "", "write_database"], [41, 1, 1, "", "write_delta"], [42, 1, 1, "", "write_excel"], [43, 1, 1, "", "write_iceberg"], [44, 1, 1, "", "write_ipc"], [45, 1, 1, "", "write_ipc_stream"], [46, 1, 1, "", "write_json"], [47, 1, 1, "", "write_ndjson"], [48, 1, 1, "", "write_parquet"]], "polars.DataType": [[362, 1, 1, "", "to_dtype_expr"]], "polars.DataTypeExpr.arr": [[363, 1, 1, "", "inner_dtype"], [364, 1, 1, "", "shape"], [365, 1, 1, "", "width"]], "polars.DataTypeExpr.list": [[366, 1, 1, "", "inner_dtype"]], "polars.DataTypeExpr.struct": [[367, 1, 1, "", "field_dtype"], [368, 1, 1, "", "field_names"]], "polars.Expr": [[379, 1, 1, "", "abs"], [380, 1, 1, "", "add"], [381, 1, 1, "", "agg_groups"], [382, 1, 1, "", "alias"], [383, 1, 1, "", "all"], [384, 1, 1, "", "and_"], [385, 1, 1, "", "any"], [386, 1, 1, "", "append"], [387, 1, 1, "", "approx_n_unique"], [388, 1, 1, "", "arccos"], [389, 1, 1, "", "arccosh"], [390, 1, 1, "", "arcsin"], [391, 1, 1, "", "arcsinh"], [392, 1, 1, "", "arctan"], [393, 1, 1, "", "arctanh"], [394, 1, 1, "", "arg_max"], [395, 1, 1, "", "arg_min"], [396, 1, 1, "", "arg_sort"], [397, 1, 1, "", "arg_true"], [398, 1, 1, "", "arg_unique"], [425, 1, 1, "", "backward_fill"], [433, 1, 1, "", "bitwise_and"], [434, 1, 1, "", "bitwise_count_ones"], [435, 1, 1, "", "bitwise_count_zeros"], [436, 1, 1, "", "bitwise_leading_ones"], [437, 1, 1, "", "bitwise_leading_zeros"], [438, 1, 1, "", "bitwise_or"], [439, 1, 1, "", "bitwise_trailing_ones"], [440, 1, 1, "", "bitwise_trailing_zeros"], [441, 1, 1, "", "bitwise_xor"], [442, 1, 1, "", "bottom_k"], [443, 1, 1, "", "bottom_k_by"], [444, 1, 1, "", "cast"], [450, 1, 1, "", "cbrt"], [451, 1, 1, "", "ceil"], [452, 1, 1, "", "clip"], [453, 1, 1, "", "cos"], [454, 1, 1, "", "cosh"], [455, 1, 1, "", "cot"], [456, 1, 1, "", "count"], [457, 1, 1, "", "cum_count"], [458, 1, 1, "", "cum_max"], [459, 1, 1, "", "cum_min"], [460, 1, 1, "", "cum_prod"], [461, 1, 1, "", "cum_sum"], [462, 1, 1, "", "cumulative_eval"], [463, 1, 1, "", "cut"], [464, 1, 1, "", "degrees"], [465, 1, 1, "", "deserialize"], [466, 1, 1, "", "diff"], [467, 1, 1, "", "dot"], [468, 1, 1, "", "drop_nans"], [469, 1, 1, "", "drop_nulls"], [516, 1, 1, "", "entropy"], [517, 1, 1, "", "eq"], [518, 1, 1, "", "eq_missing"], [519, 1, 1, "", "ewm_mean"], [520, 1, 1, "", "ewm_mean_by"], [521, 1, 1, "", "ewm_std"], [522, 1, 1, "", "ewm_var"], [523, 1, 1, "", "exclude"], [524, 1, 1, "", "exp"], [525, 1, 1, "", "explode"], [526, 1, 1, "", "extend_constant"], [527, 1, 1, "", "fill_nan"], [528, 1, 1, "", "fill_null"], [529, 1, 1, "", "filter"], [530, 1, 1, "", "first"], [531, 1, 1, "", "flatten"], [532, 1, 1, "", "floor"], [533, 1, 1, "", "floordiv"], [534, 1, 1, "", "forward_fill"], [535, 1, 1, "", "from_json"], [536, 1, 1, "", "gather"], [537, 1, 1, "", "gather_every"], [538, 1, 1, "", "ge"], [539, 1, 1, "", "get"], [540, 1, 1, "", "gt"], [541, 1, 1, "", "has_nulls"], [542, 1, 1, "", "hash"], [543, 1, 1, "", "head"], [544, 1, 1, "", "hist"], [545, 1, 1, "", "implode"], [546, 1, 1, "", "index_of"], [547, 1, 1, "", "inspect"], [548, 1, 1, "", "interpolate"], [549, 1, 1, "", "interpolate_by"], [550, 1, 1, "", "is_between"], [551, 1, 1, "", "is_close"], [552, 1, 1, "", "is_duplicated"], [553, 1, 1, "", "is_finite"], [554, 1, 1, "", "is_first_distinct"], [555, 1, 1, "", "is_in"], [556, 1, 1, "", "is_infinite"], [557, 1, 1, "", "is_last_distinct"], [558, 1, 1, "", "is_nan"], [559, 1, 1, "", "is_not_nan"], [560, 1, 1, "", "is_not_null"], [561, 1, 1, "", "is_null"], [562, 1, 1, "", "is_unique"], [563, 1, 1, "", "kurtosis"], [564, 1, 1, "", "last"], [565, 1, 1, "", "le"], [566, 1, 1, "", "len"], [567, 1, 1, "", "limit"], [609, 1, 1, "", "log"], [610, 1, 1, "", "log10"], [611, 1, 1, "", "log1p"], [612, 1, 1, "", "lower_bound"], [613, 1, 1, "", "lt"], [614, 1, 1, "", "map_batches"], [615, 1, 1, "", "map_elements"], [616, 1, 1, "", "max"], [617, 1, 1, "", "mean"], [618, 1, 1, "", "median"], [634, 1, 1, "", "min"], [635, 1, 1, "", "mod"], [636, 1, 1, "", "mode"], [637, 1, 1, "", "mul"], [638, 1, 1, "", "n_unique"], [648, 1, 1, "", "nan_max"], [649, 1, 1, "", "nan_min"], [650, 1, 1, "", "ne"], [651, 1, 1, "", "ne_missing"], [652, 1, 1, "", "neg"], [653, 1, 1, "", "not_"], [654, 1, 1, "", "null_count"], [655, 1, 1, "", "or_"], [656, 1, 1, "", "over"], [657, 1, 1, "", "pct_change"], [658, 1, 1, "", "peak_max"], [659, 1, 1, "", "peak_min"], [660, 1, 1, "", "pipe"], [661, 1, 1, "", "pow"], [662, 1, 1, "", "product"], [663, 1, 1, "", "qcut"], [664, 1, 1, "", "quantile"], [665, 1, 1, "", "radians"], [666, 1, 1, "", "rank"], [667, 1, 1, "", "rechunk"], [668, 1, 1, "", "reinterpret"], [669, 1, 1, "", "repeat_by"], [670, 1, 1, "", "replace"], [671, 1, 1, "", "replace_strict"], [672, 1, 1, "", "reshape"], [673, 1, 1, "", "reverse"], [674, 1, 1, "", "rle"], [675, 1, 1, "", "rle_id"], [676, 1, 1, "", "rolling"], [677, 1, 1, "", "rolling_kurtosis"], [678, 1, 1, "", "rolling_map"], [679, 1, 1, "", "rolling_max"], [680, 1, 1, "", "rolling_max_by"], [681, 1, 1, "", "rolling_mean"], [682, 1, 1, "", "rolling_mean_by"], [683, 1, 1, "", "rolling_median"], [684, 1, 1, "", "rolling_median_by"], [685, 1, 1, "", "rolling_min"], [686, 1, 1, "", "rolling_min_by"], [687, 1, 1, "", "rolling_quantile"], [688, 1, 1, "", "rolling_quantile_by"], [689, 1, 1, "", "rolling_skew"], [690, 1, 1, "", "rolling_std"], [691, 1, 1, "", "rolling_std_by"], [692, 1, 1, "", "rolling_sum"], [693, 1, 1, "", "rolling_sum_by"], [694, 1, 1, "", "rolling_var"], [695, 1, 1, "", "rolling_var_by"], [696, 1, 1, "", "round"], [697, 1, 1, "", "round_sig_figs"], [698, 1, 1, "", "sample"], [699, 1, 1, "", "search_sorted"], [700, 1, 1, "", "set_sorted"], [701, 1, 1, "", "shift"], [702, 1, 1, "", "shrink_dtype"], [703, 1, 1, "", "shuffle"], [704, 1, 1, "", "sign"], [705, 1, 1, "", "sin"], [706, 1, 1, "", "sinh"], [707, 1, 1, "", "skew"], [708, 1, 1, "", "slice"], [709, 1, 1, "", "sort"], [710, 1, 1, "", "sort_by"], [711, 1, 1, "", "sqrt"], [712, 1, 1, "", "std"], [767, 1, 1, "", "sub"], [768, 1, 1, "", "sum"], [769, 1, 1, "", "tail"], [770, 1, 1, "", "tan"], [771, 1, 1, "", "tanh"], [772, 1, 1, "", "to_physical"], [773, 1, 1, "", "top_k"], [774, 1, 1, "", "top_k_by"], [775, 1, 1, "", "truediv"], [776, 1, 1, "", "unique"], [777, 1, 1, "", "unique_counts"], [778, 1, 1, "", "upper_bound"], [779, 1, 1, "", "value_counts"], [780, 1, 1, "", "var"], [781, 1, 1, "", "where"], [782, 1, 1, "", "xor"]], "polars.Expr.arr": [[399, 1, 1, "", "all"], [400, 1, 1, "", "any"], [401, 1, 1, "", "arg_max"], [402, 1, 1, "", "arg_min"], [403, 1, 1, "", "contains"], [404, 1, 1, "", "count_matches"], [405, 1, 1, "", "explode"], [406, 1, 1, "", "first"], [407, 1, 1, "", "get"], [408, 1, 1, "", "join"], [409, 1, 1, "", "last"], [410, 1, 1, "", "len"], [411, 1, 1, "", "max"], [412, 1, 1, "", "mean"], [413, 1, 1, "", "median"], [414, 1, 1, "", "min"], [415, 1, 1, "", "n_unique"], [416, 1, 1, "", "reverse"], [417, 1, 1, "", "shift"], [418, 1, 1, "", "sort"], [419, 1, 1, "", "std"], [420, 1, 1, "", "sum"], [421, 1, 1, "", "to_list"], [422, 1, 1, "", "to_struct"], [423, 1, 1, "", "unique"], [424, 1, 1, "", "var"]], "polars.Expr.bin": [[426, 1, 1, "", "contains"], [427, 1, 1, "", "decode"], [428, 1, 1, "", "encode"], [429, 1, 1, "", "ends_with"], [430, 1, 1, "", "reinterpret"], [431, 1, 1, "", "size"], [432, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[445, 1, 1, "", "ends_with"], [446, 1, 1, "", "get_categories"], [447, 1, 1, "", "len_bytes"], [448, 1, 1, "", "len_chars"], [449, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[470, 1, 1, "", "add_business_days"], [471, 1, 1, "", "base_utc_offset"], [472, 1, 1, "", "cast_time_unit"], [473, 1, 1, "", "century"], [474, 1, 1, "", "combine"], [475, 1, 1, "", "convert_time_zone"], [476, 1, 1, "", "date"], [477, 1, 1, "", "datetime"], [478, 1, 1, "", "day"], [479, 1, 1, "", "dst_offset"], [480, 1, 1, "", "epoch"], [481, 1, 1, "", "hour"], [482, 1, 1, "", "is_business_day"], [483, 1, 1, "", "is_leap_year"], [484, 1, 1, "", "iso_year"], [485, 1, 1, "", "microsecond"], [486, 1, 1, "", "millennium"], [487, 1, 1, "", "millisecond"], [488, 1, 1, "", "minute"], [489, 1, 1, "", "month"], [490, 1, 1, "", "month_end"], [491, 1, 1, "", "month_start"], [492, 1, 1, "", "nanosecond"], [493, 1, 1, "", "offset_by"], [494, 1, 1, "", "ordinal_day"], [495, 1, 1, "", "quarter"], [496, 1, 1, "", "replace"], [497, 1, 1, "", "replace_time_zone"], [498, 1, 1, "", "round"], [499, 1, 1, "", "second"], [500, 1, 1, "", "strftime"], [501, 1, 1, "", "time"], [502, 1, 1, "", "timestamp"], [503, 1, 1, "", "to_string"], [504, 1, 1, "", "total_days"], [505, 1, 1, "", "total_hours"], [506, 1, 1, "", "total_microseconds"], [507, 1, 1, "", "total_milliseconds"], [508, 1, 1, "", "total_minutes"], [509, 1, 1, "", "total_nanoseconds"], [510, 1, 1, "", "total_seconds"], [511, 1, 1, "", "truncate"], [512, 1, 1, "", "week"], [513, 1, 1, "", "weekday"], [514, 1, 1, "", "with_time_unit"], [515, 1, 1, "", "year"]], "polars.Expr.list": [[568, 1, 1, "", "all"], [569, 1, 1, "", "any"], [570, 1, 1, "", "arg_max"], [571, 1, 1, "", "arg_min"], [572, 1, 1, "", "concat"], [573, 1, 1, "", "contains"], [574, 1, 1, "", "count_matches"], [575, 1, 1, "", "diff"], [576, 1, 1, "", "drop_nulls"], [577, 1, 1, "", "eval"], [578, 1, 1, "", "explode"], [579, 1, 1, "", "filter"], [580, 1, 1, "", "first"], [581, 1, 1, "", "gather"], [582, 1, 1, "", "gather_every"], [583, 1, 1, "", "get"], [584, 1, 1, "", "head"], [585, 1, 1, "", "join"], [586, 1, 1, "", "last"], [587, 1, 1, "", "len"], [588, 1, 1, "", "max"], [589, 1, 1, "", "mean"], [590, 1, 1, "", "median"], [591, 1, 1, "", "min"], [592, 1, 1, "", "n_unique"], [593, 1, 1, "", "reverse"], [594, 1, 1, "", "sample"], [595, 1, 1, "", "set_difference"], [596, 1, 1, "", "set_intersection"], [597, 1, 1, "", "set_symmetric_difference"], [598, 1, 1, "", "set_union"], [599, 1, 1, "", "shift"], [600, 1, 1, "", "slice"], [601, 1, 1, "", "sort"], [602, 1, 1, "", "std"], [603, 1, 1, "", "sum"], [604, 1, 1, "", "tail"], [605, 1, 1, "", "to_array"], [606, 1, 1, "", "to_struct"], [607, 1, 1, "", "unique"], [608, 1, 1, "", "var"]], "polars.Expr.meta": [[619, 1, 1, "", "eq"], [620, 1, 1, "", "has_multiple_outputs"], [621, 1, 1, "", "is_column"], [622, 1, 1, "", "is_column_selection"], [623, 1, 1, "", "is_literal"], [624, 1, 1, "", "is_regex_projection"], [625, 1, 1, "", "ne"], [626, 1, 1, "", "output_name"], [627, 1, 1, "", "pop"], [628, 1, 1, "", "root_names"], [629, 1, 1, "", "serialize"], [630, 1, 1, "", "show_graph"], [631, 1, 1, "", "tree_format"], [632, 1, 1, "", "undo_aliases"], [633, 1, 1, "", "write_json"]], "polars.Expr.name": [[639, 1, 1, "", "keep"], [640, 1, 1, "", "map"], [641, 1, 1, "", "map_fields"], [642, 1, 1, "", "prefix"], [643, 1, 1, "", "prefix_fields"], [644, 1, 1, "", "suffix"], [645, 1, 1, "", "suffix_fields"], [646, 1, 1, "", "to_lowercase"], [647, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[713, 1, 1, "", "concat"], [714, 1, 1, "", "contains"], [715, 1, 1, "", "contains_any"], [716, 1, 1, "", "count_matches"], [717, 1, 1, "", "decode"], [718, 1, 1, "", "encode"], [719, 1, 1, "", "ends_with"], [720, 1, 1, "", "escape_regex"], [721, 1, 1, "", "explode"], [722, 1, 1, "", "extract"], [723, 1, 1, "", "extract_all"], [724, 1, 1, "", "extract_groups"], [725, 1, 1, "", "extract_many"], [726, 1, 1, "", "find"], [727, 1, 1, "", "find_many"], [728, 1, 1, "", "head"], [729, 1, 1, "", "join"], [730, 1, 1, "", "json_decode"], [731, 1, 1, "", "json_path_match"], [732, 1, 1, "", "len_bytes"], [733, 1, 1, "", "len_chars"], [734, 1, 1, "", "normalize"], [735, 1, 1, "", "pad_end"], [736, 1, 1, "", "pad_start"], [737, 1, 1, "", "replace"], [738, 1, 1, "", "replace_all"], [739, 1, 1, "", "replace_many"], [740, 1, 1, "", "reverse"], [741, 1, 1, "", "slice"], [742, 1, 1, "", "split"], [743, 1, 1, "", "split_exact"], [744, 1, 1, "", "splitn"], [745, 1, 1, "", "starts_with"], [746, 1, 1, "", "strip_chars"], [747, 1, 1, "", "strip_chars_end"], [748, 1, 1, "", "strip_chars_start"], [749, 1, 1, "", "strip_prefix"], [750, 1, 1, "", "strip_suffix"], [751, 1, 1, "", "strptime"], [752, 1, 1, "", "tail"], [753, 1, 1, "", "to_date"], [754, 1, 1, "", "to_datetime"], [755, 1, 1, "", "to_decimal"], [756, 1, 1, "", "to_integer"], [757, 1, 1, "", "to_lowercase"], [758, 1, 1, "", "to_time"], [759, 1, 1, "", "to_titlecase"], [760, 1, 1, "", "to_uppercase"], [761, 1, 1, "", "zfill"]], "polars.Expr.struct": [[762, 1, 1, "", "field"], [763, 1, 1, "", "json_encode"], [764, 1, 1, "", "rename_fields"], [765, 1, 1, "", "unnest"], [766, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[884, 1, 1, "", "__getitem__"], [885, 1, 1, "", "approx_n_unique"], [886, 1, 1, "", "bottom_k"], [887, 1, 1, "", "cache"], [888, 1, 1, "", "cast"], [889, 1, 1, "", "clear"], [890, 1, 1, "", "clone"], [891, 1, 1, "", "collect"], [892, 1, 1, "", "collect_async"], [893, 1, 1, "", "collect_batches"], [894, 1, 1, "", "collect_schema"], [895, 2, 1, "", "columns"], [896, 1, 1, "", "count"], [897, 1, 1, "", "describe"], [898, 1, 1, "", "deserialize"], [899, 1, 1, "", "drop"], [900, 1, 1, "", "drop_nans"], [901, 1, 1, "", "drop_nulls"], [902, 2, 1, "", "dtypes"], [903, 1, 1, "", "explain"], [904, 1, 1, "", "explode"], [905, 1, 1, "", "fill_nan"], [906, 1, 1, "", "fill_null"], [907, 1, 1, "", "filter"], [908, 1, 1, "", "first"], [909, 1, 1, "", "gather_every"], [910, 1, 1, "", "group_by"], [911, 1, 1, "", "group_by_dynamic"], [912, 1, 1, "", "head"], [913, 1, 1, "", "inspect"], [914, 1, 1, "", "interpolate"], [915, 1, 1, "", "join"], [916, 1, 1, "", "join_asof"], [917, 1, 1, "", "join_where"], [918, 1, 1, "", "last"], [919, 1, 1, "", "lazy"], [920, 1, 1, "", "limit"], [921, 1, 1, "", "map_batches"], [922, 1, 1, "", "match_to_schema"], [923, 1, 1, "", "max"], [924, 1, 1, "", "mean"], [925, 1, 1, "", "median"], [926, 1, 1, "", "melt"], [927, 1, 1, "", "merge_sorted"], [928, 1, 1, "", "min"], [929, 1, 1, "", "null_count"], [930, 1, 1, "", "pipe"], [931, 1, 1, "", "pipe_with_schema"], [932, 1, 1, "", "profile"], [933, 1, 1, "", "quantile"], [934, 1, 1, "", "remote"], [935, 1, 1, "", "remove"], [936, 1, 1, "", "rename"], [937, 1, 1, "", "reverse"], [938, 1, 1, "", "rolling"], [939, 2, 1, "", "schema"], [940, 1, 1, "", "select"], [941, 1, 1, "", "select_seq"], [942, 1, 1, "", "serialize"], [943, 1, 1, "", "set_sorted"], [944, 1, 1, "", "shift"], [945, 1, 1, "", "show_graph"], [946, 1, 1, "", "sink_batches"], [49, 1, 1, "", "sink_csv"], [50, 1, 1, "", "sink_ipc"], [51, 1, 1, "", "sink_ndjson"], [52, 1, 1, "", "sink_parquet"], [947, 1, 1, "", "slice"], [948, 1, 1, "", "sort"], [949, 1, 1, "", "sql"], [950, 1, 1, "", "std"], [951, 1, 1, "", "sum"], [952, 1, 1, "", "tail"], [953, 1, 1, "", "top_k"], [954, 1, 1, "", "unique"], [955, 1, 1, "", "unnest"], [956, 1, 1, "", "unpivot"], [957, 1, 1, "", "update"], [958, 1, 1, "", "var"], [959, 2, 1, "", "width"], [960, 1, 1, "", "with_columns"], [961, 1, 1, "", "with_columns_seq"], [962, 1, 1, "", "with_context"], [963, 1, 1, "", "with_row_count"], [964, 1, 1, "", "with_row_index"]], "polars.PartitionByKey": [[53, 1, 1, "", "__init__"]], "polars.PartitionMaxSize": [[54, 1, 1, "", "__init__"]], "polars.PartitionParted": [[55, 1, 1, "", "__init__"]], "polars.QueryOptFlags": [[965, 1, 1, "", "__init__"]], "polars.SQLContext": [[1432, 1, 1, "", "__enter__"], [1432, 1, 1, "", "__exit__"], [1432, 1, 1, "", "__init__"], [1413, 1, 1, "", "execute"], [1414, 1, 1, "", "execute_global"], [1415, 1, 1, "", "register"], [1416, 1, 1, "", "register_globals"], [1417, 1, 1, "", "register_many"], [1418, 1, 1, "", "tables"], [1419, 1, 1, "", "unregister"]], "polars.ScanCastOptions": [[56, 1, 1, "", "__init__"]], "polars.Series": [[999, 1, 1, "", "__array__"], [1000, 1, 1, "", "__arrow_c_stream__"], [1001, 1, 1, "", "__getitem__"], [1002, 1, 1, "", "abs"], [1003, 1, 1, "", "alias"], [1004, 1, 1, "", "all"], [1005, 1, 1, "", "any"], [1006, 1, 1, "", "append"], [1007, 1, 1, "", "approx_n_unique"], [1008, 1, 1, "", "arccos"], [1009, 1, 1, "", "arccosh"], [1010, 1, 1, "", "arcsin"], [1011, 1, 1, "", "arcsinh"], [1012, 1, 1, "", "arctan"], [1013, 1, 1, "", "arctanh"], [1014, 1, 1, "", "arg_max"], [1015, 1, 1, "", "arg_min"], [1016, 1, 1, "", "arg_sort"], [1017, 1, 1, "", "arg_true"], [1018, 1, 1, "", "arg_unique"], [1044, 1, 1, "", "backward_fill"], [1052, 1, 1, "", "bitwise_and"], [1053, 1, 1, "", "bitwise_count_ones"], [1054, 1, 1, "", "bitwise_count_zeros"], [1055, 1, 1, "", "bitwise_leading_ones"], [1056, 1, 1, "", "bitwise_leading_zeros"], [1057, 1, 1, "", "bitwise_or"], [1058, 1, 1, "", "bitwise_trailing_ones"], [1059, 1, 1, "", "bitwise_trailing_zeros"], [1060, 1, 1, "", "bitwise_xor"], [1061, 1, 1, "", "bottom_k"], [1062, 1, 1, "", "bottom_k_by"], [1063, 1, 1, "", "cast"], [1072, 1, 1, "", "cbrt"], [1073, 1, 1, "", "ceil"], [1074, 1, 1, "", "chunk_lengths"], [1075, 1, 1, "", "clear"], [1076, 1, 1, "", "clip"], [1077, 1, 1, "", "clone"], [1078, 1, 1, "", "cos"], [1079, 1, 1, "", "cosh"], [1080, 1, 1, "", "cot"], [1081, 1, 1, "", "count"], [1082, 1, 1, "", "cum_count"], [1083, 1, 1, "", "cum_max"], [1084, 1, 1, "", "cum_min"], [1085, 1, 1, "", "cum_prod"], [1086, 1, 1, "", "cum_sum"], [1087, 1, 1, "", "cumulative_eval"], [1088, 1, 1, "", "cut"], [1089, 1, 1, "", "describe"], [1090, 1, 1, "", "diff"], [1091, 1, 1, "", "dot"], [1092, 1, 1, "", "drop_nans"], [1093, 1, 1, "", "drop_nulls"], [1144, 2, 1, "", "dtype"], [1145, 1, 1, "", "entropy"], [1146, 1, 1, "", "eq"], [1147, 1, 1, "", "eq_missing"], [1148, 1, 1, "", "equals"], [1149, 1, 1, "", "estimated_size"], [1150, 1, 1, "", "ewm_mean"], [1151, 1, 1, "", "ewm_mean_by"], [1152, 1, 1, "", "ewm_std"], [1153, 1, 1, "", "ewm_var"], [1154, 1, 1, "", "exp"], [1155, 1, 1, "", "explode"], [1156, 1, 1, "", "extend"], [1157, 1, 1, "", "extend_constant"], [1158, 1, 1, "", "fill_nan"], [1159, 1, 1, "", "fill_null"], [1160, 1, 1, "", "filter"], [1161, 1, 1, "", "first"], [1162, 2, 1, "", "flags"], [1163, 1, 1, "", "floor"], [1164, 1, 1, "", "forward_fill"], [1165, 1, 1, "", "gather"], [1166, 1, 1, "", "gather_every"], [1167, 1, 1, "", "ge"], [1168, 1, 1, "", "get_chunks"], [1169, 1, 1, "", "gt"], [1170, 1, 1, "", "has_nulls"], [1171, 1, 1, "", "has_validity"], [1172, 1, 1, "", "hash"], [1173, 1, 1, "", "head"], [1174, 1, 1, "", "hist"], [1175, 1, 1, "", "implode"], [1176, 1, 1, "", "index_of"], [1177, 1, 1, "", "interpolate"], [1178, 1, 1, "", "interpolate_by"], [1179, 1, 1, "", "is_between"], [1180, 1, 1, "", "is_close"], [1181, 1, 1, "", "is_duplicated"], [1182, 1, 1, "", "is_empty"], [1183, 1, 1, "", "is_finite"], [1184, 1, 1, "", "is_first_distinct"], [1185, 1, 1, "", "is_in"], [1186, 1, 1, "", "is_infinite"], [1187, 1, 1, "", "is_last_distinct"], [1188, 1, 1, "", "is_nan"], [1189, 1, 1, "", "is_not_nan"], [1190, 1, 1, "", "is_not_null"], [1191, 1, 1, "", "is_null"], [1192, 1, 1, "", "is_sorted"], [1193, 1, 1, "", "is_unique"], [1194, 1, 1, "", "item"], [1195, 1, 1, "", "kurtosis"], [1196, 1, 1, "", "last"], [1197, 1, 1, "", "le"], [1198, 1, 1, "", "len"], [1199, 1, 1, "", "limit"], [1241, 1, 1, "", "log"], [1242, 1, 1, "", "log10"], [1243, 1, 1, "", "log1p"], [1244, 1, 1, "", "lower_bound"], [1245, 1, 1, "", "lt"], [1246, 1, 1, "", "map_elements"], [1247, 1, 1, "", "max"], [1248, 1, 1, "", "mean"], [1249, 1, 1, "", "median"], [1250, 1, 1, "", "min"], [1251, 1, 1, "", "mode"], [1252, 1, 1, "", "n_chunks"], [1253, 1, 1, "", "n_unique"], [1254, 2, 1, "", "name"], [1255, 1, 1, "", "nan_max"], [1256, 1, 1, "", "nan_min"], [1257, 1, 1, "", "ne"], [1258, 1, 1, "", "ne_missing"], [1259, 1, 1, "", "new_from_index"], [1260, 1, 1, "", "not_"], [1261, 1, 1, "", "null_count"], [1262, 1, 1, "", "pct_change"], [1263, 1, 1, "", "peak_max"], [1264, 1, 1, "", "peak_min"], [1409, 2, 1, "", "plot"], [1265, 1, 1, "", "pow"], [1266, 1, 1, "", "product"], [1267, 1, 1, "", "qcut"], [1268, 1, 1, "", "quantile"], [1269, 1, 1, "", "rank"], [1270, 1, 1, "", "rechunk"], [1271, 1, 1, "", "reinterpret"], [1272, 1, 1, "", "rename"], [1273, 1, 1, "", "repeat_by"], [1274, 1, 1, "", "replace"], [1275, 1, 1, "", "replace_strict"], [1276, 1, 1, "", "reshape"], [1277, 1, 1, "", "reverse"], [1278, 1, 1, "", "rle"], [1279, 1, 1, "", "rle_id"], [1280, 1, 1, "", "rolling_kurtosis"], [1281, 1, 1, "", "rolling_map"], [1282, 1, 1, "", "rolling_max"], [1283, 1, 1, "", "rolling_max_by"], [1284, 1, 1, "", "rolling_mean"], [1285, 1, 1, "", "rolling_mean_by"], [1286, 1, 1, "", "rolling_median"], [1287, 1, 1, "", "rolling_median_by"], [1288, 1, 1, "", "rolling_min"], [1289, 1, 1, "", "rolling_min_by"], [1290, 1, 1, "", "rolling_quantile"], [1291, 1, 1, "", "rolling_quantile_by"], [1292, 1, 1, "", "rolling_skew"], [1293, 1, 1, "", "rolling_std"], [1294, 1, 1, "", "rolling_std_by"], [1295, 1, 1, "", "rolling_sum"], [1296, 1, 1, "", "rolling_sum_by"], [1297, 1, 1, "", "rolling_var"], [1298, 1, 1, "", "rolling_var_by"], [1299, 1, 1, "", "round"], [1300, 1, 1, "", "round_sig_figs"], [1301, 1, 1, "", "sample"], [1302, 1, 1, "", "scatter"], [1303, 1, 1, "", "search_sorted"], [1304, 1, 1, "", "set"], [1305, 1, 1, "", "set_sorted"], [1306, 2, 1, "", "shape"], [1307, 1, 1, "", "shift"], [1308, 1, 1, "", "shrink_dtype"], [1309, 1, 1, "", "shrink_to_fit"], [1310, 1, 1, "", "shuffle"], [1311, 1, 1, "", "sign"], [1312, 1, 1, "", "sin"], [1313, 1, 1, "", "sinh"], [1314, 1, 1, "", "skew"], [1315, 1, 1, "", "slice"], [1316, 1, 1, "", "sort"], [1317, 1, 1, "", "sqrt"], [1318, 1, 1, "", "std"], [1374, 1, 1, "", "sum"], [1375, 1, 1, "", "tail"], [1376, 1, 1, "", "tan"], [1377, 1, 1, "", "tanh"], [1378, 1, 1, "", "to_arrow"], [1379, 1, 1, "", "to_dummies"], [1380, 1, 1, "", "to_frame"], [1381, 1, 1, "", "to_init_repr"], [1382, 1, 1, "", "to_jax"], [1383, 1, 1, "", "to_list"], [1384, 1, 1, "", "to_numpy"], [1385, 1, 1, "", "to_pandas"], [1386, 1, 1, "", "to_physical"], [1387, 1, 1, "", "to_torch"], [1388, 1, 1, "", "top_k"], [1389, 1, 1, "", "top_k_by"], [1390, 1, 1, "", "unique"], [1391, 1, 1, "", "unique_counts"], [1392, 1, 1, "", "upper_bound"], [1393, 1, 1, "", "value_counts"], [1394, 1, 1, "", "var"], [1395, 1, 1, "", "zip_with"]], "polars.Series.arr": [[1019, 1, 1, "", "all"], [1020, 1, 1, "", "any"], [1021, 1, 1, "", "arg_max"], [1022, 1, 1, "", "arg_min"], [1023, 1, 1, "", "contains"], [1024, 1, 1, "", "count_matches"], [1025, 1, 1, "", "explode"], [1026, 1, 1, "", "first"], [1027, 1, 1, "", "get"], [1028, 1, 1, "", "join"], [1029, 1, 1, "", "last"], [1030, 1, 1, "", "len"], [1031, 1, 1, "", "max"], [1032, 1, 1, "", "median"], [1033, 1, 1, "", "min"], [1034, 1, 1, "", "n_unique"], [1035, 1, 1, "", "reverse"], [1036, 1, 1, "", "shift"], [1037, 1, 1, "", "sort"], [1038, 1, 1, "", "std"], [1039, 1, 1, "", "sum"], [1040, 1, 1, "", "to_list"], [1041, 1, 1, "", "to_struct"], [1042, 1, 1, "", "unique"], [1043, 1, 1, "", "var"]], "polars.Series.bin": [[1045, 1, 1, "", "contains"], [1046, 1, 1, "", "decode"], [1047, 1, 1, "", "encode"], [1048, 1, 1, "", "ends_with"], [1049, 1, 1, "", "reinterpret"], [1050, 1, 1, "", "size"], [1051, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1064, 1, 1, "", "ends_with"], [1065, 1, 1, "", "get_categories"], [1066, 1, 1, "", "is_local"], [1067, 1, 1, "", "len_bytes"], [1068, 1, 1, "", "len_chars"], [1069, 1, 1, "", "starts_with"], [1070, 1, 1, "", "to_local"], [1071, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1094, 1, 1, "", "add_business_days"], [1095, 1, 1, "", "base_utc_offset"], [1096, 1, 1, "", "cast_time_unit"], [1097, 1, 1, "", "century"], [1098, 1, 1, "", "combine"], [1099, 1, 1, "", "convert_time_zone"], [1100, 1, 1, "", "date"], [1101, 1, 1, "", "datetime"], [1102, 1, 1, "", "day"], [1103, 1, 1, "", "dst_offset"], [1104, 1, 1, "", "epoch"], [1105, 1, 1, "", "hour"], [1106, 1, 1, "", "is_business_day"], [1107, 1, 1, "", "is_leap_year"], [1108, 1, 1, "", "iso_year"], [1109, 1, 1, "", "max"], [1110, 1, 1, "", "mean"], [1111, 1, 1, "", "median"], [1112, 1, 1, "", "microsecond"], [1113, 1, 1, "", "millennium"], [1114, 1, 1, "", "millisecond"], [1115, 1, 1, "", "min"], [1116, 1, 1, "", "minute"], [1117, 1, 1, "", "month"], [1118, 1, 1, "", "month_end"], [1119, 1, 1, "", "month_start"], [1120, 1, 1, "", "nanosecond"], [1121, 1, 1, "", "offset_by"], [1122, 1, 1, "", "ordinal_day"], [1123, 1, 1, "", "quarter"], [1124, 1, 1, "", "replace"], [1125, 1, 1, "", "replace_time_zone"], [1126, 1, 1, "", "round"], [1127, 1, 1, "", "second"], [1128, 1, 1, "", "strftime"], [1129, 1, 1, "", "time"], [1130, 1, 1, "", "timestamp"], [1131, 1, 1, "", "to_string"], [1132, 1, 1, "", "total_days"], [1133, 1, 1, "", "total_hours"], [1134, 1, 1, "", "total_microseconds"], [1135, 1, 1, "", "total_milliseconds"], [1136, 1, 1, "", "total_minutes"], [1137, 1, 1, "", "total_nanoseconds"], [1138, 1, 1, "", "total_seconds"], [1139, 1, 1, "", "truncate"], [1140, 1, 1, "", "week"], [1141, 1, 1, "", "weekday"], [1142, 1, 1, "", "with_time_unit"], [1143, 1, 1, "", "year"]], "polars.Series.list": [[1200, 1, 1, "", "all"], [1201, 1, 1, "", "any"], [1202, 1, 1, "", "arg_max"], [1203, 1, 1, "", "arg_min"], [1204, 1, 1, "", "concat"], [1205, 1, 1, "", "contains"], [1206, 1, 1, "", "count_matches"], [1207, 1, 1, "", "diff"], [1208, 1, 1, "", "drop_nulls"], [1209, 1, 1, "", "eval"], [1210, 1, 1, "", "explode"], [1211, 1, 1, "", "filter"], [1212, 1, 1, "", "first"], [1213, 1, 1, "", "gather"], [1214, 1, 1, "", "gather_every"], [1215, 1, 1, "", "get"], [1216, 1, 1, "", "head"], [1217, 1, 1, "", "join"], [1218, 1, 1, "", "last"], [1219, 1, 1, "", "len"], [1220, 1, 1, "", "max"], [1221, 1, 1, "", "mean"], [1222, 1, 1, "", "median"], [1223, 1, 1, "", "min"], [1224, 1, 1, "", "n_unique"], [1225, 1, 1, "", "reverse"], [1226, 1, 1, "", "sample"], [1227, 1, 1, "", "set_difference"], [1228, 1, 1, "", "set_intersection"], [1229, 1, 1, "", "set_symmetric_difference"], [1230, 1, 1, "", "set_union"], [1231, 1, 1, "", "shift"], [1232, 1, 1, "", "slice"], [1233, 1, 1, "", "sort"], [1234, 1, 1, "", "std"], [1235, 1, 1, "", "sum"], [1236, 1, 1, "", "tail"], [1237, 1, 1, "", "to_array"], [1238, 1, 1, "", "to_struct"], [1239, 1, 1, "", "unique"], [1240, 1, 1, "", "var"]], "polars.Series.str": [[1319, 1, 1, "", "concat"], [1320, 1, 1, "", "contains"], [1321, 1, 1, "", "contains_any"], [1322, 1, 1, "", "count_matches"], [1323, 1, 1, "", "decode"], [1324, 1, 1, "", "encode"], [1325, 1, 1, "", "ends_with"], [1326, 1, 1, "", "escape_regex"], [1327, 1, 1, "", "explode"], [1328, 1, 1, "", "extract"], [1329, 1, 1, "", "extract_all"], [1330, 1, 1, "", "extract_groups"], [1331, 1, 1, "", "extract_many"], [1332, 1, 1, "", "find"], [1333, 1, 1, "", "find_many"], [1334, 1, 1, "", "head"], [1335, 1, 1, "", "join"], [1336, 1, 1, "", "json_decode"], [1337, 1, 1, "", "json_path_match"], [1338, 1, 1, "", "len_bytes"], [1339, 1, 1, "", "len_chars"], [1340, 1, 1, "", "normalize"], [1341, 1, 1, "", "pad_end"], [1342, 1, 1, "", "pad_start"], [1343, 1, 1, "", "replace"], [1344, 1, 1, "", "replace_all"], [1345, 1, 1, "", "replace_many"], [1346, 1, 1, "", "reverse"], [1347, 1, 1, "", "slice"], [1348, 1, 1, "", "split"], [1349, 1, 1, "", "split_exact"], [1350, 1, 1, "", "splitn"], [1351, 1, 1, "", "starts_with"], [1352, 1, 1, "", "strip_chars"], [1353, 1, 1, "", "strip_chars_end"], [1354, 1, 1, "", "strip_chars_start"], [1355, 1, 1, "", "strip_prefix"], [1356, 1, 1, "", "strip_suffix"], [1357, 1, 1, "", "strptime"], [1358, 1, 1, "", "tail"], [1359, 1, 1, "", "to_date"], [1360, 1, 1, "", "to_datetime"], [1361, 1, 1, "", "to_decimal"], [1362, 1, 1, "", "to_integer"], [1363, 1, 1, "", "to_lowercase"], [1364, 1, 1, "", "to_time"], [1365, 1, 1, "", "to_titlecase"], [1366, 1, 1, "", "to_uppercase"], [1367, 1, 1, "", "zfill"]], "polars.Series.struct": [[1368, 1, 1, "", "field"], [1369, 3, 1, "", "fields"], [1370, 1, 1, "", "json_encode"], [1371, 1, 1, "", "rename_fields"], [1372, 3, 1, "", "schema"], [1373, 1, 1, "", "unnest"]], "polars.StringCache": [[57, 1, 1, "", "__init__"]], "polars.api": [[59, 4, 1, "", "register_dataframe_namespace"], [60, 4, 1, "", "register_expr_namespace"], [61, 4, 1, "", "register_lazyframe_namespace"], [62, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[198, 0, 1, "", "CatalogInfo"], [199, 0, 1, "", "ColumnInfo"], [200, 5, 1, "", "DataSourceFormat"], [201, 0, 1, "", "NamespaceInfo"], [202, 0, 1, "", "TableInfo"], [204, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[198, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[199, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[201, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[202, 1, 1, "", "__init__"], [203, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[335, 1, 1, "", "__iter__"], [336, 1, 1, "", "agg"], [337, 1, 1, "", "all"], [338, 1, 1, "", "count"], [339, 1, 1, "", "first"], [340, 1, 1, "", "head"], [341, 1, 1, "", "last"], [342, 1, 1, "", "len"], [343, 1, 1, "", "map_groups"], [344, 1, 1, "", "max"], [345, 1, 1, "", "mean"], [346, 1, 1, "", "median"], [347, 1, 1, "", "min"], [348, 1, 1, "", "n_unique"], [349, 1, 1, "", "quantile"], [350, 1, 1, "", "sum"], [351, 1, 1, "", "tail"]], "polars.datatypes": [[67, 0, 1, "", "Array"], [68, 0, 1, "", "Binary"], [69, 0, 1, "", "Boolean"], [70, 0, 1, "", "Categorical"], [71, 0, 1, "", "DataType"], [72, 0, 1, "", "Date"], [73, 0, 1, "", "Datetime"], [74, 0, 1, "", "Decimal"], [75, 0, 1, "", "Duration"], [76, 0, 1, "", "Enum"], [77, 0, 1, "", "Field"], [78, 0, 1, "", "Float32"], [79, 0, 1, "", "Float64"], [80, 0, 1, "", "Int128"], [81, 0, 1, "", "Int16"], [82, 0, 1, "", "Int32"], [83, 0, 1, "", "Int64"], [84, 0, 1, "", "Int8"], [85, 0, 1, "", "List"], [86, 0, 1, "", "Null"], [87, 0, 1, "", "Object"], [88, 0, 1, "", "String"], [89, 0, 1, "", "Struct"], [90, 0, 1, "", "Time"], [91, 0, 1, "", "UInt16"], [92, 0, 1, "", "UInt32"], [93, 0, 1, "", "UInt64"], [94, 0, 1, "", "UInt8"], [95, 0, 1, "", "Unknown"], [96, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[70, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[77, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[80, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[83, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[84, 1, 1, "", "__init__"]], "polars.datatypes.List": [[85, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[86, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[87, 1, 1, "", "__init__"]], "polars.datatypes.String": [[88, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[89, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[90, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[91, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[92, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[93, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[94, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[95, 1, 1, "", "__init__"]], "polars.exceptions": [[101, 6, 1, "", "CategoricalRemappingWarning"], [102, 6, 1, "", "ChronoFormatWarning"], [103, 6, 1, "", "ColumnNotFoundError"], [104, 6, 1, "", "ComputeError"], [105, 6, 1, "", "CustomUFuncWarning"], [106, 6, 1, "", "DataOrientationWarning"], [107, 6, 1, "", "DuplicateError"], [108, 6, 1, "", "InvalidOperationError"], [109, 6, 1, "", "MapWithoutReturnDtypeWarning"], [110, 6, 1, "", "ModuleUpgradeRequiredError"], [111, 6, 1, "", "NoDataError"], [112, 6, 1, "", "NoRowsReturnedError"], [113, 6, 1, "", "OutOfBoundsError"], [114, 6, 1, "", "PanicException"], [115, 6, 1, "", "ParameterCollisionError"], [116, 6, 1, "", "PerformanceWarning"], [117, 6, 1, "", "PolarsError"], [118, 6, 1, "", "PolarsInefficientMapWarning"], [119, 6, 1, "", "PolarsWarning"], [120, 6, 1, "", "RowsError"], [121, 6, 1, "", "SQLInterfaceError"], [122, 6, 1, "", "SQLSyntaxError"], [123, 6, 1, "", "SchemaError"], [124, 6, 1, "", "SchemaFieldNotFoundError"], [125, 6, 1, "", "ShapeError"], [126, 6, 1, "", "StringCacheMismatchError"], [127, 6, 1, "", "StructFieldNotFoundError"], [128, 6, 1, "", "TooManyRowsReturnedError"], [129, 6, 1, "", "UnstableWarning"], [130, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[141, 1, 1, "", "next_batches"]], "polars.io.parquet": [[142, 0, 1, "", "ParquetFieldOverwrites"]], "polars.io.parquet.ParquetFieldOverwrites": [[142, 1, 1, "", "__init__"]], "polars.io.partition": [[143, 0, 1, "", "BasePartitionContext"], [144, 0, 1, "", "KeyedPartition"], [145, 0, 1, "", "KeyedPartitionContext"]], "polars.io.partition.BasePartitionContext": [[143, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartition": [[144, 1, 1, "", "__init__"]], "polars.io.partition.KeyedPartitionContext": [[145, 1, 1, "", "__init__"]], "polars.io.plugins": [[146, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[966, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[966, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[967, 1, 1, "", "agg"], [968, 1, 1, "", "all"], [969, 1, 1, "", "count"], [970, 1, 1, "", "first"], [971, 1, 1, "", "head"], [972, 1, 1, "", "last"], [973, 1, 1, "", "len"], [974, 1, 1, "", "map_groups"], [975, 1, 1, "", "max"], [976, 1, 1, "", "mean"], [977, 1, 1, "", "median"], [978, 1, 1, "", "min"], [979, 1, 1, "", "n_unique"], [980, 1, 1, "", "quantile"], [981, 1, 1, "", "sum"], [982, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[983, 1, 1, "", "cancel"], [984, 1, 1, "", "fetch"], [985, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[148, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[997, 0, 1, "", "Selector"], [997, 4, 1, "", "all"], [997, 4, 1, "", "alpha"], [997, 4, 1, "", "alphanumeric"], [997, 4, 1, "", "array"], [997, 4, 1, "", "binary"], [997, 4, 1, "", "boolean"], [997, 4, 1, "", "by_dtype"], [997, 4, 1, "", "by_index"], [997, 4, 1, "", "by_name"], [997, 4, 1, "", "categorical"], [997, 4, 1, "", "contains"], [997, 4, 1, "", "date"], [997, 4, 1, "", "datetime"], [997, 4, 1, "", "decimal"], [997, 4, 1, "", "digit"], [997, 4, 1, "", "duration"], [997, 4, 1, "", "ends_with"], [997, 4, 1, "", "enum"], [997, 4, 1, "", "exclude"], [997, 4, 1, "", "expand_selector"], [997, 4, 1, "", "first"], [997, 4, 1, "", "float"], [997, 4, 1, "", "integer"], [997, 4, 1, "", "is_selector"], [997, 4, 1, "", "last"], [997, 4, 1, "", "list"], [997, 4, 1, "", "matches"], [997, 4, 1, "", "nested"], [997, 4, 1, "", "numeric"], [997, 4, 1, "", "signed_integer"], [997, 4, 1, "", "starts_with"], [997, 4, 1, "", "string"], [997, 4, 1, "", "struct"], [997, 4, 1, "", "temporal"], [997, 4, 1, "", "time"], [997, 4, 1, "", "unsigned_integer"]], "polars.selectors.Selector": [[997, 1, 1, "", "as_expr"], [997, 1, 1, "", "exclude"]], "polars.testing": [[175, 4, 1, "", "assert_frame_equal"], [176, 4, 1, "", "assert_frame_not_equal"], [177, 4, 1, "", "assert_series_equal"], [178, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[179, 0, 1, "", "column"], [180, 4, 1, "", "columns"], [181, 4, 1, "", "create_list_strategy"], [182, 4, 1, "", "dataframes"], [183, 4, 1, "", "dtypes"], [184, 4, 1, "", "lists"], [185, 4, 1, "", "load_profile"], [186, 4, 1, "", "series"], [187, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[179, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 13, 39, 40, 41, 42, 48, 49, 56, 62, 67, 77, 89, 97, 100, 102, 108, 132, 139, 146, 151, 152, 153, 154, 156, 157, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 186, 213, 215, 216, 227, 228, 231, 236, 239, 244, 245, 250, 256, 259, 260, 264, 272, 279, 281, 285, 287, 289, 292, 295, 296, 303, 312, 315, 320, 322, 323, 324, 325, 326, 331, 332, 357, 369, 408, 443, 475, 480, 500, 503, 523, 529, 533, 546, 563, 585, 614, 615, 627, 636, 641, 648, 649, 656, 657, 668, 675, 677, 710, 714, 722, 723, 724, 726, 728, 737, 738, 741, 742, 744, 751, 752, 753, 754, 758, 762, 764, 766, 774, 783, 784, 785, 786, 791, 798, 801, 804, 805, 814, 815, 817, 818, 824, 829, 830, 831, 832, 834, 836, 837, 839, 847, 849, 851, 852, 853, 859, 865, 869, 886, 888, 900, 910, 911, 915, 916, 926, 935, 940, 941, 948, 953, 954, 955, 956, 957, 960, 961, 974, 991, 996, 997, 1001, 1002, 1003, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1097, 1098, 1099, 1102, 1103, 1104, 1106, 1107, 1109, 1110, 1111, 1113, 1114, 1115, 1118, 1119, 1122, 1124, 1126, 1127, 1128, 1131, 1139, 1141, 1142, 1143, 1144, 1149, 1150, 1152, 1153, 1154, 1155, 1157, 1158, 1159, 1160, 1162, 1163, 1165, 1166, 1168, 1170, 1172, 1173, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1320, 1321, 1322, 1323, 1324, 1325, 1327, 1328, 1329, 1330, 1331, 1332, 1334, 1335, 1336, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1404, 1409, 1413, 1417, 1420, 1427, 1428], "0": [1, 7, 8, 9, 13, 15, 17, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 40, 41, 42, 48, 52, 53, 58, 59, 60, 62, 64, 66, 67, 70, 74, 85, 97, 133, 139, 147, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 189, 190, 211, 212, 213, 214, 215, 216, 217, 218, 219, 221, 222, 223, 224, 225, 227, 229, 230, 234, 235, 236, 238, 239, 242, 243, 244, 245, 246, 250, 251, 255, 257, 258, 259, 262, 265, 266, 268, 269, 270, 271, 272, 275, 276, 277, 278, 281, 282, 283, 285, 287, 289, 291, 292, 293, 294, 295, 302, 303, 304, 305, 307, 312, 313, 314, 315, 316, 317, 319, 320, 321, 325, 327, 328, 331, 333, 334, 336, 338, 339, 341, 343, 344, 345, 346, 347, 348, 349, 350, 357, 360, 361, 375, 379, 381, 382, 384, 388, 389, 390, 391, 392, 393, 396, 397, 398, 401, 402, 404, 407, 412, 419, 422, 424, 431, 433, 438, 441, 443, 444, 450, 451, 452, 453, 454, 455, 462, 463, 464, 468, 469, 470, 476, 477, 481, 485, 487, 488, 492, 496, 499, 501, 503, 506, 507, 509, 510, 514, 517, 518, 519, 520, 521, 522, 524, 526, 527, 528, 529, 532, 533, 535, 537, 538, 540, 542, 544, 548, 549, 551, 553, 556, 558, 559, 560, 561, 563, 565, 570, 571, 574, 577, 579, 581, 582, 583, 589, 590, 602, 603, 606, 608, 609, 610, 611, 613, 614, 615, 616, 617, 618, 622, 627, 630, 633, 634, 635, 637, 639, 648, 649, 650, 651, 652, 654, 655, 657, 660, 661, 662, 663, 664, 665, 666, 670, 671, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 702, 704, 705, 706, 707, 711, 712, 713, 716, 721, 722, 723, 726, 727, 730, 755, 766, 767, 768, 770, 771, 772, 774, 775, 779, 780, 781, 783, 788, 789, 790, 791, 792, 793, 794, 795, 796, 798, 800, 802, 809, 813, 816, 822, 823, 825, 826, 827, 830, 833, 834, 835, 839, 841, 842, 844, 845, 846, 847, 848, 852, 855, 856, 857, 858, 859, 860, 865, 869, 885, 886, 888, 889, 890, 891, 894, 896, 897, 899, 900, 902, 903, 905, 906, 907, 909, 910, 911, 914, 915, 919, 921, 922, 925, 926, 929, 931, 932, 933, 935, 938, 939, 940, 945, 948, 949, 950, 953, 958, 960, 962, 963, 964, 967, 969, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 991, 996, 997, 1001, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1016, 1018, 1021, 1027, 1038, 1039, 1041, 1043, 1050, 1063, 1072, 1073, 1075, 1078, 1079, 1080, 1087, 1088, 1089, 1091, 1092, 1093, 1094, 1101, 1105, 1110, 1111, 1112, 1114, 1116, 1120, 1124, 1127, 1131, 1134, 1135, 1137, 1138, 1142, 1145, 1148, 1150, 1151, 1152, 1153, 1158, 1163, 1166, 1171, 1172, 1174, 1177, 1178, 1180, 1183, 1186, 1188, 1189, 1190, 1191, 1194, 1195, 1202, 1203, 1206, 1209, 1211, 1213, 1214, 1215, 1221, 1222, 1234, 1235, 1238, 1240, 1241, 1242, 1243, 1244, 1248, 1249, 1255, 1256, 1262, 1265, 1267, 1268, 1269, 1274, 1275, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1303, 1311, 1312, 1313, 1314, 1317, 1318, 1319, 1322, 1327, 1328, 1329, 1332, 1333, 1337, 1343, 1361, 1374, 1376, 1377, 1379, 1382, 1384, 1385, 1386, 1387, 1392, 1393, 1394, 1404, 1409, 1413, 1419, 1421, 1422, 1423, 1426, 1427, 1429, 1430, 1432, 1434, 1435], "00": [29, 42, 73, 216, 223, 245, 327, 357, 471, 472, 475, 479, 490, 491, 493, 497, 498, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 680, 682, 684, 686, 688, 691, 693, 695, 751, 754, 758, 809, 810, 811, 812, 826, 855, 856, 857, 869, 888, 897, 911, 991, 997, 1095, 1096, 1099, 1100, 1101, 1103, 1104, 1105, 1111, 1112, 1116, 1118, 1119, 1120, 1121, 1125, 1126, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1343, 1357, 1360, 1364, 1404, 1427], "000": [9, 12, 29, 42, 54, 153, 357, 1343, 1435], "0000": [319, 357, 1387, 1404, 1435], "000000": [427, 428, 503, 717, 1046, 1047, 1323], "00000001": [13, 782, 869], "0000001": 761, "00000010": [782, 869], "00000011": [782, 869], "00000100": [782, 869], "00001000": [782, 869], "00001010": [782, 869], "00001011": [782, 869], "0000e": 13, "0000ff": [427, 428, 717, 1046, 1047, 1323], "0001": 503, "000100": 503, "000101": 503, "0005": 997, "00050": 997, "000800": 1131, "001": [60, 761, 812, 1134, 1135, 1137, 1367], "002": [812, 1134, 1135, 1137], "005": [1145, 1404], "00prefix": 997, "00z": [751, 754, 1357, 1360], "01": [30, 58, 72, 73, 182, 216, 223, 243, 245, 260, 289, 327, 357, 470, 471, 472, 473, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 514, 515, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 751, 753, 754, 758, 793, 806, 807, 808, 809, 810, 811, 812, 826, 869, 888, 897, 911, 916, 938, 991, 997, 1094, 1096, 1098, 1099, 1100, 1101, 1104, 1105, 1111, 1112, 1116, 1118, 1119, 1120, 1121, 1124, 1125, 1126, 1128, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1357, 1359, 1360, 1364, 1404, 1427, 1430], "010": [9, 756, 1362], "01000": 30, "01000010": [782, 869], "01000110": [782, 869], "012": [697, 734, 869, 1300, 1340, 1404], "0123": [761, 1367], "01234": [697, 869, 1300, 1404], "012345": 1131, "015625": [1265, 1404], "01\u00b2": [734, 1340], "02": [58, 216, 223, 243, 245, 289, 327, 357, 470, 472, 474, 480, 490, 491, 493, 497, 502, 503, 505, 508, 510, 514, 676, 680, 682, 684, 686, 688, 691, 693, 695, 696, 751, 753, 754, 758, 793, 806, 807, 808, 809, 810, 811, 812, 826, 869, 888, 897, 911, 938, 991, 997, 1041, 1096, 1098, 1100, 1101, 1104, 1105, 1111, 1112, 1116, 1118, 1119, 1120, 1124, 1125, 1126, 1129, 1130, 1133, 1136, 1138, 1139, 1238, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1357, 1359, 1360, 1364, 1404, 1427, 1428], "03": [58, 139, 151, 216, 245, 260, 289, 327, 357, 472, 474, 475, 480, 482, 490, 491, 493, 496, 497, 498, 500, 502, 503, 504, 505, 508, 510, 511, 514, 520, 533, 676, 680, 682, 684, 686, 688, 691, 693, 695, 753, 758, 806, 807, 808, 809, 810, 811, 812, 869, 888, 911, 916, 938, 991, 997, 1096, 1098, 1099, 1104, 1105, 1111, 1112, 1118, 1119, 1120, 1125, 1126, 1128, 1130, 1132, 1133, 1136, 1138, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1359, 1364, 1404], "037037": [1265, 1404], "04": [172, 216, 223, 245, 327, 357, 474, 475, 490, 491, 496, 497, 498, 500, 504, 505, 508, 510, 514, 680, 682, 684, 686, 688, 691, 693, 695, 751, 793, 806, 809, 810, 812, 869, 888, 897, 911, 991, 997, 1099, 1112, 1116, 1118, 1119, 1120, 1125, 1128, 1132, 1133, 1136, 1138, 1142, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1357, 1404, 1427], "047198": 1429, "05": [18, 172, 175, 176, 177, 178, 182, 216, 223, 327, 357, 470, 473, 474, 475, 476, 477, 481, 482, 485, 486, 487, 488, 490, 491, 492, 497, 499, 500, 501, 503, 504, 793, 806, 807, 809, 810, 888, 897, 991, 997, 1098, 1099, 1100, 1101, 1125, 1126, 1128, 1129, 1131, 1132, 1139, 1427, 1428, 1430], "050545": 139, "0522623626787952": [1195, 1404], "0545": [1100, 1101, 1129], "05t10": 1131, "06": [182, 216, 327, 357, 470, 474, 489, 495, 497, 498, 499, 511, 512, 806, 809, 826, 888, 991, 997, 1094, 1125, 1126, 1131, 1139], "060": [476, 477, 481, 485, 487, 488, 492, 499, 501], "0601749420166": [231, 357], "06293300616044681": [1145, 1404], "07": [18, 151, 182, 223, 357, 470, 473, 474, 486, 497, 498, 503, 511, 751, 806, 807, 809, 810, 818, 897, 991, 997, 1094, 1098, 1125, 1131, 1357, 1427, 1430], "071068": [223, 357, 897, 991], "08": [151, 175, 176, 177, 178, 223, 260, 289, 304, 357, 470, 474, 490, 491, 498, 503, 676, 751, 810, 812, 826, 869, 897, 916, 938, 991, 997, 1094, 1126, 1139, 1357, 1427, 1428], "085537": [1154, 1404], "09": [58, 151, 223, 289, 357, 470, 474, 490, 491, 503, 551, 656, 676, 755, 806, 807, 809, 857, 869, 897, 938, 991, 997, 1094, 1180, 1361, 1404], "090909": [657, 869], "094395": 1429, "098612": [611, 869, 1241, 1243, 1404, 1426], "0999": [473, 486], "0_": [42, 357], "0m": [479, 1103], "0x11bc0ad80": 996, "0\u00b5": 503, "1": [1, 7, 8, 9, 11, 13, 14, 15, 17, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 52, 53, 58, 59, 60, 61, 62, 64, 66, 67, 70, 85, 89, 97, 103, 106, 107, 108, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 151, 152, 155, 156, 157, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 174, 175, 176, 177, 178, 179, 182, 186, 190, 211, 212, 213, 214, 215, 216, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 364, 365, 367, 368, 369, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 401, 402, 404, 405, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 431, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 623, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 719, 721, 722, 723, 724, 725, 726, 727, 729, 730, 731, 732, 733, 737, 738, 739, 743, 744, 745, 746, 747, 748, 755, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 788, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 865, 869, 884, 885, 886, 888, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 920, 922, 923, 924, 925, 926, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 991, 997, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1050, 1061, 1062, 1063, 1067, 1068, 1072, 1073, 1074, 1076, 1077, 1078, 1079, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1165, 1166, 1168, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1198, 1199, 1202, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1328, 1330, 1331, 1332, 1333, 1335, 1336, 1337, 1338, 1339, 1343, 1344, 1345, 1349, 1350, 1361, 1367, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1404, 1409, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1432, 1433, 1434, 1435], "10": [15, 18, 19, 29, 37, 39, 41, 42, 44, 45, 48, 58, 66, 139, 151, 152, 154, 166, 174, 190, 213, 218, 223, 227, 233, 242, 243, 245, 247, 249, 250, 251, 256, 260, 263, 264, 276, 280, 282, 287, 289, 295, 304, 308, 331, 336, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 382, 386, 394, 395, 396, 398, 452, 458, 461, 466, 470, 471, 473, 474, 476, 477, 479, 481, 485, 486, 487, 488, 490, 491, 492, 496, 497, 498, 499, 501, 503, 511, 514, 520, 541, 542, 543, 548, 555, 567, 575, 582, 584, 590, 600, 602, 604, 608, 610, 626, 628, 639, 654, 656, 657, 660, 670, 671, 676, 708, 756, 766, 769, 782, 793, 794, 802, 807, 809, 810, 813, 816, 818, 820, 828, 829, 854, 857, 869, 891, 892, 897, 900, 911, 912, 914, 916, 920, 930, 932, 938, 940, 951, 952, 960, 967, 970, 972, 975, 976, 977, 978, 979, 980, 981, 991, 997, 1076, 1090, 1094, 1095, 1097, 1098, 1103, 1113, 1125, 1131, 1139, 1142, 1145, 1151, 1173, 1185, 1199, 1207, 1216, 1222, 1232, 1234, 1236, 1240, 1242, 1246, 1262, 1275, 1302, 1304, 1362, 1375, 1382, 1384, 1387, 1404, 1413, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1430, 1435], "100": [12, 19, 29, 42, 54, 135, 138, 147, 151, 152, 153, 156, 160, 161, 162, 166, 170, 213, 261, 281, 300, 357, 503, 670, 671, 701, 715, 725, 727, 739, 811, 869, 917, 944, 991, 997, 1147, 1242, 1258, 1274, 1275, 1282, 1284, 1288, 1307, 1321, 1333, 1336, 1345, 1361, 1404, 1424, 1435], "1000": [231, 313, 334, 357, 387, 869, 964, 991, 1134, 1242, 1381, 1404, 1435], "10000": [151, 258, 357], "100000": [12, 29], "1000000": [13, 1137], "1001": [334, 357, 964, 991], "1002": [334, 357, 964, 991], "10047419486152048166": [246, 357], "1005": [387, 869], "100_000": [54, 153, 847, 921, 991], "100\u00b5": 503, "101": [9, 29, 261, 357, 474, 503, 756, 917, 991, 997, 1362, 1435], "101000": 474, "10101": [29, 1430], "1010101": 9, "101514": [223, 357, 897, 991], "102": [261, 357, 917, 991], "1024": [39, 48, 49, 52, 151, 152, 153, 161, 170, 357, 431, 991, 1050], "1040361802642717": [1195, 1404], "107149": 1429, "10734580197236529959": [1172, 1404], "1073741824": [702, 869], "10783150408545073287": [246, 357], "107_930_000": 1413, "10_000": [42, 357], "10i": [245, 357, 911, 991], "10m": [498, 511, 1126, 1139], "10t00": 503, "11": [12, 18, 48, 52, 174, 182, 214, 223, 260, 289, 357, 382, 490, 491, 493, 498, 511, 535, 548, 582, 633, 657, 666, 676, 678, 692, 708, 782, 826, 852, 857, 865, 869, 885, 891, 892, 897, 912, 916, 920, 932, 938, 952, 991, 997, 1121, 1126, 1139, 1246, 1281, 1404, 1422], "110": [227, 357, 739, 756, 900, 991, 1362], "1101441246220388612": [542, 869], "111": [12, 1424], "11111": 1127, "111110": 1127, "11111001": [782, 869], "11111010": [782, 869], "11111111": 12, "112": [702, 869, 1435], "11330": 181, "1152921504606846976": [1271, 1404], "116": 181, "11638928888656214026": [542, 869], "118034": [950, 991], "11aa": 1427, "11aabb": 1427, "11h": [471, 1095], "12": [28, 42, 58, 139, 151, 174, 182, 223, 245, 256, 260, 261, 289, 304, 327, 357, 382, 460, 470, 471, 473, 474, 478, 486, 489, 490, 491, 493, 494, 495, 496, 503, 512, 513, 520, 548, 582, 614, 630, 657, 665, 676, 692, 702, 716, 737, 755, 803, 806, 809, 810, 811, 826, 829, 855, 856, 857, 869, 897, 911, 912, 916, 917, 920, 938, 945, 952, 991, 997, 1095, 1097, 1098, 1110, 1111, 1113, 1117, 1124, 1131, 1151, 1246, 1299, 1322, 1344, 1361, 1404, 1426, 1427, 1428, 1430, 1432, 1435], "120": [261, 357, 812, 917, 991, 1429], "1200": [697, 869], "120134": [755, 1361], "121": 1435, "123": [9, 623, 716, 723, 738, 761, 859, 997, 1322, 1329, 1367, 1380, 1404], "123000": 997, "1232e": [1078, 1080, 1404], "1234": [29, 697, 869], "12345": [818, 1073, 1131, 1163, 1299, 1404], "1234500": 997, "123456": [9, 997], "1234567": 29, "123456780": 139, "12346": 818, "123465": 997, "123a123": 738, "123abc": [737, 1343, 1344], "125": [1, 42, 62, 357, 380, 661, 848, 869, 949, 991, 1262, 1265, 1404], "1252": 151, "127": [1392, 1404, 1423], "128": [60, 74, 80, 1262, 1404], "129": [702, 869], "13": [142, 217, 218, 223, 234, 235, 242, 261, 262, 276, 289, 331, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 382, 470, 476, 477, 481, 485, 487, 488, 492, 499, 501, 626, 628, 676, 755, 796, 802, 805, 809, 816, 853, 855, 858, 869, 889, 890, 897, 905, 906, 917, 919, 938, 960, 970, 972, 975, 976, 977, 978, 979, 980, 981, 991, 1094, 1126, 1139, 1140, 1246, 1361, 1404, 1423], "130": [261, 357, 917, 991], "13382926553367784577": [542, 869], "134821952": 1413, "134_821_952": 1413, "135": [790, 1429], "13614470193936745724": [542, 869], "13756996518000038261": [1172, 1404], "13d": 503, "13h": [471, 1095], "14": [41, 174, 223, 245, 261, 265, 289, 327, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 471, 476, 477, 481, 485, 487, 488, 492, 499, 501, 503, 548, 623, 666, 809, 855, 856, 869, 897, 911, 917, 938, 970, 972, 975, 976, 977, 978, 979, 980, 981, 991, 997, 1095, 1126, 1131], "140": [261, 357, 917, 991], "141592653589793": 12, "141593": [665, 869, 1008, 1404, 1426, 1429], "142857": [1262, 1404], "143": [755, 1361, 1435], "1433": [40, 357], "1436e16": 182, "1438741209321515184": [246, 357], "1440": [508, 1136], "1443e235": 1435, "149": 1435, "14d": 997, "14h": 503, "15": [12, 42, 142, 174, 223, 245, 261, 265, 289, 357, 462, 466, 491, 496, 498, 503, 511, 520, 660, 676, 692, 734, 803, 809, 855, 856, 869, 897, 911, 917, 938, 991, 997, 1087, 1090, 1126, 1131, 1139, 1151, 1340, 1404, 1423, 1427], "150": [261, 357, 917, 991, 1284, 1404], "1500": [174, 185], "15000": [258, 357], "153061": [563, 869], "155": 147, "15836": 182, "15_000": [258, 357], "16": [1, 42, 60, 81, 91, 174, 188, 223, 245, 261, 289, 331, 357, 412, 458, 461, 496, 503, 548, 630, 637, 656, 661, 676, 756, 766, 802, 812, 813, 816, 826, 869, 897, 911, 917, 938, 945, 960, 991, 997, 1126, 1139, 1262, 1312, 1362, 1376, 1404, 1423, 1426, 1427, 1432], "160": [261, 357, 917, 991], "165": [1126, 1139], "1656e15": [1080, 1404], "166667": [779, 869, 1262, 1393, 1404], "1666683077": 818, "1666683099": 818, "167": 58, "16996": 1435, "16h": 997, "17": [139, 174, 182, 231, 260, 336, 357, 520, 546, 656, 678, 696, 798, 818, 856, 869, 916, 967, 991, 1078, 1080, 1126, 1151, 1176, 1281, 1404, 1435], "170": [147, 261, 357, 917, 991], "17293822569102704640": [1271, 1404], "174": 1435, "175201": [706, 869, 1313, 1404], "1755e": [179, 182], "1764": 62, "17888890": [231, 357], "179": 1435, "17_500": [258, 357], "18": [40, 139, 156, 223, 273, 289, 357, 461, 498, 511, 514, 548, 639, 656, 676, 766, 869, 897, 927, 932, 938, 991, 997, 1131, 1142, 1289, 1404, 1421, 1432], "180": [147, 464, 665, 869, 1429], "1800": [496, 1124], "1844": 182, "18446744073709551614": [1271, 1404], "185_000_000": 1413, "186": 1435, "1875": [694, 869, 958, 991], "1897": [473, 486, 1097, 1113], "18d": 997, "19": [182, 260, 289, 357, 473, 498, 676, 682, 684, 686, 688, 755, 869, 916, 938, 991, 1097, 1126, 1139, 1285, 1287, 1289, 1291, 1361, 1404], "1920": 1427, "196": 1428, "1964": [932, 991], "1969": [1427, 1428], "1970": [72, 73, 172, 511, 1139, 1413], "1972": 1413, "1976": [484, 515], "1977": [484, 515], "1978": [476, 477, 481, 484, 485, 487, 488, 492, 499, 501, 515, 1428], "1979": [484, 515], "1980": 503, "1985": [807, 810], "1990": [151, 1413], "1993": 1413, "1994": 1413, "1995": 151, "1998": [493, 1121], "1999": [304, 357, 493, 503, 997, 1121, 1131, 1430], "199992": [921, 991], "199994": [921, 991], "199996": [921, 991], "199998": [921, 991], "1_000_000": [231, 357, 1149, 1404], "1_234_500": 997, "1d": [245, 260, 289, 327, 357, 472, 493, 498, 503, 505, 508, 511, 514, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 812, 828, 856, 857, 869, 911, 916, 938, 991, 997, 1096, 1104, 1111, 1121, 1126, 1130, 1133, 1136, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "1e": [13, 175, 176, 177, 178, 551, 869, 1180, 1404], "1e6": 13, "1h": [245, 260, 289, 327, 357, 479, 493, 498, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1103, 1105, 1121, 1126, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "1i": [245, 289, 327, 357, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 869, 911, 938, 991, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "1m": [245, 260, 289, 327, 357, 493, 498, 510, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1121, 1126, 1134, 1135, 1137, 1138, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "1mo": [245, 260, 289, 327, 357, 475, 490, 491, 493, 497, 498, 504, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1099, 1117, 1118, 1119, 1121, 1122, 1123, 1125, 1126, 1132, 1139, 1140, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "1n": [245, 260, 289, 327, 357, 493, 498, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1121, 1126, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "1q": [245, 260, 289, 327, 357, 493, 498, 511, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1121, 1126, 1139, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "1st_col": 997, "1u": [245, 260, 289, 327, 357, 493, 498, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1121, 1126, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "1w": [245, 260, 289, 327, 357, 493, 498, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1121, 1126, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "1w2d": [807, 808], "1y": [245, 260, 289, 327, 357, 493, 498, 511, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1121, 1126, 1139, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "1y2mo": [493, 1121], "1zy3": [716, 1322], "2": [1, 7, 8, 11, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 58, 59, 60, 61, 62, 66, 67, 85, 89, 103, 106, 108, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 151, 154, 160, 161, 163, 164, 166, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 182, 184, 190, 197, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 364, 365, 368, 369, 375, 379, 380, 381, 382, 384, 386, 387, 394, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 430, 431, 433, 438, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 455, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 470, 471, 473, 474, 475, 476, 477, 478, 479, 482, 483, 486, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 533, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 630, 631, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 708, 709, 710, 711, 713, 715, 716, 717, 718, 719, 720, 722, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 754, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 769, 770, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 833, 834, 835, 836, 838, 839, 842, 846, 847, 848, 849, 850, 851, 852, 854, 857, 858, 859, 865, 869, 884, 885, 886, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 991, 996, 997, 1001, 1002, 1003, 1006, 1009, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1049, 1050, 1061, 1062, 1068, 1072, 1073, 1074, 1075, 1077, 1078, 1080, 1081, 1082, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1094, 1095, 1098, 1100, 1101, 1103, 1105, 1106, 1109, 1110, 1111, 1113, 1115, 1116, 1117, 1118, 1119, 1123, 1124, 1125, 1126, 1129, 1139, 1141, 1142, 1143, 1144, 1145, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1165, 1166, 1168, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1198, 1199, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1312, 1314, 1315, 1316, 1317, 1318, 1319, 1322, 1328, 1330, 1332, 1333, 1334, 1336, 1337, 1339, 1340, 1343, 1344, 1349, 1350, 1352, 1353, 1354, 1357, 1358, 1360, 1361, 1362, 1363, 1366, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1378, 1379, 1380, 1381, 1383, 1384, 1385, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1404, 1409, 1413, 1414, 1416, 1417, 1419, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1432, 1433, 1434, 1435], "20": [40, 41, 42, 67, 139, 151, 152, 154, 156, 157, 159, 163, 166, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 213, 214, 223, 227, 233, 245, 249, 264, 273, 280, 282, 287, 289, 304, 314, 315, 319, 327, 333, 338, 357, 394, 395, 396, 452, 466, 473, 476, 477, 481, 485, 486, 487, 488, 492, 498, 499, 501, 503, 511, 514, 535, 542, 548, 614, 622, 633, 660, 680, 682, 684, 686, 688, 691, 693, 695, 721, 755, 766, 781, 809, 818, 828, 848, 856, 869, 885, 897, 900, 903, 911, 927, 930, 938, 949, 963, 969, 991, 997, 1090, 1097, 1101, 1113, 1126, 1131, 1139, 1142, 1148, 1154, 1171, 1274, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1327, 1361, 1382, 1384, 1387, 1404, 1420, 1421, 1424, 1430, 1432], "200": [42, 357, 506, 507, 509, 670, 671, 869, 997, 1147, 1258, 1274, 1275, 1282, 1284, 1288, 1404, 1424], "2000": [473, 483, 486, 490, 491, 493, 997, 1097, 1107, 1113, 1118, 1119, 1121, 1127, 1413, 1427], "200000": [506, 921, 991], "200000000": 509, "2001": [18, 472, 473, 478, 480, 483, 486, 489, 493, 494, 495, 498, 502, 511, 512, 513, 514, 680, 682, 684, 686, 688, 691, 693, 695, 751, 869, 997, 1096, 1097, 1102, 1104, 1105, 1107, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1120, 1121, 1122, 1123, 1126, 1130, 1139, 1140, 1141, 1142, 1143, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1357, 1404], "2002": [151, 483, 493, 1107, 1121, 1143], "2003": [493, 818, 1121], "2004": [493, 1121], "2005": [493, 1121], "2006": [493, 1121], "2008": 1413, "200m": [506, 507, 509], "2010": [304, 357, 503, 997], "2011": [471, 1095], "2012": [471, 1095, 1430], "2013": 1124, "2016": [260, 357, 916, 991], "2017": [260, 357, 916, 991], "2018": [260, 357, 497, 916, 991, 1125], "2019": [260, 357, 916, 991], "202": 1428, "2020": [155, 167, 216, 223, 243, 260, 289, 357, 360, 470, 475, 479, 482, 497, 500, 503, 504, 505, 506, 507, 508, 509, 510, 520, 676, 751, 753, 754, 793, 869, 888, 897, 916, 938, 991, 997, 1094, 1099, 1103, 1106, 1125, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1151, 1357, 1359, 1360, 1404, 1428], "2021": [216, 223, 243, 245, 327, 357, 751, 828, 888, 897, 911, 991, 997, 1100, 1101, 1108, 1129, 1357, 1427], "2022": [58, 216, 223, 243, 357, 474, 498, 511, 751, 807, 808, 810, 811, 812, 818, 888, 897, 991, 997, 1098, 1108, 1126, 1139, 1357], "2023": [18, 42, 139, 174, 258, 357, 474, 812, 828, 997, 1098], "2024": [174, 470, 476, 477, 481, 482, 485, 487, 488, 492, 496, 499, 501, 656, 793, 806, 807, 809, 810, 812, 869, 997, 1094, 1106, 1124, 1427, 1430], "2025": [470, 482, 496, 793, 826, 997, 1094, 1106], "2026": 1428, "2030": 1427, "2031": 997, "2040": 503, "2047317070637311557": [246, 357], "2055938745": 139, "2065": [476, 477, 481, 485, 487, 488, 492, 499, 501], "2068": 182, "207": 1428, "2077": [304, 357, 503, 997, 1131, 1427, 1428], "2095": 182, "20_000": [42, 357], "20t08": 503, "20t18": 1131, "20word": 154, "21": [174, 223, 273, 306, 357, 462, 473, 519, 521, 522, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 809, 818, 826, 844, 845, 869, 897, 927, 991, 997, 1087, 1097, 1150, 1152, 1153, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1404, 1421], "213": 1435, "2147483647": 1435, "2147483648": [1244, 1404], "21d": 997, "22": [48, 52, 174, 182, 357, 478, 494, 498, 511, 513, 514, 678, 680, 682, 684, 686, 688, 691, 693, 695, 751, 809, 865, 869, 991, 997, 1126, 1139, 1142, 1281, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1357, 1404, 1427, 1428, 1435], "221": 1435, "2246e": [1312, 1376, 1404], "225": [498, 511, 1429], "22500": 847, "22_000_000": 1413, "22_500": 847, "23": [12, 133, 182, 223, 245, 289, 319, 357, 474, 478, 481, 494, 496, 498, 503, 513, 676, 680, 682, 684, 686, 688, 691, 693, 695, 809, 812, 855, 856, 857, 869, 897, 911, 938, 949, 991, 997, 1098, 1105, 1124, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1387, 1404, 1434, 1435], "230498": 13, "230498095872587": 13, "2304980958725870923": 13, "232338648": 1413, "2337": [42, 357], "234": 29, "2345": 997, "23456789": 12, "235": 1435, "23h": 997, "24": [60, 174, 245, 259, 260, 265, 289, 304, 327, 357, 460, 462, 478, 493, 494, 498, 505, 511, 513, 637, 676, 680, 682, 684, 686, 688, 691, 693, 695, 734, 807, 808, 810, 811, 812, 856, 857, 869, 911, 915, 916, 938, 991, 1087, 1121, 1126, 1133, 1139, 1194, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1378, 1404, 1427, 1434], "24030": 181, "249": [782, 869], "25": [1, 29, 42, 62, 139, 223, 227, 245, 250, 260, 289, 314, 319, 327, 331, 357, 431, 466, 478, 479, 494, 503, 513, 520, 661, 663, 666, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 775, 809, 810, 811, 812, 818, 826, 827, 830, 856, 857, 869, 897, 900, 911, 916, 924, 938, 958, 960, 991, 997, 1050, 1089, 1090, 1103, 1131, 1145, 1151, 1174, 1262, 1267, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1343, 1404, 1421, 1426, 1432, 1433], "250": [782, 869, 1284, 1404, 1424, 1435], "2500": [258, 319, 357], "254508": [520, 869, 1151, 1404], "255": 1435, "256": [265, 357, 431, 1050, 1262, 1404, 1426], "2560": 1050, "259921": [450, 869, 1072, 1404, 1426], "25_000_000": 1413, "26": [40, 42, 174, 179, 180, 181, 182, 186, 223, 357, 479, 512, 897, 991, 1103], "266667": [223, 357, 897, 991], "27": [1, 62, 314, 350, 357, 461, 489, 495, 512, 766, 793, 869, 981, 997, 1094, 1265, 1382, 1404, 1434, 1435], "270": 1429, "28": [310, 315, 357, 380, 497, 514, 869, 1125, 1142, 1384, 1404, 1427, 1429, 1434, 1435], "283185": [665, 869], "2846": 357, "285714": [549, 869, 1178, 1404], "289962": 1429, "28_341_469": 1413, "29": [18, 174, 471, 490, 1095, 1118], "29096": 1435, "290994": [950, 991], "292432": [1009, 1404], "292893": [520, 869, 1151, 1404], "2_color_scal": [42, 357], "2d": [213, 289, 314, 315, 357, 493, 676, 828, 869, 938, 991, 1095, 1102], "2h": [680, 682, 684, 686, 688, 691, 693, 695, 869], "2i": [245, 357, 911, 991], "2m": [997, 1116], "2x": 181, "3": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 29, 37, 39, 41, 42, 44, 45, 46, 47, 48, 52, 53, 58, 59, 60, 61, 62, 66, 67, 85, 97, 103, 106, 108, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 151, 154, 156, 160, 161, 162, 166, 172, 174, 175, 176, 177, 178, 181, 182, 183, 184, 186, 190, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 232, 233, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 364, 365, 369, 375, 380, 381, 382, 383, 385, 396, 397, 398, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 431, 432, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 456, 457, 458, 459, 460, 461, 462, 463, 466, 467, 468, 469, 470, 472, 474, 475, 476, 477, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 492, 493, 495, 496, 497, 499, 500, 501, 502, 503, 504, 512, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 562, 563, 564, 565, 566, 567, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 603, 604, 605, 606, 609, 610, 611, 612, 613, 614, 615, 635, 636, 637, 638, 639, 640, 642, 644, 646, 647, 650, 653, 654, 656, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 707, 709, 710, 711, 714, 715, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 732, 733, 734, 737, 738, 739, 740, 741, 742, 743, 744, 745, 752, 753, 758, 759, 761, 762, 763, 764, 765, 766, 767, 769, 773, 774, 777, 778, 779, 781, 782, 787, 788, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 869, 884, 885, 886, 888, 889, 890, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 919, 920, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 991, 996, 997, 1002, 1003, 1006, 1008, 1010, 1011, 1012, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1051, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1072, 1073, 1074, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1096, 1098, 1099, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1113, 1115, 1116, 1117, 1122, 1125, 1127, 1128, 1130, 1131, 1132, 1134, 1135, 1137, 1141, 1142, 1144, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1165, 1166, 1168, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1198, 1199, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1219, 1220, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1321, 1323, 1324, 1325, 1328, 1329, 1330, 1333, 1334, 1335, 1336, 1338, 1339, 1343, 1344, 1345, 1346, 1347, 1351, 1358, 1359, 1364, 1365, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1383, 1384, 1385, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1404, 1409, 1413, 1414, 1416, 1417, 1419, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1432, 1433, 1434, 1435], "30": [42, 64, 154, 163, 171, 213, 223, 233, 245, 249, 264, 280, 287, 310, 331, 357, 360, 394, 395, 396, 466, 474, 476, 477, 481, 485, 487, 488, 489, 490, 492, 495, 497, 498, 499, 501, 503, 504, 511, 512, 542, 622, 702, 809, 826, 828, 855, 856, 869, 891, 897, 903, 911, 930, 932, 945, 960, 991, 997, 1090, 1098, 1118, 1125, 1126, 1131, 1132, 1139, 1171, 1404, 1409, 1420, 1421, 1424, 1426, 1427, 1429, 1430, 1433, 1435], "300": [310, 357, 541, 654, 671, 869, 997, 1275, 1282, 1284, 1288, 1404, 1424], "3000": 997, "3002": [473, 486, 1097, 1113], "30103": [610, 869, 1426], "3022416320763508302": [1172, 1404], "30_000": [42, 357], "30m": [245, 357, 498, 511, 911, 991, 1126, 1139], "30t16": 503, "31": [62, 67, 151, 152, 166, 175, 176, 177, 178, 223, 304, 357, 473, 474, 478, 486, 490, 493, 496, 504, 721, 751, 806, 809, 818, 828, 848, 897, 991, 997, 1095, 1097, 1098, 1102, 1113, 1118, 1124, 1131, 1132, 1148, 1274, 1327, 1357, 1404, 1428, 1430, 1432, 1435], "31t06": 1131, "32": [8, 60, 70, 72, 78, 82, 92, 175, 176, 177, 178, 255, 260, 289, 357, 614, 615, 637, 676, 702, 869, 916, 938, 991, 1091, 1122, 1262, 1290, 1404, 1421, 1427], "321": [29, 1435], "3212": [755, 1361], "321cba": 1427, "3265500": 997, "32971": [514, 1142], "32974": [514, 1142], "32976": [514, 1142], "32bit": [314, 357], "33": [223, 273, 357, 606, 696, 702, 730, 755, 869, 897, 927, 991, 1290, 1404, 1428], "333": [18, 697, 869, 1147, 1258, 1300, 1404], "33333": 1430, "333333": [251, 357, 639, 779, 826, 869, 914, 991, 1262, 1297, 1393, 1404, 1421], "34": [223, 357, 737, 751, 897, 991, 1344, 1357], "3420": [755, 1361], "343622": [707, 869], "345": [447, 448, 732, 733, 1067, 1068, 1338, 1339], "3450": [1300, 1404], "3456": 997, "34776706224699483": [1314, 1404], "35": [42, 357, 466, 503, 809, 869, 1090, 1404], "350": [357, 360, 541, 654, 869, 1284, 1404, 1409], "3500": [1300, 1404], "356": [478, 494, 513], "356194": [789, 790, 1429], "357": [478, 494, 513], "358": [478, 494, 513], "359": [478, 494, 513], "36": [223, 357, 897, 991, 1432], "360": [464, 665, 869, 1429], "361": 1435, "363961": [602, 1234], "366": [494, 1122], "37": [14, 142, 997], "370h": [520, 869, 1151, 1404], "37338": 1435, "38": [30, 42, 74, 139, 179, 182, 357, 696, 755, 869, 997], "38180177416060584": [689, 869, 1292, 1404], "381802": [689, 869, 1292, 1404], "386294": [611, 869, 1243, 1404, 1426], "389056": [524, 869, 1154, 1404, 1426], "39": [693, 818, 869], "39m": 997, "3_color_scal": [42, 357], "3d12h4m25": [245, 260, 289, 327, 357, 520, 676, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1151, 1404], "3f": [154, 751, 754, 1357, 1360], "3h": [1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "3i": [245, 289, 357, 911, 991], "3rd": [1334, 1358], "3xy": [716, 1322], "4": [1, 8, 11, 15, 19, 27, 37, 39, 41, 42, 44, 45, 48, 58, 59, 60, 61, 62, 66, 67, 85, 106, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 151, 152, 154, 157, 159, 163, 166, 169, 170, 171, 174, 186, 190, 211, 212, 213, 214, 215, 216, 217, 218, 222, 224, 228, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 259, 260, 261, 262, 263, 264, 265, 268, 269, 270, 273, 275, 276, 277, 279, 280, 281, 282, 285, 289, 291, 292, 299, 300, 303, 307, 308, 309, 310, 311, 312, 315, 318, 320, 321, 323, 324, 325, 326, 327, 329, 330, 331, 333, 334, 336, 337, 339, 340, 341, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 369, 375, 379, 380, 381, 382, 384, 386, 398, 405, 406, 407, 409, 410, 411, 413, 414, 415, 417, 419, 420, 421, 422, 424, 431, 442, 443, 444, 447, 448, 450, 451, 452, 456, 457, 460, 461, 462, 464, 467, 474, 477, 478, 486, 494, 495, 496, 497, 499, 500, 503, 505, 508, 510, 513, 517, 518, 520, 524, 525, 527, 528, 529, 531, 532, 533, 536, 537, 538, 539, 540, 543, 545, 547, 548, 549, 550, 560, 561, 565, 566, 567, 574, 575, 576, 577, 578, 579, 581, 582, 584, 592, 594, 595, 596, 597, 598, 599, 600, 604, 605, 610, 613, 614, 615, 635, 637, 639, 640, 642, 644, 646, 647, 650, 651, 652, 655, 656, 658, 659, 660, 661, 664, 666, 670, 671, 672, 673, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 699, 701, 704, 708, 709, 710, 711, 714, 716, 720, 723, 726, 727, 728, 732, 733, 734, 735, 736, 737, 738, 741, 742, 743, 744, 749, 750, 751, 752, 756, 761, 762, 764, 765, 766, 767, 769, 772, 773, 774, 775, 781, 782, 784, 786, 787, 789, 790, 791, 792, 794, 795, 796, 797, 798, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 813, 815, 816, 820, 822, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 846, 848, 849, 850, 851, 852, 853, 854, 856, 857, 858, 859, 865, 869, 884, 885, 886, 888, 889, 890, 891, 892, 896, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 921, 923, 924, 925, 927, 928, 930, 932, 933, 935, 938, 944, 945, 947, 948, 949, 950, 951, 952, 953, 955, 956, 957, 958, 959, 960, 963, 964, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 991, 996, 997, 1001, 1006, 1009, 1016, 1023, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1036, 1038, 1039, 1040, 1041, 1042, 1043, 1050, 1061, 1062, 1067, 1068, 1073, 1074, 1076, 1082, 1087, 1089, 1091, 1101, 1105, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1123, 1125, 1128, 1133, 1136, 1138, 1140, 1141, 1148, 1151, 1155, 1156, 1158, 1159, 1165, 1166, 1168, 1173, 1174, 1177, 1178, 1179, 1180, 1181, 1185, 1188, 1189, 1190, 1191, 1193, 1199, 1206, 1207, 1208, 1209, 1210, 1211, 1216, 1220, 1223, 1224, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1236, 1237, 1252, 1255, 1256, 1259, 1262, 1263, 1264, 1265, 1269, 1270, 1274, 1275, 1276, 1279, 1280, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1303, 1307, 1308, 1311, 1314, 1315, 1316, 1320, 1322, 1326, 1329, 1332, 1334, 1338, 1339, 1341, 1342, 1347, 1349, 1350, 1355, 1356, 1357, 1358, 1362, 1367, 1368, 1371, 1373, 1375, 1381, 1384, 1386, 1388, 1389, 1395, 1404, 1409, 1413, 1414, 1416, 1417, 1419, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1432, 1433, 1434, 1435], "40": [42, 154, 213, 223, 233, 260, 264, 280, 357, 498, 503, 511, 542, 608, 755, 766, 869, 897, 916, 930, 991, 997, 1108, 1139, 1240, 1361, 1420, 1421, 1424, 1427], "400": [326, 357, 506, 507, 509, 957, 991, 1282, 1284, 1288, 1404, 1424], "4000000": [1149, 1404], "400157": 97, "404": [261, 357, 722, 724, 917, 991, 1328, 1330], "4096": 1426, "41": [223, 357, 693, 869, 897, 991, 1421, 1435], "412277": 182, "414214": [711, 869, 1317, 1404, 1426], "4160": 62, "416147": 1429, "4164": [260, 357, 916, 991], "4180": 151, "42": [62, 142, 223, 246, 273, 289, 357, 503, 676, 869, 897, 927, 938, 991, 1172, 1404, 1420, 1434], "424778": [665, 869], "428571": [519, 869, 1150, 1404], "429101": 1421, "4294967296": [48, 357], "43": [223, 289, 357, 461, 676, 693, 869, 897, 938, 991], "4321": [42, 357, 997], "433013": [690, 869, 950, 991], "44": [12, 42, 273, 357, 467, 869, 927, 991], "4411": [260, 357, 916, 991], "44225": [1072, 1404], "444": [12, 42, 357], "44444444444": 12, "45": [42, 223, 289, 357, 474, 498, 511, 676, 693, 716, 723, 763, 790, 809, 828, 855, 856, 869, 897, 938, 991, 997, 1098, 1126, 1131, 1139, 1180, 1322, 1329, 1370, 1404, 1426, 1427, 1429, 1433, 1435], "450": [1284, 1404], "45000": 847, "4500000": 997, "456": [9, 12, 474, 997, 1098, 1380, 1404], "456000": [474, 1098], "456001\u00b5": 997, "4566": [260, 357, 916, 991], "456789": [503, 997, 1127], "456789\u00b5": 997, "456m": 997, "457658": 1429, "459148": [516, 869], "46": 997, "4696": [260, 357, 916, 991], "47": [58, 223, 357, 693, 869, 897, 991, 997, 1421], "470": [932, 991], "47033": [689, 869, 1292, 1404], "47033046033698594": [689, 869, 1292, 1404], "475": [932, 991], "48": [14, 182, 289, 357, 676, 766, 869, 938, 991, 997], "4827": [260, 357, 916, 991], "485": 1435, "49": [223, 357, 897, 991, 997], "492474": [520, 869, 1151, 1404], "498": [261, 357, 917, 991], "4_500_000": 997, "4ab4a": 1427, "4d": [520, 869, 1151, 1404], "4f6228": [42, 357], "4f71": [42, 357], "4x": [257, 357], "5": [1, 7, 8, 11, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 37, 39, 41, 42, 44, 45, 48, 53, 58, 59, 61, 62, 66, 106, 132, 135, 136, 137, 138, 139, 141, 152, 174, 175, 177, 180, 182, 186, 190, 212, 213, 216, 217, 218, 223, 224, 227, 232, 233, 234, 235, 236, 238, 239, 240, 242, 243, 244, 245, 247, 248, 250, 251, 253, 255, 256, 257, 259, 260, 261, 262, 263, 265, 268, 269, 270, 275, 276, 277, 279, 281, 282, 283, 285, 289, 292, 299, 300, 303, 304, 307, 308, 309, 310, 311, 312, 314, 315, 318, 319, 321, 324, 325, 326, 327, 330, 331, 333, 334, 336, 338, 339, 340, 341, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 369, 375, 380, 381, 384, 399, 400, 405, 406, 407, 409, 413, 417, 422, 424, 430, 431, 442, 443, 444, 447, 448, 451, 452, 462, 463, 464, 466, 467, 470, 473, 474, 475, 476, 477, 481, 482, 485, 486, 487, 488, 492, 497, 499, 500, 501, 503, 504, 510, 514, 518, 520, 522, 523, 526, 528, 532, 533, 537, 538, 540, 543, 545, 548, 550, 551, 554, 557, 558, 559, 560, 561, 565, 567, 574, 577, 578, 579, 581, 582, 584, 587, 589, 590, 594, 595, 596, 597, 598, 599, 603, 604, 608, 614, 635, 637, 639, 651, 655, 656, 657, 658, 659, 660, 661, 663, 664, 666, 670, 671, 672, 673, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 687, 690, 692, 693, 694, 695, 696, 699, 710, 716, 726, 727, 728, 731, 732, 733, 752, 756, 767, 769, 773, 774, 775, 779, 787, 789, 790, 792, 793, 794, 795, 796, 798, 800, 802, 803, 804, 805, 806, 807, 809, 812, 813, 814, 815, 816, 820, 822, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 846, 847, 848, 850, 852, 853, 854, 858, 859, 865, 869, 884, 888, 889, 890, 891, 892, 897, 900, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 919, 920, 924, 925, 931, 932, 935, 938, 944, 945, 947, 948, 949, 950, 951, 952, 956, 957, 959, 960, 963, 964, 967, 969, 970, 971, 972, 975, 976, 977, 978, 979, 980, 981, 982, 991, 997, 1006, 1009, 1013, 1016, 1019, 1020, 1023, 1025, 1026, 1027, 1029, 1032, 1036, 1041, 1042, 1043, 1049, 1050, 1061, 1062, 1067, 1074, 1076, 1083, 1087, 1088, 1089, 1090, 1091, 1094, 1097, 1098, 1099, 1100, 1101, 1102, 1106, 1113, 1125, 1127, 1128, 1129, 1131, 1132, 1138, 1140, 1141, 1142, 1148, 1151, 1153, 1155, 1156, 1157, 1168, 1173, 1174, 1177, 1179, 1180, 1184, 1187, 1199, 1206, 1209, 1210, 1211, 1216, 1219, 1222, 1226, 1227, 1228, 1229, 1230, 1231, 1235, 1236, 1240, 1244, 1252, 1259, 1262, 1263, 1264, 1267, 1268, 1269, 1270, 1275, 1276, 1279, 1280, 1281, 1282, 1284, 1285, 1287, 1288, 1290, 1291, 1295, 1299, 1301, 1303, 1308, 1314, 1317, 1322, 1332, 1333, 1334, 1337, 1338, 1358, 1362, 1375, 1382, 1384, 1387, 1388, 1389, 1392, 1393, 1395, 1404, 1409, 1414, 1417, 1419, 1421, 1422, 1423, 1426, 1427, 1428, 1429, 1432, 1434, 1435], "50": [14, 29, 42, 213, 223, 233, 243, 357, 452, 498, 503, 511, 807, 808, 869, 897, 991, 997, 1076, 1089, 1139, 1343, 1404, 1420, 1421], "500": [42, 326, 357, 360, 476, 477, 481, 485, 487, 488, 492, 499, 501, 957, 991, 1112, 1114, 1120, 1282, 1284, 1288, 1404, 1409], "5000": [319, 357, 1387, 1404], "50000": 152, "500000": [485, 1112], "500000000": [492, 1120], "5000555": 997, "500_000": [476, 477, 481, 485, 487, 488, 492, 499, 501], "500m": [1112, 1114, 1120], "51": 997, "512": [48, 153, 257, 357, 431, 661, 869, 1050, 1262, 1404], "51966": [756, 1362], "52": [331, 357, 512, 696, 869, 960, 991], "523599": 1429, "527525": [1293, 1404], "53": [512, 1140, 1432], "533316061": 1413, "533_316_061": 1413, "54": [524, 869, 1195, 1404, 1426, 1435], "540": [464, 665, 869], "540302": 1429, "543": 9, "543081": [454, 869, 1079, 1404], "5432": 153, "54321": 9, "544": 1435, "544705": 798, "549306": [1013, 1404], "55": [42, 60, 357, 546, 551, 869, 1176, 1404, 1423, 1427, 1428], "555": [42, 357], "5555": 997, "55550": 997, "56": [139, 737, 770, 869, 1344], "566371": [665, 869], "567": 29, "56789": [1073, 1163, 1299, 1404], "57": [693, 869, 1296, 1299, 1404, 1429, 1435], "570796": [388, 390, 869, 1008, 1010, 1404, 1429], "575050513": [179, 182], "58": [147, 281, 357], "581139": [1089, 1404], "584963": [609, 869], "587401": [450, 869, 1426], "59": [139, 223, 357, 474, 488, 496, 499, 503, 533, 809, 855, 856, 857, 869, 897, 991, 997, 1098, 1116, 1124, 1127], "59815": [524, 869, 1426], "5_000_555": 997, "5th": [42, 357], "6": [1, 8, 11, 15, 37, 39, 41, 42, 44, 45, 46, 47, 48, 52, 57, 59, 61, 66, 98, 99, 106, 132, 135, 136, 137, 138, 156, 160, 161, 174, 190, 212, 213, 216, 219, 220, 224, 225, 226, 228, 229, 230, 232, 233, 236, 239, 240, 241, 242, 243, 245, 247, 249, 250, 251, 253, 255, 256, 257, 259, 260, 261, 263, 265, 267, 268, 269, 270, 271, 274, 275, 278, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 293, 294, 295, 297, 300, 302, 303, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 321, 323, 324, 325, 327, 328, 329, 330, 331, 333, 334, 340, 350, 351, 357, 360, 361, 375, 380, 384, 405, 406, 407, 409, 412, 417, 443, 444, 447, 448, 460, 461, 467, 470, 474, 478, 482, 489, 493, 494, 495, 506, 507, 509, 512, 513, 516, 518, 527, 528, 533, 537, 543, 545, 548, 567, 568, 569, 578, 582, 595, 596, 597, 598, 602, 615, 651, 655, 662, 665, 666, 667, 672, 674, 676, 679, 681, 683, 685, 687, 690, 692, 693, 694, 696, 699, 704, 710, 716, 721, 732, 733, 756, 767, 769, 774, 782, 784, 786, 793, 795, 800, 802, 803, 804, 806, 809, 813, 816, 822, 829, 830, 834, 848, 852, 859, 865, 869, 884, 888, 891, 892, 894, 895, 898, 899, 901, 902, 903, 904, 907, 908, 909, 911, 912, 914, 915, 916, 917, 918, 920, 921, 929, 932, 934, 935, 936, 938, 939, 940, 942, 944, 945, 947, 948, 949, 952, 955, 956, 959, 960, 963, 964, 971, 981, 982, 991, 997, 1023, 1025, 1026, 1027, 1029, 1036, 1067, 1074, 1078, 1080, 1085, 1086, 1091, 1094, 1106, 1121, 1131, 1141, 1148, 1155, 1168, 1174, 1180, 1200, 1201, 1210, 1214, 1227, 1228, 1229, 1230, 1234, 1252, 1266, 1269, 1270, 1276, 1278, 1286, 1290, 1293, 1296, 1297, 1303, 1308, 1311, 1322, 1327, 1338, 1362, 1374, 1384, 1404, 1409, 1414, 1417, 1419, 1421, 1422, 1426, 1432, 1433, 1435], "60": [42, 213, 233, 281, 357, 481, 487, 488, 499, 510, 533, 693, 751, 869, 1122, 1127, 1138, 1271, 1296, 1357, 1404, 1429], "600": [326, 357, 506, 507, 509, 957, 991, 997], "60000": 485, "600000": 997, "60000000": 492, "60206": [610, 869, 1426], "605551": 850, "605551275463989": 850, "609438": 1426, "60_000": [476, 477, 481, 485, 487, 488, 492, 499, 501], "61": [281, 357], "625": [687, 869], "626172": [718, 1324], "63": [693, 869, 1296, 1404], "63204": 1435, "6331e16": [1376, 1404, 1429], "636253": 1429, "64": [1, 60, 62, 73, 75, 79, 83, 90, 93, 173, 211, 319, 357, 455, 637, 661, 869, 1262, 1265, 1404, 1426], "64030": [756, 1362], "642093": 1429, "647961": 182, "64bit": [174, 668, 869, 1271, 1404], "65": [227, 357, 900, 991, 1145, 1404], "650": [541, 654, 869], "65280": [756, 1362], "654": [29, 848, 949, 991], "65432": 1430, "654321": 623, "65536": 1426, "65552": [430, 1049], "66": [260, 326, 357, 693, 782, 869, 916, 957, 991, 1195, 1290, 1296, 1404], "663053": 139, "666": 997, "666000": 997, "666667": [223, 251, 328, 345, 357, 519, 826, 827, 833, 869, 897, 914, 958, 976, 991, 1150, 1404], "666f6f": [718, 1324], "67500": 847, "676": [261, 357, 917, 991], "678": [716, 723, 1322, 1329], "6789": [30, 997], "67890": 30, "686241": 1421, "69": [693, 869, 1195, 1296, 1404], "693147": [611, 869, 1241, 1243, 1404, 1426], "6_000_000": 1413, "7": [1, 18, 29, 37, 39, 41, 42, 44, 45, 46, 47, 48, 53, 59, 61, 66, 156, 160, 161, 174, 189, 190, 212, 216, 219, 220, 221, 223, 225, 226, 229, 230, 232, 236, 239, 241, 245, 247, 249, 251, 259, 263, 267, 269, 271, 273, 274, 278, 281, 283, 286, 287, 289, 290, 292, 293, 294, 295, 297, 300, 302, 305, 306, 307, 308, 313, 315, 316, 317, 325, 327, 328, 329, 357, 360, 361, 375, 380, 384, 406, 407, 409, 420, 461, 473, 474, 478, 486, 494, 497, 498, 503, 511, 513, 524, 537, 543, 548, 549, 567, 582, 595, 596, 597, 598, 655, 656, 666, 672, 676, 692, 693, 710, 726, 755, 769, 793, 802, 803, 806, 809, 810, 816, 821, 829, 830, 848, 852, 859, 869, 888, 894, 895, 897, 899, 902, 904, 907, 909, 911, 912, 914, 915, 920, 927, 929, 933, 936, 938, 939, 940, 944, 949, 952, 991, 997, 1013, 1026, 1027, 1029, 1039, 1097, 1098, 1102, 1108, 1113, 1125, 1126, 1131, 1139, 1141, 1154, 1178, 1194, 1214, 1227, 1228, 1229, 1230, 1275, 1276, 1295, 1303, 1332, 1361, 1404, 1409, 1414, 1419, 1421, 1422, 1423, 1426, 1428, 1432, 1435], "70": [223, 357, 782, 810, 869, 897, 991, 1195, 1404, 1421], "700": [326, 357, 957, 991], "702963": [42, 357], "7051579356916758811": 168, "707107": [419, 521, 690, 691, 789, 869, 1038, 1152, 1294, 1298, 1404, 1429], "712389": 1429, "714": 1435, "714286": [549, 869, 1178, 1404], "718281828459045": [12, 516, 609, 869, 1145, 1241, 1404], "718282": [524, 869, 1154, 1404, 1426], "720": [464, 665, 869], "7264": 1435, "732051": [1317, 1404], "7415e16": 182, "742": [261, 357, 917, 991], "75": [42, 223, 227, 357, 384, 655, 663, 666, 679, 681, 683, 685, 690, 692, 694, 826, 830, 869, 897, 900, 991, 997, 1089, 1174, 1195, 1267, 1343, 1404, 1421, 1429, 1435], "7500": [258, 357], "7508": 1435, "754": [775, 869], "754888": [516, 869], "761594": [771, 869, 1377, 1404], "764052": 97, "7654": 997, "765431": 1127, "7654321": 29, "76933c": [42, 357], "77": 1131, "78": [9, 147, 737, 1344], "780": 9, "784": [260, 357, 916, 991], "785398": [392, 789, 790, 869, 1012, 1404, 1429], "789": [12, 997], "79": [1195, 1404], "7d": 997, "8": [1, 13, 37, 39, 41, 44, 45, 46, 47, 48, 49, 58, 59, 61, 62, 66, 84, 88, 94, 160, 161, 174, 190, 212, 216, 219, 220, 221, 223, 225, 226, 228, 229, 230, 232, 236, 239, 241, 243, 247, 249, 256, 259, 260, 261, 263, 265, 267, 269, 271, 274, 283, 286, 287, 289, 290, 292, 293, 294, 295, 297, 300, 302, 304, 305, 306, 308, 313, 315, 316, 317, 325, 328, 329, 331, 357, 384, 386, 398, 406, 407, 409, 458, 461, 462, 474, 503, 537, 544, 548, 549, 575, 577, 579, 582, 595, 596, 597, 598, 637, 655, 656, 661, 666, 672, 673, 678, 696, 702, 708, 710, 734, 735, 736, 751, 761, 782, 787, 793, 798, 800, 803, 805, 813, 815, 820, 821, 824, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 848, 850, 853, 854, 858, 869, 888, 894, 895, 897, 899, 901, 902, 904, 907, 909, 912, 915, 916, 917, 920, 921, 932, 936, 939, 940, 944, 949, 952, 960, 991, 997, 1026, 1027, 1029, 1080, 1087, 1108, 1174, 1178, 1194, 1207, 1209, 1211, 1214, 1227, 1228, 1229, 1230, 1262, 1265, 1276, 1279, 1281, 1286, 1290, 1293, 1297, 1299, 1341, 1342, 1357, 1361, 1404, 1413, 1414, 1419, 1421, 1422, 1423, 1426, 1427, 1428, 1432, 1435], "80": [42, 227, 357, 900, 991], "800": [506, 507, 509, 1131], "8000": 153, "803065983": 139, "81": 1426, "814697265625": [1149, 1404], "816497": [305, 357], "8192": 151, "82": [260, 357, 916, 991], "8257e14": 1435, "83": [260, 357, 916, 991], "833": [260, 357, 916, 991], "833333": [345, 976], "848062": 1429, "848808": 182, "85": [42, 147, 357, 1195, 1404, 1435], "850": [541, 654, 869], "8568409950394724": [1145, 1404], "8589934592": [702, 869], "86": 1435, "8601": 1427, "87": 1435, "876": 9, "877809": 1421, "88": [223, 357, 897, 991], "881374": [391, 869, 1011, 1404], "888": [848, 949, 991], "8_000_000": 1413, "8a": [1046, 1047], "8nin": 1435, "9": [1, 9, 37, 39, 41, 42, 44, 45, 48, 52, 53, 58, 66, 190, 212, 221, 223, 236, 238, 247, 251, 259, 261, 263, 265, 281, 289, 291, 292, 295, 307, 308, 325, 329, 331, 350, 357, 380, 384, 386, 398, 406, 407, 409, 416, 418, 458, 461, 464, 474, 503, 529, 537, 548, 555, 575, 582, 593, 601, 639, 655, 656, 665, 672, 676, 677, 678, 689, 692, 693, 704, 708, 723, 755, 763, 766, 796, 802, 803, 806, 809, 821, 857, 869, 897, 907, 912, 914, 915, 917, 920, 938, 940, 952, 960, 981, 991, 997, 1021, 1022, 1026, 1027, 1029, 1035, 1037, 1089, 1102, 1112, 1114, 1120, 1126, 1139, 1140, 1185, 1194, 1207, 1214, 1225, 1233, 1276, 1280, 1281, 1292, 1295, 1296, 1299, 1311, 1329, 1361, 1370, 1404, 1413, 1414, 1419, 1421, 1422, 1423, 1432], "90": [223, 261, 357, 755, 897, 917, 991, 1361, 1421, 1429], "90000": 847, "901234": [1073, 1163, 1299, 1404], "909": [260, 357, 916, 991], "910": [260, 357, 723, 916, 991, 1329], "910t": [716, 723, 1322, 1329], "914": [260, 357, 916, 991], "9223372036854775807": [778, 869], "9223372036854775808": [612, 869], "927295": 1429, "928571": [522, 869, 1153, 1404], "93": [1195, 1404], "94": [381, 869], "9477376373212048": [1195, 1404], "95": [19, 381, 869, 997], "95b3d7": [42, 357], "96": [19, 223, 357, 381, 869, 897, 991, 1195, 1404], "961": 62, "963624": [521, 869, 1152, 1404], "964028": [281, 357], "96_067_179": 1413, "97": [19, 250, 357, 381, 869, 1195, 1404], "9774092659964970114": [542, 869], "978307200": [480, 1104], "978307200000": 502, "978307200000000": [480, 502, 1104, 1130], "978307200000000000": 1130, "978393600": [480, 1104], "978393600000": 502, "978393600000000": [480, 502, 1104, 1130], "978393600000000000": 1130, "978480000": [480, 1104], "978480000000": 502, "978480000000000": [480, 502, 1104, 1130], "978480000000000000": 1130, "978738": 97, "98": [19, 250, 281, 357, 442, 536, 539, 709, 755, 773, 869, 1361], "987": [29, 42, 357, 623], "987000": 997, "9876": 9, "987654": [29, 997], "987654321": 12, "9876543210": 139, "987m": 997, "988": 12, "99": [19, 42, 234, 235, 250, 253, 281, 326, 357, 381, 442, 526, 528, 536, 539, 709, 773, 869, 905, 906, 957, 991, 1131, 1145, 1157, 1404, 1426], "9914e218": 182, "998347": [281, 357], "999": [473, 486, 997, 1097, 1113, 1424, 1435], "999000": 997, "999954": [281, 357], "999999": [496, 761, 809, 855, 856, 857, 997, 1124, 1131, 1367], "999999\u00b5": 997, "9bbb59": [42, 357], "A": [15, 39, 42, 48, 49, 52, 53, 54, 55, 64, 65, 70, 76, 131, 139, 144, 146, 151, 152, 153, 154, 166, 168, 173, 188, 220, 227, 228, 229, 234, 235, 238, 245, 260, 266, 268, 270, 275, 281, 307, 310, 325, 326, 327, 331, 332, 357, 375, 379, 448, 468, 469, 474, 500, 503, 517, 518, 526, 527, 528, 538, 540, 553, 556, 558, 559, 565, 579, 606, 613, 614, 615, 627, 641, 650, 651, 673, 679, 681, 683, 685, 687, 690, 692, 694, 714, 715, 716, 722, 723, 724, 725, 726, 727, 728, 731, 733, 737, 738, 739, 741, 752, 761, 796, 812, 813, 817, 829, 830, 846, 869, 895, 900, 901, 902, 905, 906, 911, 916, 921, 922, 936, 957, 960, 961, 991, 997, 1068, 1092, 1093, 1098, 1128, 1131, 1147, 1157, 1158, 1159, 1211, 1246, 1258, 1282, 1284, 1288, 1293, 1295, 1297, 1320, 1321, 1322, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1337, 1339, 1343, 1344, 1345, 1347, 1358, 1367, 1404, 1413, 1414, 1417, 1430, 1432], "AND": [154, 261, 357, 783, 784, 848, 917, 991, 997, 1423], "ANDs": [433, 869, 1052, 1404], "AS": [304, 357, 848, 849, 949, 991, 1413, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1432, 1434], "And": [759, 1365], "As": [14, 57, 98, 99, 132, 134, 135, 136, 138, 156, 160, 161, 170, 236, 285, 314, 319, 357, 859, 907, 935, 991], "At": [48, 49, 50, 51, 52, 64, 65, 281, 357, 891, 892, 893, 903, 932, 945, 946, 991], "BY": [848, 949, 991, 1413, 1416, 1422, 1431, 1432], "Be": 991, "By": [5, 14, 16, 32, 35, 58, 151, 152, 166, 245, 259, 260, 266, 289, 291, 300, 305, 327, 328, 357, 417, 493, 498, 511, 599, 602, 608, 656, 671, 676, 680, 682, 684, 686, 688, 691, 693, 695, 701, 712, 780, 800, 807, 808, 810, 811, 812, 828, 850, 856, 857, 858, 869, 891, 911, 915, 916, 922, 938, 944, 950, 958, 991, 1036, 1121, 1126, 1139, 1231, 1275, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1307, 1318, 1394, 1404], "For": [16, 41, 42, 53, 54, 55, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 213, 227, 228, 231, 233, 259, 260, 281, 289, 314, 343, 357, 360, 490, 491, 503, 519, 521, 522, 533, 615, 627, 668, 707, 714, 722, 723, 724, 726, 728, 752, 802, 812, 816, 817, 859, 865, 869, 900, 901, 916, 938, 974, 991, 1131, 1149, 1150, 1152, 1153, 1156, 1246, 1271, 1314, 1320, 1328, 1329, 1330, 1332, 1334, 1358, 1382, 1404, 1409], "IF": 1425, "If": [39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 63, 64, 65, 74, 132, 133, 134, 135, 136, 137, 138, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 183, 184, 185, 190, 197, 211, 213, 216, 228, 233, 236, 243, 245, 247, 255, 256, 257, 259, 260, 263, 265, 270, 277, 281, 285, 289, 291, 292, 293, 297, 300, 302, 304, 307, 308, 311, 312, 314, 315, 321, 322, 324, 325, 326, 357, 360, 383, 385, 403, 408, 417, 422, 444, 470, 474, 475, 482, 490, 491, 500, 503, 529, 544, 550, 555, 563, 568, 569, 573, 585, 594, 599, 600, 603, 606, 614, 615, 622, 623, 629, 631, 656, 661, 662, 663, 666, 668, 670, 671, 672, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 701, 703, 707, 708, 713, 723, 724, 726, 728, 729, 741, 742, 743, 744, 746, 747, 748, 751, 752, 753, 754, 758, 761, 768, 779, 783, 785, 788, 792, 793, 794, 797, 798, 800, 802, 803, 807, 808, 810, 811, 812, 815, 816, 822, 823, 824, 826, 827, 828, 829, 830, 834, 840, 842, 843, 844, 845, 846, 851, 852, 853, 856, 857, 859, 860, 869, 891, 892, 893, 903, 907, 911, 915, 916, 921, 926, 932, 934, 935, 936, 938, 942, 944, 945, 946, 947, 949, 954, 956, 957, 966, 974, 984, 991, 996, 997, 1004, 1005, 1019, 1020, 1023, 1028, 1036, 1039, 1041, 1063, 1076, 1094, 1098, 1099, 1106, 1118, 1119, 1128, 1131, 1156, 1173, 1174, 1179, 1185, 1194, 1195, 1199, 1200, 1201, 1205, 1217, 1226, 1231, 1232, 1235, 1238, 1246, 1265, 1266, 1267, 1269, 1271, 1274, 1275, 1276, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1301, 1303, 1305, 1307, 1310, 1314, 1315, 1319, 1329, 1330, 1332, 1334, 1335, 1336, 1343, 1347, 1348, 1349, 1350, 1352, 1353, 1354, 1357, 1358, 1359, 1360, 1364, 1367, 1374, 1375, 1378, 1379, 1382, 1384, 1393, 1404, 1409, 1413, 1414, 1416, 1424, 1427, 1432], "In": [58, 65, 153, 155, 167, 168, 171, 182, 186, 207, 212, 231, 233, 236, 245, 260, 261, 265, 277, 281, 289, 315, 324, 357, 360, 656, 676, 737, 738, 859, 869, 892, 911, 916, 917, 931, 938, 956, 991, 1149, 1156, 1265, 1270, 1344, 1404, 1409], "It": [10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 64, 65, 74, 80, 97, 99, 131, 142, 143, 144, 145, 146, 147, 154, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 203, 209, 223, 261, 266, 273, 280, 304, 314, 319, 326, 334, 343, 357, 360, 361, 369, 370, 375, 462, 463, 470, 482, 544, 614, 615, 626, 663, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 695, 755, 793, 795, 826, 827, 829, 830, 846, 859, 865, 869, 887, 891, 892, 893, 897, 903, 917, 921, 922, 927, 931, 932, 946, 949, 957, 964, 965, 974, 991, 997, 999, 1071, 1087, 1088, 1094, 1106, 1174, 1267, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1296, 1298, 1302, 1304, 1382, 1387, 1404, 1409], "Its": [246, 357, 542, 869, 1172, 1404], "NO": 997, "NOT": [135, 256, 298, 357, 606, 625, 700, 869, 943, 991, 1432], "No": [22, 259, 273, 357, 859, 915, 927, 991], "Not": [213, 259, 357, 558, 559, 869, 891, 903, 915, 932, 945, 991], "ON": 1432, "OR": [261, 357, 785, 786, 907, 917, 991, 997, 1423], "ORs": [438, 869, 1057, 1404], "On": [137, 775, 869, 919, 991], "One": [58, 223, 259, 277, 314, 319, 357, 384, 655, 787, 799, 815, 821, 824, 833, 835, 838, 839, 849, 869, 897, 915, 991, 997, 1089, 1404], "Or": [154, 244, 245, 260, 289, 303, 327, 336, 357, 360, 520, 676, 710, 807, 808, 810, 811, 856, 857, 865, 869, 910, 911, 916, 938, 948, 967, 991, 1151, 1404], "That": [157, 921, 991], "The": [10, 11, 22, 35, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 63, 64, 65, 66, 67, 72, 73, 75, 76, 77, 85, 89, 90, 97, 99, 100, 102, 131, 132, 134, 135, 136, 138, 139, 146, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 182, 183, 184, 186, 188, 190, 197, 213, 215, 223, 224, 226, 227, 228, 229, 232, 233, 236, 243, 244, 245, 246, 251, 257, 259, 260, 261, 264, 265, 273, 279, 281, 285, 289, 290, 291, 292, 295, 296, 297, 304, 309, 314, 315, 320, 323, 327, 331, 332, 334, 335, 336, 343, 357, 367, 371, 372, 373, 374, 375, 382, 425, 426, 427, 428, 442, 443, 462, 463, 465, 468, 469, 470, 478, 482, 489, 493, 494, 498, 500, 503, 511, 512, 519, 521, 522, 523, 526, 529, 533, 534, 542, 551, 576, 581, 606, 614, 615, 629, 656, 663, 666, 669, 670, 671, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 702, 704, 707, 713, 717, 718, 722, 727, 728, 729, 730, 735, 736, 737, 738, 746, 747, 748, 749, 750, 751, 752, 762, 766, 772, 773, 774, 793, 796, 814, 818, 827, 828, 830, 844, 845, 846, 847, 848, 851, 859, 861, 862, 864, 865, 869, 870, 871, 874, 876, 877, 878, 886, 891, 892, 893, 897, 898, 900, 901, 903, 904, 907, 910, 911, 914, 915, 916, 917, 921, 927, 932, 935, 938, 940, 941, 942, 945, 946, 949, 953, 955, 960, 961, 964, 965, 967, 974, 991, 995, 996, 997, 1003, 1006, 1044, 1045, 1046, 1047, 1061, 1062, 1075, 1087, 1088, 1089, 1092, 1093, 1094, 1102, 1106, 1117, 1121, 1122, 1126, 1128, 1131, 1139, 1140, 1148, 1150, 1152, 1153, 1156, 1157, 1160, 1164, 1172, 1180, 1208, 1213, 1246, 1265, 1267, 1269, 1273, 1274, 1275, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1311, 1314, 1319, 1323, 1324, 1333, 1334, 1335, 1336, 1341, 1342, 1343, 1344, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1378, 1384, 1386, 1388, 1389, 1396, 1398, 1400, 1404, 1405, 1410, 1411, 1412, 1413, 1418, 1432, 1433, 1435], "Then": 171, "There": [172, 1432], "These": [1, 34, 42, 141, 148, 153, 154, 207, 321, 357, 868, 869], "To": [41, 65, 227, 228, 234, 235, 261, 357, 452, 468, 469, 527, 528, 714, 721, 722, 723, 726, 737, 738, 747, 748, 749, 750, 759, 869, 900, 901, 905, 906, 917, 991, 997, 1076, 1092, 1093, 1158, 1159, 1320, 1327, 1328, 1329, 1332, 1343, 1344, 1365, 1384, 1404, 1432], "Will": [64, 891, 903, 932, 945, 991, 1404], "With": [160, 255, 300, 357, 417, 599, 701, 869, 891, 944, 991, 1036, 1194, 1231, 1307, 1404], "_": [1, 58, 62, 207, 281, 312, 316, 357, 408, 447, 448, 585, 715, 723, 725, 727, 732, 733, 739, 742, 743, 1067, 1068, 1321, 1329, 1333, 1338, 1339, 1345, 1349, 1379, 1404], "__array_ufunc__": 999, "__arrow_c_schema__": 996, "__call__": 865, "__enter__": 1432, "__exit__": 1432, "__getattr__": 865, "__getitem__": [367, 762], "__init__": [1, 33, 34, 35, 36, 53, 54, 55, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 142, 143, 144, 145, 179, 192, 198, 199, 201, 202, 965, 966, 1432], "__name__": [258, 357], "_auto_init_unhandled_kei": 34, "_awai": [696, 869], "_bar_": 817, "_btm_by_a": [443, 869], "_btm_by_b": [443, 869], "_by_ca": [443, 774, 869], "_by_cb": [443, 774, 869], "_check_ord": [945, 991], "_column_map": 171, "_default_valu": 171, "_deletion_fil": 171, "_df": [1, 59], "_expr": [1, 60], "_foo": 620, "_geventdataframeresult": [65, 892, 991], "_internal_cal": 56, "_is_not_nan": [559, 869], "_isnan": [558, 869], "_isnul": [561, 869], "_kwarg": [891, 932, 991], "_ldf": 1, "_lf": 61, "_lower_boundari": [245, 357, 911, 991], "_mean_squar": [336, 967], "_not_nul": [560, 869], "_o": [447, 448, 732, 733, 1067, 1068, 1338, 1339], "_revers": [640, 644, 673, 869], "_right": [259, 260, 261, 357, 915, 916, 917, 991], "_storage_account": 35, "_storage_options_has_endpoint_url": 34, "_suffix": 645, "_sum": [336, 967], "_table_statist": 171, "_to_even": [696, 869], "_top_by_a": [774, 869], "_top_by_b": [774, 869], "_train": [962, 991], "_type": [934, 991], "_type_check": [945, 991], "_upper_boundari": [245, 357, 911, 991], "_world": 817, "a1": [42, 59, 61, 357], "a101": 1435, "a123": [42, 357], "a2": [42, 59, 61, 357], "a_1": [743, 1349, 1379, 1404], "a_2": [1379, 1404], "a_3": [1379, 1404], "a_a": 849, "a_agg_list": [245, 357, 911, 991], "a_b_doubl": 813, "a_btm_by_a": [443, 869], "a_btm_by_b": [443, 869], "a_by_ca": [443, 774, 869], "a_by_cb": [443, 774, 869], "a_div_2": 1426, "a_div_5": 1426, "a_interpol": [549, 869], "a_is_even": [304, 357, 848, 949, 991], "a_is_integ": 375, "a_is_str": 375, "a_isnul": [561, 869], "a_lag_": 796, "a_log2": 1426, "a_mod_2": 1426, "a_not_nul": [560, 869], "a_revers": [640, 644, 673, 869], "a_rol": 796, "a_suffix": 645, "a_times_2": [615, 869], "a_times_b": [614, 869], "a_top_by_a": [774, 869], "a_top_by_b": [774, 869], "a_txt": 849, "aa": [523, 714, 726, 814, 869, 997, 1089, 1320, 1332, 1404, 1427], "aaa": [1, 42, 357, 714, 726, 762, 764, 765, 997, 1320, 1332], "aaaa": [1046, 1047], "aabcdef": 748, "aad": [1046, 1047], "aag": 28, "aazz": 1427, "ab": [247, 263, 308, 331, 357, 738, 762, 764, 765, 869, 960, 991, 997, 1173, 1199, 1375, 1404, 1425, 1427], "ab12": 738, "ab12cd34ef": 738, "abc": [7, 18, 20, 21, 22, 23, 24, 25, 26, 27, 380, 720, 723, 737, 747, 869, 997, 1326, 1329, 1343, 1344, 1427], "abc123": 1427, "abc456": [737, 1343, 1344, 1427], "abcabc": 738, "abcd": 1427, "abcdeff": 747, "abf": [155, 167, 168], "abl": [106, 153, 606], "about": [53, 54, 55, 106, 146, 148, 153, 707, 714, 722, 723, 726, 737, 738, 869, 1314, 1320, 1328, 1329, 1332, 1343, 1344, 1404, 1435], "abov": [42, 213, 260, 281, 357, 360, 916, 991], "abs_a": 1426, "abs_tol": [175, 176, 177, 178, 551, 869, 1180, 1404], "absolut": [148, 155, 167, 168, 175, 176, 177, 178, 379, 519, 521, 522, 551, 869, 1002, 1150, 1152, 1153, 1180, 1404, 1426], "acc": [802, 803, 816, 842], "accent": 997, "accept": [39, 44, 48, 49, 50, 51, 52, 55, 146, 148, 149, 151, 152, 155, 157, 159, 161, 163, 164, 166, 169, 170, 171, 172, 182, 197, 215, 225, 244, 295, 296, 300, 303, 320, 331, 332, 336, 357, 380, 443, 452, 523, 550, 656, 670, 671, 710, 739, 766, 774, 782, 784, 786, 791, 794, 795, 796, 797, 805, 814, 832, 834, 837, 847, 851, 853, 859, 865, 869, 886, 899, 910, 940, 941, 944, 948, 953, 960, 961, 967, 991, 996, 997, 1062, 1076, 1179, 1265, 1274, 1275, 1307, 1345, 1389, 1404], "access": [39, 44, 48, 49, 50, 51, 52, 59, 60, 61, 62, 157, 161, 163, 164, 166, 168, 169, 170, 171, 197, 211, 219, 257, 281, 290, 291, 304, 357, 367, 724, 762, 894, 949, 962, 991, 996, 1330, 1435], "accord": [290, 357, 663, 807, 808, 810, 811, 856, 857, 869, 1108, 1267, 1404], "accordingli": [146, 149, 151, 152, 157, 158, 159, 160, 161, 162, 163, 164, 165], "account": [42, 139, 154, 168, 357, 493, 519, 521, 522, 869, 1121, 1150, 1152, 1153, 1404], "accumul": [802, 803, 816, 842], "acg": 28, "achiev": [265, 281, 343, 357, 448, 615, 733, 869, 1068, 1246, 1339, 1404], "aco": 1425, "acosd": 1425, "across": [42, 58, 154, 156, 224, 246, 259, 268, 270, 275, 297, 307, 357, 465, 542, 629, 784, 786, 802, 803, 805, 832, 834, 837, 853, 869, 898, 915, 942, 991, 1172, 1404], "action": [41, 357], "activ": [7, 8, 20, 21, 23, 24, 25, 26, 30, 31, 577, 723, 1209, 1329], "actual": [42, 135, 182, 186, 292, 357, 1309, 1404, 1427, 1434], "ad": [40, 42, 135, 156, 245, 266, 304, 314, 319, 321, 326, 331, 332, 357, 386, 503, 526, 622, 623, 766, 802, 803, 848, 869, 911, 922, 949, 957, 960, 961, 991, 997, 1131, 1157, 1382, 1387, 1404], "adbc": [40, 153, 154, 357], "adbc_driver_manag": 174, "adbc_ingest": [40, 357], "add": [41, 42, 43, 48, 52, 152, 213, 233, 245, 265, 331, 332, 333, 334, 357, 360, 463, 642, 643, 644, 645, 663, 766, 812, 816, 859, 869, 911, 915, 960, 961, 962, 963, 964, 991, 1156, 1404, 1409], "add_calendar_dai": 812, "add_calendar_month": 812, "add_calendar_year": 812, "add_chart": [42, 357], "add_dai": 812, "add_format": [42, 357], "add_hour": 812, "add_milli": 812, "add_second": 812, "add_seri": [42, 357], "add_week": 812, "add_worksheet": [42, 357], "addit": [31, 38, 40, 41, 42, 135, 150, 155, 156, 167, 168, 180, 182, 184, 186, 197, 228, 232, 244, 262, 266, 279, 295, 296, 303, 316, 323, 331, 332, 336, 357, 380, 479, 523, 526, 656, 710, 714, 722, 723, 726, 737, 738, 762, 766, 791, 794, 795, 796, 797, 814, 847, 848, 851, 865, 869, 904, 910, 922, 940, 941, 948, 955, 960, 961, 967, 991, 997, 1095, 1103, 1157, 1320, 1328, 1329, 1332, 1343, 1344, 1385, 1404, 1414, 1432], "addition": [66, 156, 190, 290, 357, 997], "address": 723, "adjac": [42, 357], "adjust": [519, 521, 522, 707, 869, 1150, 1152, 1153, 1314, 1404], "adl": [155, 167, 168], "adlf": 168, "advanc": [42, 281, 357, 422, 606, 672, 869, 1041, 1238, 1435], "advantag": [42, 207, 280, 357], "advis": [42, 57, 99, 357], "aedt": 809, "aeiuo": [726, 1332], "af1": 58, "af2": 58, "af3": 58, "affect": [40, 137, 175, 176, 177, 178, 357, 614, 829, 830, 859, 869], "afm": 168, "afoo": [962, 991], "after": [42, 135, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 215, 216, 233, 320, 323, 357, 442, 443, 444, 470, 523, 656, 666, 681, 690, 694, 755, 761, 773, 774, 793, 869, 886, 953, 955, 991, 997, 1061, 1062, 1094, 1156, 1269, 1361, 1367, 1388, 1389, 1404, 1419], "afterward": [57, 859], "ag": [273, 357, 927, 991, 1433], "again": [615, 869], "against": [40, 108, 151, 153, 236, 285, 304, 357, 577, 726, 848, 907, 935, 949, 991, 1209, 1332, 1413, 1432, 1434, 1435], "agg": [244, 245, 281, 289, 357, 381, 433, 438, 441, 443, 529, 531, 536, 539, 614, 615, 656, 709, 710, 774, 781, 807, 810, 830, 846, 869, 891, 892, 903, 910, 911, 932, 934, 938, 945, 991, 997], "agg_group": [819, 869], "agg_list": [614, 869], "aggreg": [148, 151, 152, 155, 163, 167, 238, 244, 245, 267, 269, 271, 274, 277, 281, 282, 283, 289, 305, 306, 325, 328, 336, 337, 339, 341, 357, 381, 433, 438, 441, 529, 545, 614, 656, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 783, 784, 785, 786, 802, 803, 804, 805, 816, 821, 831, 832, 834, 836, 837, 842, 852, 853, 869, 911, 921, 923, 924, 925, 928, 929, 933, 938, 950, 951, 958, 967, 968, 970, 972, 991, 1052, 1057, 1060, 1175, 1281, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1404, 1420, 1422, 1425, 1431], "aggregate_funct": [281, 357, 997], "aho": [715, 725, 727, 739, 1321, 1331, 1333, 1345], "aiosqlit": 153, "alchemy_conn": 153, "algorithm": [214, 357, 387, 715, 725, 727, 739, 787, 869, 885, 991, 1007, 1321, 1331, 1333, 1345, 1404], "alia": [1, 14, 58, 60, 62, 66, 96, 190, 200, 204, 219, 245, 250, 263, 281, 289, 323, 331, 334, 357, 360, 380, 384, 425, 426, 427, 428, 429, 432, 442, 445, 447, 448, 449, 457, 458, 459, 460, 461, 463, 466, 471, 472, 474, 475, 476, 477, 478, 479, 480, 481, 484, 485, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 508, 510, 511, 512, 513, 514, 517, 518, 531, 533, 534, 538, 540, 546, 547, 550, 551, 554, 557, 565, 567, 590, 602, 608, 613, 615, 619, 622, 623, 625, 632, 635, 637, 639, 650, 651, 655, 657, 661, 663, 666, 668, 697, 699, 714, 715, 716, 717, 719, 720, 722, 723, 725, 726, 727, 728, 732, 733, 739, 740, 741, 742, 743, 744, 745, 749, 750, 752, 762, 763, 764, 765, 767, 772, 773, 775, 781, 782, 788, 789, 790, 794, 795, 796, 797, 807, 810, 812, 813, 816, 817, 822, 825, 826, 829, 830, 842, 847, 851, 856, 859, 869, 911, 913, 920, 938, 955, 960, 964, 991, 1044, 1088, 1095, 1096, 1099, 1102, 1103, 1104, 1105, 1111, 1112, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1128, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1164, 1199, 1267, 1272, 1328, 1329, 1333, 1344, 1349, 1350, 1404], "alias": [304, 357, 622, 623, 949, 991], "alic": [151, 369, 1433], "align": [12, 17, 18, 42, 58, 66, 190, 357, 1433], "align_fram": [66, 190], "align_ful": [66, 190], "align_inn": [66, 190], "align_left": [66, 190], "align_right": [66, 190], "all": [1, 4, 5, 8, 15, 19, 22, 27, 32, 39, 41, 42, 48, 49, 50, 51, 52, 53, 54, 55, 58, 64, 71, 117, 119, 132, 133, 137, 147, 151, 152, 153, 155, 156, 157, 159, 161, 162, 163, 166, 167, 169, 170, 179, 180, 183, 186, 207, 212, 214, 216, 223, 225, 227, 228, 235, 247, 252, 254, 256, 257, 258, 259, 261, 262, 263, 264, 270, 272, 276, 277, 281, 284, 286, 290, 291, 292, 296, 302, 303, 307, 308, 312, 314, 315, 319, 322, 324, 325, 326, 327, 332, 334, 357, 360, 375, 384, 386, 408, 443, 456, 462, 468, 469, 470, 471, 482, 503, 511, 523, 528, 541, 542, 545, 548, 553, 556, 560, 561, 566, 576, 577, 585, 603, 606, 614, 636, 639, 640, 642, 643, 644, 645, 646, 647, 654, 656, 666, 671, 673, 678, 696, 702, 708, 710, 716, 720, 723, 724, 728, 731, 734, 738, 746, 747, 748, 752, 774, 784, 793, 795, 802, 803, 804, 805, 814, 816, 821, 822, 825, 829, 830, 834, 842, 851, 852, 853, 859, 865, 869, 875, 881, 884, 885, 888, 891, 892, 893, 897, 899, 900, 901, 903, 906, 915, 917, 921, 926, 932, 936, 941, 945, 947, 948, 954, 956, 957, 961, 962, 964, 991, 997, 1028, 1087, 1089, 1092, 1093, 1094, 1095, 1106, 1131, 1139, 1173, 1181, 1193, 1199, 1208, 1209, 1217, 1235, 1238, 1269, 1275, 1281, 1315, 1322, 1326, 1329, 1330, 1333, 1334, 1337, 1344, 1352, 1353, 1354, 1358, 1375, 1384, 1404, 1408, 1409, 1414, 1416, 1421, 1422, 1427, 1431, 1432, 1434, 1435], "all_compat": 1416, "all_data": 1432, "all_horizont": [227, 228, 357, 783, 859, 900, 901, 991], "all_stat": 32, "alloc": [148, 151, 152, 231, 284, 357, 869, 966, 1149, 1404], "allow": [1, 8, 41, 42, 49, 50, 51, 52, 56, 57, 66, 99, 108, 133, 153, 156, 166, 168, 169, 170, 171, 172, 179, 182, 183, 186, 190, 207, 211, 257, 260, 262, 266, 290, 291, 293, 315, 316, 319, 322, 335, 357, 375, 445, 449, 493, 500, 503, 551, 594, 622, 623, 668, 698, 751, 753, 754, 869, 893, 915, 916, 921, 922, 926, 931, 934, 946, 954, 962, 991, 995, 997, 1121, 1128, 1131, 1180, 1226, 1246, 1271, 1301, 1357, 1359, 1360, 1384, 1385, 1404, 1427, 1435], "allow_alias": [622, 623], "allow_chunk": [182, 186], "allow_copi": [133, 211, 315, 357, 1384, 1404], "allow_dupl": [663, 869, 1267, 1404], "allow_exact_match": [260, 357, 916, 991], "allow_infin": [182, 186], "allow_masked_out": [182, 186], "allow_missing_column": [163, 171], "allow_nul": [179, 182, 186, 1435], "allow_object": 828, "allow_parallel": [260, 357, 915, 916, 991], "allow_pyarrow_filt": 172, "allow_time_zon": [182, 183, 186], "allowed_dtyp": [182, 183, 186, 1435], "almost": [42, 65, 264, 265, 343, 357, 551, 751, 753, 754, 869, 892, 991, 995, 1246, 1357, 1359, 1360, 1404], "along": [10, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 197, 357, 991], "alpha": [519, 521, 522, 869, 997, 1150, 1152, 1153, 1404], "alpha_i": [520, 869, 1151, 1404], "alphabet": [997, 1435], "alphanumer": [759, 997, 1365], "alreadi": [40, 41, 107, 314, 357, 577, 630, 779, 869, 945, 991, 1087, 1209, 1393, 1404], "also": [10, 29, 39, 42, 49, 50, 51, 52, 57, 64, 65, 132, 135, 139, 153, 156, 157, 162, 163, 166, 171, 181, 182, 185, 186, 192, 201, 207, 229, 244, 245, 266, 273, 277, 281, 289, 291, 295, 303, 314, 326, 331, 334, 357, 367, 458, 461, 470, 482, 493, 497, 503, 529, 550, 615, 622, 623, 656, 666, 670, 671, 696, 710, 737, 738, 739, 746, 747, 762, 793, 802, 803, 806, 809, 816, 818, 842, 859, 868, 869, 875, 891, 892, 893, 903, 910, 911, 922, 927, 931, 932, 938, 940, 945, 946, 948, 957, 960, 962, 964, 991, 997, 1094, 1106, 1125, 1179, 1269, 1274, 1275, 1299, 1322, 1343, 1344, 1345, 1352, 1404, 1408, 1414, 1416, 1419, 1423, 1427, 1430, 1432, 1433], "alt": [357, 360, 1404, 1409], "altair": [174, 357, 360, 1404, 1409], "alter": [931, 991], "altern": [42, 192, 357, 865, 1424], "although": [304, 357, 949, 991], "alwai": [15, 39, 41, 49, 55, 70, 74, 80, 151, 157, 161, 163, 215, 244, 259, 260, 264, 265, 320, 343, 357, 442, 443, 509, 614, 626, 751, 773, 774, 829, 859, 869, 886, 893, 915, 916, 921, 953, 991, 997, 1061, 1062, 1066, 1137, 1246, 1357, 1388, 1389, 1404, 1413, 1414, 1432, 1435], "am": [740, 1346], "amarillo": 1427, "amaz": [357, 360, 1404, 1409], "amazonaw": 34, "ambigu": [496, 497, 498, 511, 751, 754, 809, 1124, 1125, 1126, 1139, 1357, 1360], "america": 810, "amount": [53, 57, 75, 99, 161, 166, 169, 170, 375, 615, 812, 869, 1421], "amsterdam": [497, 1125], "an": [1, 10, 32, 35, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 56, 59, 61, 62, 66, 74, 75, 76, 97, 104, 108, 111, 114, 121, 123, 132, 134, 135, 138, 146, 148, 151, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 180, 182, 186, 190, 197, 213, 217, 218, 219, 225, 231, 234, 238, 240, 245, 256, 257, 258, 260, 261, 265, 266, 277, 281, 286, 287, 289, 290, 294, 304, 309, 315, 319, 321, 325, 326, 331, 334, 343, 357, 360, 375, 382, 404, 407, 421, 425, 427, 430, 433, 436, 438, 439, 441, 458, 459, 460, 461, 462, 463, 470, 474, 475, 493, 497, 500, 514, 520, 528, 529, 534, 535, 536, 539, 574, 577, 581, 583, 605, 606, 614, 615, 627, 629, 639, 640, 661, 662, 663, 671, 672, 676, 678, 679, 681, 683, 685, 687, 690, 692, 694, 713, 714, 717, 723, 726, 730, 751, 753, 754, 756, 758, 772, 775, 783, 788, 792, 794, 798, 800, 807, 808, 810, 811, 813, 815, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 840, 842, 843, 847, 851, 856, 857, 859, 860, 865, 869, 888, 889, 890, 892, 897, 899, 903, 907, 911, 916, 917, 921, 922, 936, 938, 939, 949, 957, 960, 962, 964, 966, 974, 988, 991, 995, 996, 997, 1024, 1027, 1040, 1044, 1046, 1049, 1052, 1055, 1057, 1058, 1060, 1075, 1077, 1083, 1084, 1085, 1086, 1087, 1094, 1098, 1128, 1142, 1149, 1151, 1164, 1194, 1206, 1209, 1213, 1215, 1237, 1246, 1275, 1276, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1302, 1304, 1319, 1320, 1323, 1329, 1332, 1336, 1357, 1359, 1360, 1362, 1364, 1384, 1386, 1404, 1422, 1424, 1427, 1431, 1432, 1434], "ana": [740, 1346], "anan": [740, 1346], "ananab": 1427, "and_": 869, "ang": 1427, "angl": [789, 790], "ani": [4, 10, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 70, 73, 74, 80, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 148, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 193, 194, 195, 196, 197, 203, 207, 209, 212, 213, 215, 221, 225, 227, 228, 233, 235, 236, 238, 240, 255, 257, 258, 259, 260, 261, 264, 265, 266, 270, 279, 280, 285, 286, 290, 291, 292, 304, 307, 310, 311, 314, 315, 316, 319, 320, 322, 325, 326, 334, 357, 360, 361, 369, 370, 375, 380, 383, 384, 408, 442, 443, 444, 462, 463, 470, 482, 499, 517, 518, 528, 529, 533, 536, 538, 540, 544, 555, 565, 572, 577, 585, 595, 596, 597, 598, 613, 614, 615, 622, 632, 635, 637, 650, 651, 655, 660, 663, 670, 671, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 695, 699, 703, 713, 715, 729, 747, 748, 749, 750, 751, 753, 754, 755, 756, 758, 767, 773, 774, 775, 782, 783, 784, 786, 793, 795, 797, 798, 799, 826, 827, 828, 829, 830, 834, 846, 853, 859, 869, 886, 891, 892, 893, 899, 900, 901, 903, 906, 907, 915, 916, 917, 922, 930, 931, 932, 935, 936, 946, 949, 953, 954, 957, 964, 965, 966, 991, 995, 996, 997, 999, 1001, 1004, 1028, 1061, 1062, 1071, 1087, 1088, 1094, 1106, 1127, 1146, 1147, 1156, 1159, 1165, 1167, 1169, 1174, 1185, 1194, 1197, 1204, 1209, 1217, 1227, 1228, 1229, 1230, 1245, 1246, 1257, 1258, 1267, 1274, 1275, 1276, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1296, 1298, 1302, 1303, 1319, 1321, 1335, 1357, 1359, 1360, 1362, 1364, 1382, 1383, 1384, 1385, 1387, 1388, 1389, 1404, 1409, 1432, 1435], "anna": [273, 357, 927, 991], "annex": [734, 1340], "announc": [934, 991], "anoth": [101, 181, 216, 224, 230, 244, 260, 297, 357, 430, 465, 472, 549, 581, 619, 625, 629, 670, 680, 682, 684, 686, 688, 691, 693, 695, 726, 869, 888, 898, 910, 916, 942, 962, 991, 1049, 1087, 1096, 1148, 1156, 1178, 1213, 1274, 1275, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1332, 1404, 1426, 1427], "another_index": 846, "anti": [259, 357, 915, 974, 991, 1302, 1304, 1404, 1420], "antipattern": [151, 157, 161, 163], "any_horizont": [785, 859], "anyth": [41, 290, 357], "anywher": [429, 432, 751, 753, 754, 1357, 1359, 1360], "ap": 1427, "apach": [37, 44, 45, 48, 133, 149, 153, 154, 157, 159, 168, 210, 357, 1000], "apaya": [752, 1358], "api": [0, 34, 39, 44, 48, 49, 50, 51, 52, 133, 161, 163, 164, 166, 169, 170, 171, 172, 192, 197, 211, 265, 343, 357, 615, 829, 830, 869, 974, 991, 1246, 1404, 1431], "apia": [471, 1095], "app": [449, 745, 1069, 1351], "appear": [42, 70, 135, 177, 178, 357, 738, 777, 869, 997, 1391, 1404, 1433], "append": [40, 41, 43, 182, 233, 259, 260, 261, 357, 667, 859, 869, 915, 916, 917, 991, 1156, 1404], "appl": [220, 249, 259, 286, 287, 310, 338, 339, 341, 342, 344, 345, 346, 347, 348, 349, 350, 357, 443, 445, 449, 673, 719, 745, 774, 869, 915, 936, 969, 970, 972, 973, 975, 976, 977, 978, 979, 980, 981, 991, 1064, 1069, 1325, 1351, 1420, 1427], "appli": [12, 22, 39, 42, 49, 64, 66, 131, 146, 153, 166, 179, 182, 186, 190, 207, 223, 238, 261, 264, 265, 280, 303, 304, 314, 343, 357, 396, 473, 476, 477, 478, 481, 483, 484, 485, 486, 487, 488, 489, 492, 494, 495, 499, 501, 512, 513, 515, 521, 522, 614, 615, 660, 679, 680, 681, 682, 685, 686, 692, 693, 710, 737, 738, 751, 753, 754, 758, 791, 802, 803, 816, 829, 830, 842, 848, 859, 869, 897, 917, 921, 930, 948, 949, 974, 991, 997, 1076, 1097, 1100, 1101, 1102, 1105, 1107, 1108, 1112, 1113, 1114, 1116, 1117, 1120, 1122, 1123, 1127, 1129, 1140, 1141, 1143, 1152, 1153, 1246, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1291, 1294, 1295, 1296, 1298, 1343, 1344, 1357, 1359, 1360, 1364, 1404, 1413], "applic": [55, 154, 315, 357, 615, 869], "apply_on_context_ent": 207, "appropri": [42, 172, 236, 285, 315, 357, 503, 666, 869, 907, 935, 991, 1131, 1269, 1404], "approx": [387, 869], "approx_n_uniqu": [357, 869, 991, 1404], "approxim": [48, 214, 357, 387, 520, 787, 869, 885, 991, 1007, 1151, 1404, 1426, 1435], "april": [500, 1128, 1427, 1428], "ar": [1, 12, 13, 19, 22, 32, 34, 36, 39, 41, 42, 44, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 64, 65, 66, 97, 98, 99, 106, 112, 128, 132, 133, 134, 135, 136, 137, 138, 139, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 180, 182, 183, 184, 186, 190, 197, 207, 211, 215, 216, 221, 223, 227, 228, 231, 236, 237, 238, 243, 244, 245, 257, 259, 260, 261, 262, 264, 265, 272, 273, 279, 281, 285, 289, 290, 291, 292, 295, 296, 300, 303, 310, 312, 314, 315, 316, 319, 320, 324, 326, 327, 331, 332, 335, 336, 357, 371, 372, 373, 374, 375, 383, 385, 399, 417, 422, 430, 442, 443, 444, 452, 458, 460, 461, 470, 498, 503, 511, 516, 518, 519, 520, 521, 522, 529, 544, 550, 551, 553, 555, 556, 558, 559, 560, 561, 563, 568, 569, 599, 603, 606, 651, 656, 662, 663, 666, 669, 670, 671, 672, 676, 677, 680, 681, 682, 684, 686, 688, 689, 690, 691, 693, 694, 695, 699, 701, 704, 707, 709, 710, 715, 724, 728, 730, 731, 735, 736, 737, 738, 739, 741, 752, 754, 756, 761, 766, 768, 772, 773, 774, 783, 784, 785, 786, 791, 794, 795, 796, 797, 798, 805, 807, 808, 810, 811, 826, 827, 832, 834, 837, 847, 851, 852, 853, 856, 857, 859, 861, 862, 864, 868, 869, 870, 871, 874, 875, 876, 877, 878, 881, 884, 886, 891, 892, 893, 897, 900, 901, 907, 910, 911, 915, 916, 917, 921, 926, 927, 932, 934, 935, 936, 938, 940, 941, 944, 945, 946, 948, 953, 956, 957, 960, 961, 962, 967, 991, 995, 997, 1004, 1005, 1019, 1020, 1036, 1039, 1041, 1049, 1061, 1062, 1070, 1076, 1085, 1086, 1094, 1126, 1131, 1139, 1145, 1147, 1149, 1150, 1151, 1152, 1153, 1160, 1162, 1174, 1179, 1180, 1183, 1185, 1186, 1188, 1189, 1190, 1191, 1195, 1200, 1201, 1231, 1235, 1238, 1258, 1266, 1267, 1269, 1273, 1274, 1275, 1276, 1280, 1283, 1285, 1287, 1289, 1291, 1292, 1294, 1296, 1298, 1303, 1307, 1311, 1314, 1321, 1330, 1334, 1336, 1341, 1342, 1343, 1344, 1347, 1358, 1360, 1362, 1367, 1374, 1379, 1382, 1384, 1385, 1386, 1388, 1389, 1396, 1398, 1400, 1404, 1405, 1408, 1410, 1411, 1412, 1414, 1416, 1419, 1424, 1432, 1435], "arbitrari": [53, 87, 240, 357, 465, 614, 615, 829, 830, 869, 898, 991, 997], "arbitrarili": [265, 357], "arcco": [869, 1404], "arccosh": [869, 1404], "arcsin": [869, 1404], "arcsinh": [869, 1404], "arctan": [789, 790, 869, 1404], "arctan2": 790, "arctanh": [869, 1404], "aren": [39, 49, 357, 991], "arg": [33, 57, 68, 69, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 148, 200, 204, 236, 264, 280, 285, 357, 396, 660, 791, 817, 869, 907, 930, 935, 991, 1246, 1404, 1417], "arg_max": [869, 1404], "arg_min": [869, 1404], "arg_sort": [869, 1404], "arg_tru": [792, 869, 1404], "arg_uniqu": [869, 1404], "arg_wher": [397, 869], "argmax": [614, 869], "argument": [38, 41, 48, 97, 146, 148, 150, 151, 155, 163, 166, 167, 182, 184, 186, 197, 221, 225, 232, 244, 245, 260, 264, 279, 280, 289, 295, 296, 303, 316, 323, 327, 331, 332, 336, 357, 470, 498, 511, 523, 529, 550, 614, 615, 656, 660, 676, 710, 746, 747, 748, 755, 766, 783, 789, 790, 791, 793, 794, 795, 796, 797, 798, 799, 800, 814, 829, 830, 847, 851, 859, 865, 869, 899, 904, 910, 911, 916, 921, 930, 938, 940, 941, 948, 955, 960, 961, 967, 988, 991, 997, 1094, 1126, 1139, 1179, 1246, 1352, 1353, 1354, 1361, 1385, 1404, 1426, 1427], "aris": 153, "arithmet": [238, 357], "arm": 174, "arm64": 174, "around": [39, 49, 357, 991], "arr": [315, 357, 371, 861, 1384, 1396, 1404, 1427], "arr_bar": 1422, "arr_foo": 1422, "arrai": [132, 136, 151, 152, 155, 163, 167, 209, 213, 231, 232, 309, 314, 315, 316, 357, 363, 364, 365, 375, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 430, 458, 459, 460, 461, 572, 588, 589, 590, 591, 593, 602, 603, 605, 608, 610, 614, 672, 679, 681, 683, 685, 687, 690, 692, 694, 700, 772, 795, 813, 827, 848, 869, 904, 991, 996, 997, 999, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1049, 1083, 1084, 1085, 1086, 1091, 1149, 1204, 1220, 1221, 1222, 1223, 1225, 1233, 1234, 1235, 1237, 1240, 1242, 1243, 1276, 1282, 1284, 1288, 1293, 1295, 1297, 1305, 1309, 1378, 1382, 1384, 1385, 1386, 1404, 1425, 1427, 1431, 1434], "array_agg": 1425, "array_contain": 1425, "array_get": 1425, "array_length": 1425, "array_low": 1425, "array_mean": 1425, "array_revers": 1425, "array_sum": 1425, "array_to_str": 1425, "array_uniqu": 1425, "array_upp": 1425, "arraylik": [1091, 1404], "arrow": [44, 45, 50, 132, 133, 153, 154, 157, 159, 169, 210, 257, 291, 292, 309, 311, 315, 357, 991, 1000, 1378, 1384, 1404], "arrowarrayexport": [132, 133], "arrowinvaliderror": [41, 357], "arrowschemaexport": 996, "arrowstreamexport": [132, 133], "as_": [1404, 1409], "as_arrai": 827, "as_dict": [152, 279, 357], "as_expr": 997, "as_seri": [216, 310, 357, 888, 991, 997], "asarrai": [209, 999], "ascend": [245, 273, 289, 357, 656, 676, 869, 911, 927, 938, 991], "ascii": [7, 22, 447, 448, 715, 725, 727, 728, 732, 733, 739, 741, 752, 761, 997, 1067, 1068, 1321, 1331, 1333, 1334, 1338, 1339, 1345, 1347, 1358, 1367], "ascii_borders_onli": 22, "ascii_borders_only_condens": 22, "ascii_case_insensit": [715, 725, 727, 739, 1321, 1331, 1333, 1345], "ascii_ful": 22, "ascii_full_condens": 22, "ascii_horizontal_onli": 22, "ascii_lett": 1435, "ascii_markdown": 22, "ascii_no_bord": 22, "ascii_onli": 997, "ascii_t": 207, "ascii_uppercas": [325, 357], "asd": [716, 723, 1322, 1329], "asia": [139, 997, 1100, 1101, 1129], "asid": 503, "asin": 1425, "asind": 1425, "asof": [260, 357, 916, 991], "asofjoinstrategi": [260, 357, 916, 991], "assert": [175, 176, 177, 178, 182, 186, 289, 357, 881, 997], "assert_frame_equ": [176, 177, 230, 357, 1435], "assert_frame_not_equ": [175, 178], "assert_series_equ": [175, 178, 1148, 1404, 1435], "assert_series_not_equ": [176, 177], "assert_someth": 180, "assertionerror": [175, 176, 177, 178], "assign": [180, 213, 245, 342, 357, 422, 606, 656, 666, 743, 744, 869, 911, 973, 991, 1041, 1238, 1269, 1349, 1350, 1404], "associ": [40, 42, 58, 154, 156, 181, 184, 292, 357, 996, 1415, 1417, 1421], "assum": [34, 292, 357, 921, 974, 991, 1427], "assume_rol": [10, 34], "assumpt": [614, 829, 869], "async": [64, 65, 153, 892, 991], "async_engin": 153, "asynchron": [65, 153, 892, 991], "asyncio": [65, 153, 892, 991], "asyncresult": [65, 892, 991], "asyncsurrealdb": 153, "ata": 28, "atan": 1425, "atan2": [789, 790, 1425], "atan2_ab": 1429, "atan2d": [790, 1425], "atan2d_ab": 1429, "atand": 1425, "atg": 28, "atgataaaggag": 28, "atol": [175, 176, 177, 178], "attack": 172, "attain": [710, 869], "attempt": [1, 11, 49, 50, 51, 52, 64, 65, 213, 465, 869, 891, 892, 893, 898, 903, 932, 945, 946, 991], "attr": [357, 360, 1404, 1409], "attribut": [67, 70, 73, 74, 75, 76, 77, 85, 89, 142, 143, 144, 145, 179, 198, 199, 201, 202, 357, 360, 371, 373, 374, 861, 862, 864, 865, 870, 871, 874, 876, 877, 878, 965, 966, 991, 1396, 1398, 1400, 1404, 1405, 1409, 1410, 1411, 1412], "attributeerror": 1, "audi": [310, 357, 673, 869], "august": 503, "australia": 809, "auth": 36, "authent": [41, 155, 163, 165, 166, 167, 168, 169, 171, 192, 357], "author": 1, "auto": [10, 11, 39, 41, 44, 48, 49, 50, 51, 52, 64, 65, 66, 132, 134, 135, 136, 138, 155, 160, 161, 163, 164, 166, 167, 169, 170, 171, 190, 192, 197, 321, 357, 891, 892, 893, 903, 932, 945, 946, 991, 1435], "autofilt": [42, 357], "autofit": [42, 357], "autogener": [151, 152, 156, 162, 166], "automat": [8, 39, 49, 66, 132, 134, 135, 136, 138, 139, 148, 151, 152, 153, 154, 160, 161, 163, 166, 168, 169, 170, 182, 186, 188, 190, 192, 304, 357, 614, 671, 746, 747, 748, 848, 869, 949, 991, 1274, 1275, 1352, 1353, 1354, 1387, 1404, 1414, 1416, 1419, 1432], "autumn": [737, 738], "avail": [42, 48, 52, 141, 153, 154, 155, 164, 167, 168, 180, 194, 195, 196, 207, 266, 281, 304, 356, 357, 371, 373, 374, 503, 666, 848, 861, 862, 864, 868, 869, 870, 871, 874, 875, 876, 877, 878, 881, 922, 949, 989, 990, 991, 997, 1089, 1269, 1396, 1398, 1400, 1404, 1405, 1408, 1410, 1411, 1412, 1423], "available_timezon": [73, 997], "averag": [42, 357, 519, 520, 521, 522, 666, 869, 1150, 1151, 1152, 1153, 1269, 1404, 1421], "avg": 1425, "avocado": 1427, "avoid": [132, 153, 182, 186, 236, 285, 291, 357, 382, 869, 907, 935, 991], "avro": [37, 149, 200, 357, 881], "avrocompress": [37, 357], "aw": [34, 39, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 197, 357, 991], "awai": [696, 869, 1426], "await": [65, 153, 892, 985, 991], "await_result": [934, 991], "awar": [12, 153, 257, 291, 292, 311, 357, 520, 715, 725, 727, 739, 754, 869, 991, 1151, 1321, 1331, 1333, 1345, 1360, 1404], "aws_access_key_id": [41, 155, 167, 171, 357], "aws_region": [41, 167, 171, 357], "aws_secret_access_kei": [41, 155, 167, 171, 357], "awsassumerolekwarg": 34, "axi": [272, 324, 357, 360, 789, 790, 926, 956, 991, 1404, 1409], "aya": [741, 1347, 1358], "az": [155, 167, 168], "azur": [35, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 197, 357, 991], "azure_storage_account_kei": [155, 167, 168], "azure_storage_account_nam": [155, 167, 168], "b": [1, 12, 37, 39, 41, 44, 45, 48, 53, 61, 66, 89, 97, 103, 106, 132, 133, 134, 135, 136, 137, 138, 139, 142, 147, 151, 153, 156, 190, 211, 212, 213, 214, 215, 217, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 234, 235, 236, 238, 239, 241, 242, 243, 244, 245, 246, 247, 249, 250, 252, 254, 255, 256, 257, 258, 259, 262, 263, 264, 266, 267, 269, 271, 274, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 290, 291, 292, 293, 294, 295, 300, 302, 303, 304, 305, 306, 308, 309, 310, 312, 313, 315, 316, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 375, 380, 382, 383, 385, 386, 396, 398, 403, 408, 426, 427, 428, 429, 430, 431, 432, 433, 438, 441, 443, 444, 456, 463, 467, 500, 503, 523, 525, 527, 528, 529, 531, 541, 542, 545, 548, 549, 550, 551, 553, 556, 558, 559, 560, 561, 566, 572, 577, 579, 585, 595, 596, 597, 598, 614, 615, 620, 636, 639, 640, 641, 642, 643, 644, 645, 653, 654, 656, 660, 663, 666, 670, 671, 673, 675, 702, 708, 710, 717, 721, 726, 730, 737, 738, 762, 763, 774, 777, 781, 783, 784, 785, 786, 787, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 813, 814, 815, 816, 817, 820, 821, 822, 824, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 844, 845, 846, 848, 850, 851, 852, 853, 854, 858, 865, 869, 884, 885, 886, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 915, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 930, 931, 932, 933, 935, 936, 937, 939, 940, 944, 945, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 975, 976, 977, 978, 979, 980, 981, 982, 991, 997, 1003, 1006, 1028, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1071, 1088, 1091, 1128, 1131, 1145, 1148, 1149, 1156, 1159, 1179, 1180, 1185, 1204, 1227, 1228, 1229, 1230, 1267, 1272, 1323, 1327, 1332, 1336, 1343, 1344, 1368, 1370, 1371, 1373, 1385, 1391, 1404, 1414, 1416, 1417, 1419, 1420, 1421, 1422, 1427, 1428, 1429, 1432], "b1": [59, 61], "b2": [59, 61], "b345": [42, 357], "b4": [42, 357], "b_b": [304, 357], "b_btm_by_a": [443, 869], "b_btm_by_b": [443, 869], "b_by_ca": [443, 774, 869], "b_by_cb": [443, 774, 869], "b_div_a": [250, 357], "b_is_not_nan": [559, 869], "b_isnan": [558, 869], "b_isnul": [561, 869], "b_not_nul": [560, 869], "b_revers": [640, 644, 673, 869], "b_suffix": 645, "b_sum": [336, 967], "b_top_by_a": [774, 869], "b_top_by_b": [774, 869], "ba": [465, 523, 629, 745, 814, 869, 997], "back": [4, 58, 171, 233, 245, 297, 315, 316, 357, 629, 656, 738, 869, 891, 903, 911, 932, 942, 945, 966, 991, 1156, 1385, 1404], "backend": [41, 153, 154, 155, 167, 168, 357, 360, 1404, 1409], "background": [64, 65, 357, 361, 891, 892, 990, 991], "backward": [48, 52, 235, 260, 357, 425, 470, 491, 528, 869, 906, 916, 991, 1044, 1094, 1119, 1159, 1404], "backward_fil": [528, 534, 869, 1159, 1164, 1404], "bad": [737, 738, 1343, 1344], "balanc": [185, 187, 1435], "ballon_dor": [722, 724, 1328, 1330], "banana": [220, 310, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 443, 673, 719, 745, 774, 869, 970, 972, 975, 976, 977, 978, 979, 980, 981, 1427], "banded_column": [42, 357], "banded_row": [42, 357], "banker": [696, 869, 1299, 1404], "bar": [37, 39, 41, 44, 45, 46, 47, 48, 147, 160, 161, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 233, 236, 238, 240, 241, 242, 247, 249, 250, 251, 253, 259, 263, 265, 267, 268, 269, 270, 271, 274, 275, 278, 281, 283, 285, 286, 287, 290, 293, 294, 295, 297, 302, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 322, 323, 328, 329, 330, 335, 357, 360, 446, 465, 547, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 707, 716, 718, 721, 723, 724, 740, 742, 744, 749, 750, 787, 798, 799, 800, 815, 820, 821, 824, 825, 831, 833, 835, 836, 838, 839, 847, 850, 854, 858, 859, 865, 869, 888, 894, 895, 899, 900, 901, 902, 907, 913, 914, 915, 929, 935, 936, 939, 940, 954, 955, 959, 991, 996, 997, 1065, 1217, 1314, 1322, 1324, 1327, 1329, 1330, 1346, 1350, 1355, 1356, 1404, 1418, 1420, 1421, 1422, 1424, 1427, 1430], "bar2": 1427, "bar22": [238, 357], "bar_": 742, "bar_3": [312, 357], "bar_4": [312, 357], "bar_a": [281, 357], "bar_at_2": 1422, "bar_avg": 1421, "bar_b": [281, 357], "bar_color": [42, 357], "bar_max": 1421, "bar_median": 1421, "bar_min": 1421, "bar_negative_border_color_sam": [42, 357], "bar_negative_color_sam": [42, 357], "bar_std": 1421, "bar_sum": 1421, "bar_var": 1421, "bare": [622, 623, 997], "base": [33, 42, 53, 54, 55, 71, 117, 119, 156, 184, 213, 228, 236, 245, 261, 285, 289, 357, 471, 479, 516, 519, 520, 521, 522, 529, 544, 549, 609, 610, 661, 663, 671, 676, 680, 682, 684, 686, 688, 691, 693, 695, 756, 802, 803, 816, 842, 869, 907, 911, 917, 935, 938, 991, 997, 1095, 1103, 1145, 1150, 1151, 1152, 1153, 1174, 1178, 1241, 1242, 1246, 1265, 1267, 1274, 1275, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1362, 1395, 1404, 1420, 1426, 1435], "base64": [427, 428, 717, 718, 1046, 1047, 1323, 1324], "base_nam": [321, 357], "base_path": [53, 54, 55], "base_utc_offset": [479, 1103], "baseexcept": 1432, "basepartitioncontext": 54, "basi": [42, 156, 182, 357], "basic": [42, 209, 357, 621, 999, 1435], "basic_chart": [42, 357], "batch": [45, 97, 141, 146, 152, 153, 159, 161, 170, 172, 291, 319, 357, 891, 893, 921, 946, 991], "batch_siz": [39, 49, 146, 151, 152, 153, 161, 170, 172, 319, 357, 991], "batchedcsvread": 152, "baz": [240, 250, 251, 323, 357, 724, 742, 744, 815, 824, 839, 865, 914, 955, 991, 996, 997, 1330, 1350, 1418, 1424, 1427], "bb": [997, 1089, 1404, 1427, 1432], "bbb": [1, 42, 357, 762, 764, 765, 997], "bc": [726, 738, 852, 1332], "bcbc45": 1427, "bea": 14, "bear": 997, "bearer": 192, "bearer_token": 192, "beauti": 14, "becaus": [161, 170, 231, 245, 262, 265, 325, 343, 357, 509, 533, 577, 672, 869, 911, 974, 991, 1137, 1149, 1209, 1246, 1404], "becom": [184, 356, 430, 989, 990, 1049], "bed3": [42, 357], "been": [5, 32, 42, 189, 211, 338, 357, 535, 633, 666, 869, 893, 969, 991, 1269, 1404], "beetl": [310, 357, 673, 869], "befor": [42, 49, 50, 51, 52, 53, 72, 73, 146, 148, 151, 153, 154, 156, 166, 172, 175, 176, 177, 178, 188, 207, 233, 245, 260, 304, 314, 319, 323, 357, 436, 437, 439, 440, 460, 461, 462, 656, 657, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 721, 761, 768, 796, 844, 845, 869, 893, 911, 913, 916, 946, 955, 991, 1055, 1056, 1058, 1059, 1085, 1086, 1087, 1156, 1262, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1327, 1367, 1374, 1404, 1420], "beforehand": [751, 753, 754, 1357, 1359, 1360], "begin": [14, 42, 171, 251, 357, 519, 521, 522, 548, 549, 722, 752, 869, 914, 991, 1150, 1152, 1153, 1177, 1178, 1328, 1358, 1404], "behav": [70, 236, 285, 357, 529, 615, 747, 748, 859, 869, 907, 935, 991], "behavior": [10, 48, 52, 56, 151, 163, 171, 213, 227, 228, 236, 259, 260, 357, 407, 535, 551, 581, 583, 721, 815, 824, 869, 900, 901, 915, 916, 988, 991, 1027, 1180, 1213, 1215, 1327, 1404], "behaviour": [12, 58, 153, 227, 228, 236, 285, 304, 357, 714, 722, 723, 726, 737, 738, 775, 848, 869, 900, 901, 907, 935, 949, 991, 1320, 1328, 1329, 1332, 1343, 1344], "behind": 188, "being": [10, 15, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 131, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 156, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 203, 216, 232, 261, 266, 304, 312, 314, 319, 326, 357, 360, 361, 369, 370, 375, 462, 463, 470, 482, 544, 614, 615, 663, 677, 678, 680, 681, 682, 684, 686, 688, 689, 690, 691, 693, 694, 695, 721, 755, 793, 795, 813, 826, 827, 829, 830, 846, 859, 869, 888, 891, 892, 893, 903, 904, 917, 922, 931, 932, 946, 949, 957, 965, 991, 997, 1071, 1087, 1088, 1094, 1106, 1174, 1180, 1267, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1296, 1298, 1327, 1379, 1382, 1387, 1404, 1409, 1435], "belong": [1, 245, 357, 911, 991], "below": [21, 41, 155, 156, 167, 168, 228, 236, 281, 285, 357, 503, 528, 728, 737, 738, 752, 807, 808, 810, 811, 856, 857, 859, 865, 869, 907, 935, 991, 1131, 1334, 1343, 1344, 1358], "best": [168, 265, 343, 357, 615, 869, 1246, 1404], "better": [265, 314, 315, 343, 357, 448, 614, 615, 733, 829, 830, 869, 887, 974, 991, 1068, 1302, 1304, 1339, 1404], "between": [26, 66, 102, 154, 179, 180, 182, 186, 190, 212, 221, 259, 273, 283, 291, 349, 357, 408, 444, 466, 467, 503, 550, 551, 575, 585, 595, 596, 597, 598, 657, 663, 664, 687, 688, 713, 729, 789, 790, 793, 798, 800, 827, 841, 844, 845, 869, 915, 927, 933, 980, 991, 1028, 1063, 1090, 1091, 1131, 1179, 1180, 1207, 1217, 1227, 1228, 1229, 1230, 1262, 1267, 1268, 1290, 1291, 1319, 1335, 1404, 1421, 1429], "between_ab": [550, 869], "beyond": [53, 759, 1365], "bia": [521, 522, 563, 677, 689, 707, 869, 1152, 1153, 1195, 1280, 1292, 1314, 1404], "bias": [563, 707, 869, 1195, 1314, 1404], "big": [152, 430, 1049], "big_fil": 152, "bigidx": 140, "bigqueri": 154, "bigquery_format": 200, "bin": [463, 544, 663, 756, 782, 862, 869, 1088, 1174, 1267, 1362, 1398, 1404, 1409], "bin2int": 430, "bin_count": [544, 869, 1174, 1404], "bin_i": [782, 869], "bin_x": [782, 869], "bin_xor_xi": [782, 869], "binari": [42, 44, 147, 153, 224, 297, 357, 375, 426, 427, 428, 429, 430, 431, 432, 465, 629, 717, 869, 898, 942, 991, 997, 1045, 1046, 1048, 1049, 1050, 1051, 1323, 1423], "binary_str": [782, 869], "bind": 156, "birthdai": 151, "bit": [72, 73, 74, 75, 78, 79, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 434, 435, 436, 437, 439, 440, 668, 714, 869, 1053, 1055, 1056, 1058, 1059, 1271, 1320, 1404, 1423, 1427], "bit_and": 1425, "bit_count": 1425, "bit_length": 1425, "bit_or": 1425, "bit_xor": 1425, "bitmap": [231, 357, 1149, 1404], "bitsiz": 375, "bitwis": [384, 433, 438, 441, 655, 782, 783, 784, 785, 786, 869, 1052, 1057, 1060, 1404, 1425, 1431], "bitwise_and": [869, 1404], "bitwise_count_on": [869, 1404], "bitwise_count_zero": [869, 1404], "bitwise_leading_on": [869, 1404], "bitwise_leading_zero": [869, 1404], "bitwise_or": [869, 1404], "bitwise_trailing_on": [869, 1404], "bitwise_trailing_zero": [869, 1404], "bitwise_xor": [869, 1404], "bla": [716, 723, 1322, 1329], "black": [265, 357, 426, 427, 428, 429, 432], "blindli": [577, 1209], "block": [22, 65, 244, 322, 357, 892, 910, 936, 954, 963, 964, 974, 991, 1302, 1304, 1404], "blue": [57, 98, 99, 426, 427, 428, 429, 432, 779, 869, 1393, 1404], "bob": [151, 273, 357, 369, 927, 991, 1433], "bodi": [42, 357, 361], "bold": [42, 357], "bom": [39, 49, 357, 991], "bool": [5, 7, 8, 9, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 34, 39, 41, 42, 48, 49, 50, 51, 52, 53, 55, 56, 58, 64, 65, 66, 97, 132, 133, 134, 135, 137, 138, 139, 142, 146, 147, 148, 151, 152, 153, 155, 156, 157, 159, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 191, 192, 209, 211, 215, 216, 217, 218, 223, 225, 230, 235, 236, 237, 238, 242, 243, 244, 245, 249, 252, 253, 254, 257, 259, 260, 270, 279, 281, 285, 286, 290, 291, 292, 293, 298, 301, 303, 304, 307, 310, 312, 315, 316, 320, 321, 322, 323, 326, 327, 329, 331, 339, 341, 344, 347, 357, 375, 382, 383, 384, 385, 386, 396, 399, 400, 403, 407, 408, 418, 423, 426, 427, 429, 432, 443, 444, 445, 449, 457, 458, 459, 460, 461, 463, 470, 482, 483, 499, 504, 505, 506, 507, 508, 509, 510, 516, 517, 518, 519, 521, 522, 538, 540, 541, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 568, 569, 573, 577, 581, 583, 585, 594, 601, 607, 613, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 630, 631, 650, 651, 653, 655, 656, 658, 659, 663, 666, 668, 677, 678, 679, 681, 683, 685, 687, 689, 690, 692, 694, 698, 699, 700, 702, 707, 709, 710, 713, 714, 715, 716, 717, 719, 725, 726, 727, 729, 737, 738, 739, 742, 743, 745, 751, 753, 754, 756, 758, 762, 764, 765, 774, 776, 779, 782, 783, 784, 785, 786, 788, 791, 792, 793, 794, 797, 798, 800, 801, 802, 803, 807, 808, 810, 811, 816, 822, 823, 826, 827, 828, 829, 830, 834, 839, 840, 842, 843, 847, 848, 851, 853, 856, 857, 859, 860, 869, 886, 888, 889, 891, 892, 893, 897, 899, 903, 906, 907, 910, 911, 915, 916, 921, 926, 932, 935, 936, 943, 945, 946, 948, 949, 953, 954, 955, 956, 957, 960, 965, 966, 970, 972, 975, 978, 991, 996, 997, 999, 1004, 1005, 1016, 1019, 1020, 1023, 1027, 1028, 1037, 1042, 1045, 1046, 1048, 1051, 1062, 1063, 1064, 1066, 1069, 1071, 1075, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1094, 1106, 1107, 1127, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1145, 1147, 1148, 1150, 1152, 1153, 1160, 1162, 1170, 1171, 1174, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1200, 1201, 1205, 1209, 1213, 1215, 1217, 1226, 1233, 1239, 1246, 1258, 1260, 1263, 1264, 1267, 1269, 1270, 1271, 1280, 1281, 1282, 1284, 1286, 1288, 1290, 1292, 1293, 1295, 1297, 1301, 1303, 1304, 1305, 1309, 1314, 1316, 1319, 1320, 1321, 1322, 1323, 1325, 1331, 1332, 1333, 1335, 1343, 1344, 1345, 1348, 1349, 1351, 1357, 1359, 1360, 1362, 1364, 1379, 1384, 1385, 1389, 1390, 1393, 1404, 1413, 1414, 1416, 1422, 1427, 1432], "boolean": [58, 97, 182, 215, 236, 238, 285, 303, 320, 357, 383, 384, 385, 399, 400, 403, 426, 429, 432, 443, 482, 483, 529, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 568, 569, 573, 579, 653, 655, 658, 659, 699, 710, 730, 774, 781, 782, 791, 792, 851, 859, 869, 886, 907, 935, 948, 953, 991, 997, 1004, 1005, 1017, 1019, 1020, 1023, 1045, 1062, 1106, 1107, 1160, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1200, 1201, 1205, 1211, 1260, 1263, 1264, 1303, 1304, 1320, 1389, 1395, 1404, 1424], "border": 22, "both": [12, 27, 39, 49, 57, 98, 99, 153, 156, 171, 219, 245, 259, 260, 261, 273, 289, 290, 316, 326, 357, 386, 452, 463, 503, 523, 550, 663, 676, 680, 682, 684, 686, 688, 691, 693, 695, 741, 807, 808, 810, 811, 826, 827, 856, 857, 859, 865, 869, 880, 911, 915, 916, 917, 927, 938, 945, 957, 991, 997, 1076, 1131, 1179, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1347, 1385, 1404, 1432, 1433], "boto3": 34, "bottom": [215, 357, 443, 869, 886, 991], "bottom_k": [320, 357, 443, 773, 774, 869, 953, 991, 1062, 1388, 1389, 1404], "bottom_k_bi": [442, 773, 774, 869, 1061, 1388, 1389, 1404], "bound": [113, 151, 152, 231, 245, 357, 407, 452, 550, 581, 583, 606, 612, 778, 788, 807, 808, 810, 811, 826, 827, 856, 857, 869, 911, 991, 1027, 1076, 1149, 1179, 1213, 1215, 1244, 1392, 1404, 1422], "boundari": [245, 357, 452, 759, 869, 911, 991, 1076, 1365, 1404], "box": [22, 265, 357], "box_draw": 22, "branch": [64, 859, 891, 903, 932, 945, 991], "break": [10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 131, 142, 143, 144, 145, 146, 147, 154, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 203, 259, 261, 266, 304, 314, 319, 326, 357, 360, 361, 369, 370, 375, 462, 463, 470, 482, 544, 615, 663, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 695, 755, 793, 795, 826, 827, 846, 869, 891, 892, 893, 903, 915, 917, 922, 931, 932, 946, 949, 957, 965, 991, 997, 1071, 1087, 1088, 1094, 1106, 1174, 1267, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1296, 1298, 1382, 1387, 1404, 1409], "breakpoint": [463, 544, 663, 869, 1088, 1174, 1267, 1404], "breezah": 166, "breviti": 207, "broadcast": [739, 795, 997, 1345], "broader": 997, "brotli": [48, 52, 357, 991], "brussel": [497, 1125], "bst": [475, 479, 497, 1099, 1103, 1125], "bucket": [41, 155, 167, 168, 171, 357, 498, 511, 544, 869, 1126, 1139, 1174, 1404], "bud": [737, 738, 1343, 1344], "budget": 1413, "buffer": [53, 151, 152, 153, 231, 257, 357, 893, 946, 991, 1149, 1404], "buffer_s": [257, 357], "bug": [97, 146, 921, 974, 991, 1246, 1404], "build": [63, 133, 997, 1435], "built": 102, "builtin": [149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 224, 357, 465, 869, 898, 991], "bundl": 207, "busi": [470, 482, 793, 1094, 1106], "by_alternate_row": 1, "by_dtyp": 997, "by_first_letter_of_column_nam": 59, "by_first_letter_of_column_valu": 59, "by_index": 997, "by_left": [260, 357, 916, 991], "by_nam": 997, "by_pred": [290, 357], "by_right": [260, 357, 916, 991], "bye": 1, "byi": 1427, "bys": [245, 357, 911, 991], "byte": [37, 39, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 147, 149, 150, 151, 152, 157, 158, 159, 160, 161, 164, 165, 166, 169, 170, 224, 231, 297, 357, 430, 447, 448, 465, 629, 726, 727, 728, 732, 733, 741, 752, 869, 898, 942, 991, 1049, 1067, 1068, 1149, 1332, 1333, 1334, 1338, 1339, 1347, 1358, 1404, 1427], "bytesio": [42, 44, 45, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 224, 297, 357, 465, 629, 869, 898, 942, 991], "c": [1, 12, 37, 39, 41, 42, 44, 45, 48, 53, 59, 61, 66, 106, 133, 135, 137, 139, 142, 148, 156, 166, 190, 211, 212, 215, 216, 217, 218, 219, 220, 222, 225, 226, 227, 228, 229, 230, 232, 236, 238, 241, 242, 243, 244, 245, 247, 249, 250, 258, 259, 262, 263, 264, 266, 267, 269, 271, 274, 276, 277, 278, 279, 281, 282, 283, 285, 286, 287, 288, 290, 293, 294, 295, 302, 303, 304, 305, 306, 308, 309, 312, 313, 314, 315, 316, 317, 320, 323, 324, 325, 326, 328, 329, 331, 336, 339, 340, 341, 344, 345, 347, 350, 351, 357, 361, 375, 380, 382, 383, 385, 403, 443, 463, 503, 541, 550, 572, 585, 615, 622, 639, 640, 654, 656, 660, 663, 702, 743, 751, 774, 777, 784, 786, 787, 789, 790, 791, 794, 795, 797, 798, 799, 800, 802, 803, 805, 815, 816, 817, 820, 821, 824, 825, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 848, 850, 852, 853, 854, 858, 865, 869, 886, 888, 889, 890, 891, 892, 894, 895, 896, 899, 900, 901, 902, 903, 904, 907, 910, 911, 915, 919, 922, 929, 931, 932, 935, 936, 937, 939, 940, 945, 947, 948, 949, 953, 955, 956, 957, 960, 962, 967, 970, 971, 972, 975, 976, 978, 981, 982, 991, 997, 1088, 1179, 1204, 1267, 1349, 1357, 1371, 1391, 1404, 1414, 1416, 1417, 1419, 1420, 1421, 1422, 1427, 1432], "c00": 997, "c01": 997, "c02": 997, "c03": 997, "c05": 997, "c1": 422, "c123": 1427, "c2": 422, "c20": 997, "c25": 997, "c3": 422, "c40": 997, "c45": 1427, "c4d79b": [42, 357], "c50": 997, "c567": [42, 357], "c60": 997, "c75": 997, "c80": 997, "c8ae6d2b276": [42, 357], "c93": 997, "c95": 997, "c96": 997, "c97": 997, "c98": 997, "c99": 997, "c_btm_by_a": [443, 869], "c_btm_by_b": [443, 869], "c_by_ca": [443, 774, 869], "c_by_cb": [443, 774, 869], "c_c_c": [848, 949, 991], "c_contigu": [315, 357], "c_max": [656, 869], "c_mean_squar": [336, 967], "c_min": [656, 869], "c_top_by_a": [774, 869], "c_top_by_b": [774, 869], "c_total": 1432, "ca": 801, "cach": [57, 64, 98, 99, 126, 157, 166, 169, 171, 175, 176, 177, 178, 191, 670, 671, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 751, 753, 754, 758, 869, 880, 891, 903, 932, 945, 991, 1274, 1275, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1357, 1359, 1360, 1364, 1404], "cadi": [281, 357], "cafe": [756, 1362], "caf\u00e9": [447, 448, 732, 733, 997, 1067, 1068, 1338, 1339], "calamin": 156, "calcul": [42, 48, 52, 58, 223, 245, 305, 328, 357, 466, 519, 520, 521, 522, 563, 575, 595, 602, 608, 612, 677, 689, 707, 712, 778, 780, 800, 844, 845, 850, 858, 869, 897, 911, 950, 958, 991, 1089, 1090, 1150, 1151, 1152, 1153, 1195, 1207, 1227, 1280, 1292, 1314, 1318, 1394, 1404], "calendar": [72, 73, 245, 260, 289, 327, 357, 473, 484, 486, 493, 498, 511, 515, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 812, 856, 857, 869, 911, 916, 938, 991, 1097, 1108, 1113, 1121, 1126, 1139, 1143, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "calendar_year": [484, 515], "call": [10, 11, 39, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 57, 64, 137, 146, 148, 151, 152, 153, 155, 156, 157, 161, 163, 164, 166, 167, 169, 170, 171, 175, 176, 177, 178, 182, 186, 197, 207, 215, 244, 245, 262, 265, 289, 304, 315, 320, 356, 357, 442, 443, 458, 461, 470, 482, 614, 615, 670, 671, 703, 773, 774, 793, 799, 829, 830, 865, 869, 886, 891, 893, 903, 910, 911, 932, 938, 945, 946, 949, 953, 988, 989, 990, 991, 997, 1061, 1062, 1094, 1106, 1246, 1275, 1310, 1384, 1388, 1389, 1404, 1414, 1418, 1432], "callabl": [53, 54, 55, 59, 60, 61, 62, 97, 146, 166, 238, 264, 265, 280, 286, 343, 357, 422, 606, 614, 615, 640, 641, 660, 678, 802, 803, 816, 829, 830, 842, 869, 921, 930, 931, 936, 946, 974, 991, 1041, 1238, 1246, 1281, 1404], "callback": [48, 52, 53, 54, 55, 143, 145, 357, 946, 991], "caller": [97, 154, 273, 357, 606, 921, 927, 974, 991], "cam": [286, 357, 936, 991], "can": [1, 10, 16, 29, 39, 41, 42, 44, 48, 49, 50, 51, 52, 53, 57, 58, 64, 72, 73, 75, 89, 97, 98, 99, 132, 135, 146, 151, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 166, 167, 169, 170, 171, 172, 180, 181, 182, 186, 188, 192, 197, 207, 209, 215, 217, 227, 228, 229, 238, 240, 244, 245, 252, 254, 256, 259, 260, 265, 266, 277, 281, 289, 291, 292, 295, 297, 298, 303, 314, 315, 319, 320, 321, 325, 331, 334, 343, 357, 360, 367, 375, 383, 422, 443, 458, 461, 462, 465, 470, 482, 490, 491, 493, 497, 500, 503, 520, 526, 529, 550, 577, 579, 606, 614, 615, 622, 626, 629, 630, 636, 656, 661, 662, 663, 668, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 700, 702, 707, 710, 715, 724, 730, 731, 735, 737, 738, 739, 746, 747, 748, 751, 762, 768, 774, 791, 793, 806, 809, 816, 818, 822, 823, 826, 829, 830, 848, 852, 859, 865, 868, 869, 880, 886, 887, 891, 892, 898, 900, 901, 903, 911, 915, 916, 922, 938, 940, 942, 943, 945, 948, 949, 953, 960, 963, 964, 991, 997, 999, 1041, 1062, 1087, 1094, 1106, 1118, 1119, 1121, 1125, 1128, 1131, 1151, 1157, 1179, 1209, 1238, 1246, 1251, 1265, 1266, 1267, 1271, 1275, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1302, 1304, 1305, 1308, 1314, 1321, 1322, 1330, 1337, 1343, 1344, 1345, 1352, 1353, 1354, 1357, 1374, 1382, 1384, 1389, 1404, 1409, 1419, 1432], "cancel": [891, 991], "candid": [722, 724, 1328, 1330], "cannot": [1, 48, 49, 50, 51, 52, 64, 65, 108, 111, 151, 152, 156, 157, 159, 161, 162, 163, 171, 188, 207, 260, 264, 265, 292, 293, 315, 334, 343, 357, 427, 503, 523, 594, 614, 615, 630, 698, 702, 717, 743, 764, 829, 830, 869, 891, 892, 893, 903, 916, 921, 932, 945, 946, 964, 966, 974, 991, 997, 1046, 1131, 1226, 1246, 1301, 1323, 1349, 1384, 1404], "capabl": [1, 42, 357], "capac": [231, 301, 357, 1149, 1309, 1404], "capit": [759, 1365], "captur": [722, 724, 737, 738, 1328, 1330, 1343, 1344], "car": [286, 310, 357, 673, 869, 936, 991], "cardin": [214, 357, 387, 787, 869, 885, 991, 1007, 1404], "care": [42, 298, 357, 615, 656, 700, 869, 943, 991, 1305, 1404], "cars_revers": [673, 869], "cartesian": [259, 357, 915, 991], "case": [42, 57, 58, 65, 97, 106, 132, 134, 135, 136, 138, 146, 148, 153, 160, 161, 170, 171, 188, 233, 245, 257, 264, 265, 281, 289, 291, 292, 311, 314, 315, 357, 471, 520, 614, 626, 627, 640, 656, 676, 714, 715, 723, 725, 726, 727, 737, 738, 739, 759, 859, 869, 892, 911, 935, 938, 946, 991, 997, 1095, 1151, 1156, 1320, 1321, 1329, 1331, 1332, 1333, 1343, 1344, 1345, 1365, 1382, 1404], "cast": [1, 41, 56, 60, 61, 132, 134, 135, 138, 148, 171, 175, 176, 177, 178, 238, 245, 266, 280, 289, 314, 315, 319, 331, 357, 386, 460, 461, 472, 500, 503, 514, 655, 660, 661, 668, 670, 676, 730, 731, 761, 768, 772, 796, 797, 849, 869, 881, 911, 922, 930, 931, 938, 960, 991, 997, 1071, 1085, 1086, 1096, 1128, 1131, 1142, 1265, 1271, 1336, 1337, 1362, 1367, 1374, 1380, 1384, 1386, 1387, 1404, 1425], "cast_opt": 171, "cast_str_to_int": [280, 357, 930, 991], "cast_to_float_if_necessari": [931, 991], "cast_to_supertyp": [148, 869], "cat": [28, 57, 98, 99, 463, 663, 714, 716, 757, 760, 772, 797, 864, 869, 997, 1088, 1174, 1267, 1320, 1322, 1363, 1366, 1400, 1404], "catalog": [0, 881], "catalog_nam": [193, 195, 196, 197], "cataloginfo": [194, 205], "categor": [41, 56, 57, 76, 98, 99, 101, 175, 176, 177, 178, 259, 312, 357, 375, 445, 446, 447, 448, 449, 463, 663, 670, 671, 772, 869, 997, 1064, 1065, 1066, 1067, 1068, 1069, 1071, 1088, 1267, 1274, 1275, 1386, 1404], "categori": [42, 57, 70, 76, 99, 312, 357, 375, 446, 463, 544, 663, 869, 1065, 1088, 1174, 1267, 1379, 1404], "categorical_as_str": [175, 176, 177, 178], "categorical_to_str": 56, "categoricalord": 70, "categoricaltyp": [309, 357], "caus": [114, 123, 133, 151, 152, 153, 166, 211, 233, 315, 357, 1156, 1384, 1404], "cb": 801, "cba": 748, "cbrt": [869, 1404, 1425], "cbrt_a": 1426, "cc": [523, 814, 869, 997, 1089, 1404, 1427], "ccc": [1, 42, 357, 762, 764, 765, 997, 1427], "ccy": 1435, "cd": [738, 762, 764, 765, 997], "cd34": 738, "cdatainterfac": [133, 210, 1000], "cde": [997, 1427], "cdot": [551, 869, 1180, 1404], "cdt": [498, 511, 1126, 1139], "ceil": [60, 869, 1404, 1425], "ceil_a": 1426, "cell": [17, 18, 42, 281, 357], "cent": [473, 1343], "center": [17, 18, 42, 357, 519, 521, 522, 677, 678, 679, 681, 683, 685, 687, 689, 690, 692, 694, 869, 1150, 1152, 1153, 1280, 1281, 1282, 1284, 1286, 1288, 1290, 1292, 1293, 1295, 1297, 1404], "central": [167, 168, 207, 563, 707, 869, 1195, 1314, 1404], "centuri": 1428, "certain": [53, 250, 327, 357, 375, 747, 748, 865, 884, 891, 932, 946, 991, 997, 1404], "certainli": [751, 753, 754, 1357, 1359, 1360], "cest": [497, 1125], "cet": [497, 1125], "cfg": [2, 4, 19, 207], "cfg_ascii_fram": 207, "cfg_markdown": 207, "cfg_verbos": 207, "cfoo": [962, 991], "chain": 859, "chanc": [179, 182, 186, 1435], "chang": [10, 32, 33, 34, 35, 36, 39, 41, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 64, 65, 74, 80, 131, 133, 139, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 203, 215, 245, 259, 261, 266, 281, 289, 304, 309, 314, 319, 320, 326, 327, 333, 357, 360, 361, 369, 370, 375, 443, 462, 463, 466, 470, 482, 503, 519, 521, 522, 544, 615, 656, 657, 663, 670, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 702, 755, 774, 793, 795, 826, 827, 844, 845, 846, 859, 869, 886, 891, 892, 893, 903, 911, 915, 917, 922, 931, 932, 938, 946, 949, 953, 957, 963, 965, 991, 997, 1071, 1087, 1088, 1094, 1106, 1131, 1148, 1150, 1152, 1153, 1174, 1262, 1267, 1274, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1309, 1361, 1378, 1382, 1387, 1404, 1409, 1432], "changes_length": [148, 869], "char": [29, 151, 152, 166, 723, 1329], "char_length": 1427, "charact": [7, 9, 14, 22, 28, 29, 30, 39, 40, 49, 100, 150, 151, 152, 154, 166, 357, 447, 448, 493, 720, 721, 723, 728, 732, 733, 735, 736, 737, 738, 741, 742, 743, 746, 747, 748, 749, 750, 752, 759, 761, 932, 991, 997, 1067, 1068, 1121, 1326, 1327, 1329, 1334, 1338, 1339, 1341, 1342, 1343, 1344, 1347, 1348, 1349, 1352, 1353, 1354, 1358, 1365, 1367, 1427], "character_length": 1427, "characterist": [182, 186], "charli": [151, 369, 1433], "chart": [42, 357, 360, 932, 991, 1404, 1409], "cheap": [217, 218, 296, 332, 357, 889, 890, 941, 961, 991, 1075, 1077, 1404], "cheaper": [581, 1213], "check": [41, 73, 108, 151, 152, 153, 166, 175, 176, 177, 178, 191, 230, 255, 259, 260, 357, 403, 426, 429, 432, 445, 449, 541, 550, 551, 555, 573, 714, 719, 726, 745, 869, 915, 916, 921, 991, 1023, 1045, 1048, 1051, 1064, 1069, 1148, 1170, 1171, 1182, 1185, 1192, 1194, 1205, 1320, 1325, 1332, 1351, 1404], "check_column_ord": [175, 176], "check_dtyp": [175, 176, 177, 178, 996, 1148, 1404], "check_exact": [175, 176, 177, 178], "check_nam": [177, 178, 1148, 1404], "check_ord": [177, 178], "check_order_observ": 965, "check_row_ord": [175, 176], "check_sorted": [260, 357, 916, 991], "children": 142, "choos": [48, 50, 52, 245, 281, 357, 503, 911, 991, 997, 1131], "chrono": [39, 49, 102, 357, 500, 503, 751, 753, 754, 758, 991, 1128, 1131, 1357, 1359, 1360, 1364, 1427, 1428], "chunk": [16, 52, 141, 151, 152, 155, 161, 163, 166, 167, 169, 170, 171, 182, 186, 233, 258, 276, 315, 357, 386, 667, 869, 893, 991, 1006, 1074, 1156, 1168, 1252, 1270, 1378, 1384, 1404], "chunk_length": 1404, "chunk_siz": [893, 946, 991], "chunkedarrai": [132, 276, 357], "citi": [737, 738], "clang": 174, "clarifi": 369, "clariti": [290, 357], "class": [1, 10, 19, 33, 34, 35, 36, 53, 54, 55, 56, 57, 59, 60, 61, 62, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 117, 119, 142, 143, 144, 145, 179, 180, 192, 198, 199, 201, 202, 292, 297, 357, 375, 629, 826, 856, 865, 869, 875, 881, 895, 902, 939, 959, 965, 966, 991, 996, 997, 1383, 1404, 1408, 1416, 1432], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 224, 357, 465, 535, 869, 898, 991, 1414, 1432], "claus": [881, 1422, 1431], "clean": [751, 753, 754, 1357, 1359, 1360], "cleaner": 207, "cleanli": [12, 243, 357, 1432], "clear": [57, 98, 218, 357, 890, 991, 1077, 1404], "clearer": 135, "clickhous": 154, "client": [34, 153, 192], "clip": [869, 1404], "clipboard": [38, 150, 357, 881], "clone": [134, 135, 136, 137, 138, 217, 315, 357, 889, 991, 1075, 1404], "close": [42, 49, 50, 51, 52, 54, 153, 245, 289, 304, 357, 463, 550, 551, 611, 663, 676, 680, 682, 684, 686, 688, 691, 693, 695, 707, 807, 808, 810, 811, 826, 827, 856, 857, 869, 911, 938, 949, 991, 1088, 1179, 1180, 1267, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1314, 1404], "closedinterv": [245, 289, 357, 550, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 826, 827, 856, 857, 869, 911, 938, 991, 1179, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "closest": [132, 260, 357, 916, 991, 1421, 1426], "closur": [680, 682, 691, 693, 695, 869], "cloud": [10, 36, 39, 41, 44, 48, 49, 50, 51, 52, 97, 153, 155, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 197, 357, 881, 934, 991], "cloudi": [737, 738], "cloudpickl": 174, "cluster": 171, "cluster_with_column": [64, 891, 903, 932, 945, 965, 991], "co": [723, 869, 1329, 1404, 1425], "coalesc": [66, 190, 259, 260, 326, 357, 548, 725, 727, 751, 859, 869, 915, 916, 957, 991, 1333, 1357, 1420, 1425], "code": [207, 219, 259, 357, 426, 427, 428, 429, 432, 465, 615, 700, 869, 898, 915, 919, 991, 1305, 1404, 1414], "codebas": 207, "coeffici": [221, 357, 707, 869, 1314, 1404, 1421], "coerc": [66, 190, 669, 869, 1273, 1404], "coerce_int96_timestamp_unit": 56, "coercion": [64, 266, 357, 669, 869, 891, 903, 922, 932, 945, 991, 1273, 1404], "col": [1, 14, 39, 42, 49, 53, 58, 59, 60, 61, 136, 138, 166, 180, 182, 236, 244, 245, 250, 253, 255, 259, 260, 261, 265, 266, 277, 280, 281, 285, 289, 290, 295, 303, 314, 319, 323, 325, 331, 336, 357, 361, 369, 375, 379, 380, 381, 382, 383, 384, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 438, 441, 442, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 543, 544, 546, 547, 548, 549, 550, 551, 552, 554, 555, 557, 558, 559, 562, 563, 564, 565, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 637, 638, 639, 641, 643, 645, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 783, 785, 787, 791, 792, 794, 795, 796, 797, 799, 801, 804, 806, 807, 809, 810, 812, 816, 817, 818, 819, 820, 821, 831, 833, 835, 836, 838, 841, 842, 847, 848, 850, 852, 854, 855, 858, 859, 869, 907, 910, 911, 913, 915, 916, 917, 922, 930, 931, 935, 938, 940, 948, 949, 955, 960, 962, 967, 991, 997, 1121, 1125, 1209, 1302, 1304, 1333, 1337, 1357, 1404, 1435], "col0": [182, 1435], "col1": [182, 281, 357, 991, 1435], "col2": [182, 281, 357, 991, 1435], "col3": [281, 357, 1435], "col4": 1435, "col_idx": 213, "col_nam": [280, 357, 615, 859, 869, 930, 991], "col_or_expr": 369, "cole": 147, "coli": [42, 357, 646, 647, 997, 1435], "collaps": [64, 891, 903, 932, 945, 991], "collapse_join": [64, 891, 903, 932, 945, 965, 991], "collect": [11, 49, 50, 51, 52, 56, 61, 64, 65, 97, 131, 166, 167, 168, 172, 182, 183, 186, 227, 228, 262, 281, 304, 309, 322, 323, 357, 375, 523, 555, 595, 596, 597, 598, 615, 796, 814, 818, 847, 848, 851, 869, 884, 885, 886, 888, 889, 892, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 933, 934, 935, 936, 937, 938, 940, 942, 944, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 963, 964, 967, 968, 969, 970, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 988, 990, 991, 997, 1185, 1227, 1228, 1229, 1230, 1404, 1414, 1415, 1416, 1419, 1420, 1432, 1433, 1435], "collect_al": [61, 65, 131, 891, 892, 991], "collect_all_async": [892, 991], "collect_async": [65, 991], "collect_batch": 991, "collect_dtyp": [362, 367, 375], "collect_schema": [61, 165, 262, 357, 895, 902, 930, 939, 959, 991], "collis": [66, 190], "colnam": [26, 42, 166, 357], "color": [57, 98, 99, 343, 357, 360, 426, 427, 428, 429, 432, 717, 779, 869, 974, 1045, 1046, 1047, 1048, 1051, 1323, 1393, 1404, 1427], "column": [12, 18, 19, 20, 23, 24, 26, 41, 42, 48, 52, 53, 54, 55, 56, 57, 58, 59, 66, 73, 89, 99, 103, 107, 132, 134, 135, 136, 137, 138, 139, 146, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 167, 169, 170, 171, 172, 175, 176, 177, 178, 182, 190, 199, 202, 212, 213, 215, 216, 219, 221, 222, 225, 226, 227, 228, 229, 232, 236, 237, 240, 241, 243, 244, 245, 249, 250, 255, 256, 257, 259, 260, 261, 264, 265, 266, 267, 268, 269, 270, 271, 272, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 289, 290, 291, 292, 294, 295, 296, 298, 303, 305, 306, 307, 310, 312, 314, 315, 316, 317, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 332, 333, 334, 336, 342, 357, 360, 361, 369, 375, 382, 383, 385, 396, 405, 416, 418, 421, 430, 443, 452, 456, 457, 463, 473, 474, 476, 477, 478, 481, 483, 484, 485, 486, 487, 488, 489, 492, 494, 495, 496, 499, 500, 501, 503, 512, 513, 515, 523, 525, 529, 531, 544, 549, 550, 566, 572, 578, 581, 601, 605, 615, 621, 622, 624, 626, 628, 639, 641, 642, 643, 644, 645, 646, 647, 656, 663, 667, 669, 670, 671, 672, 674, 675, 676, 680, 682, 684, 686, 688, 691, 693, 695, 702, 703, 709, 710, 713, 721, 726, 728, 729, 739, 743, 744, 751, 752, 753, 754, 755, 756, 758, 763, 766, 774, 779, 781, 783, 784, 785, 786, 787, 788, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 814, 815, 816, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 829, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 869, 886, 888, 896, 899, 900, 901, 902, 904, 907, 910, 911, 915, 916, 917, 921, 922, 923, 924, 925, 926, 928, 929, 933, 935, 936, 938, 939, 940, 941, 943, 948, 950, 951, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 967, 973, 974, 991, 996, 997, 1004, 1005, 1025, 1035, 1037, 1040, 1049, 1062, 1066, 1070, 1076, 1081, 1082, 1088, 1097, 1100, 1101, 1102, 1105, 1107, 1108, 1112, 1113, 1114, 1116, 1117, 1120, 1122, 1123, 1127, 1128, 1129, 1131, 1140, 1141, 1143, 1155, 1174, 1178, 1204, 1210, 1213, 1233, 1237, 1267, 1273, 1275, 1276, 1279, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1308, 1319, 1327, 1332, 1335, 1349, 1350, 1357, 1359, 1360, 1361, 1362, 1364, 1370, 1373, 1379, 1380, 1389, 1393, 1404, 1420, 1421, 1422, 1424, 1426, 1427, 1429, 1430, 1433, 1434, 1435], "column_0": [1, 265, 321, 357, 934, 991], "column_1": [265, 321, 357, 1429], "column_2": [321, 357, 1429], "column_abc": 17, "column_format": [42, 357], "column_nam": [264, 286, 321, 357, 375, 936, 991], "column_tot": [42, 357], "column_width": [42, 357], "column_x": [151, 152, 156, 162, 166], "column_xyz": 17, "columnar": [136, 138, 257, 291, 357], "columnformatdict": [42, 357], "columninfo": [202, 205], "columnmap": 171, "columnnameorselector": [216, 225, 227, 228, 232, 272, 279, 281, 292, 312, 322, 323, 324, 325, 357, 888, 899, 900, 901, 904, 926, 954, 955, 956, 991], "columnnotfounderror": [240, 241, 357], "columntotalsdefinit": [42, 357], "columnwidthsdefinit": [42, 357], "colx": [42, 357, 646, 647, 997, 1419, 1435], "colz": [997, 1435], "com": [34, 42, 154, 357, 519, 521, 522, 722, 723, 724, 869, 1150, 1152, 1153, 1328, 1329, 1330, 1404], "combin": [48, 52, 64, 66, 131, 190, 236, 245, 246, 260, 281, 285, 289, 323, 327, 357, 384, 397, 520, 533, 630, 655, 671, 676, 746, 747, 748, 807, 808, 810, 811, 856, 857, 859, 869, 891, 903, 911, 916, 932, 935, 938, 945, 955, 991, 1151, 1275, 1352, 1353, 1354, 1404, 1420, 1433], "come": [126, 154, 245, 322, 324, 357, 470, 482, 490, 491, 563, 793, 859, 869, 911, 954, 956, 991, 1094, 1106, 1118, 1119, 1195, 1404], "comm_subexpr_elim": [64, 891, 903, 932, 945, 965, 991], "comm_subplan_elim": [64, 891, 903, 932, 945, 965, 991], "comma": [38, 39, 49, 151, 152, 166, 357, 755, 991, 1361], "comment": [151, 152, 166, 198, 199, 201, 202], "comment_prefix": [151, 152, 166], "common": [56, 58, 64, 66, 106, 131, 151, 152, 166, 190, 326, 357, 640, 875, 891, 903, 932, 945, 957, 991, 1408], "commonli": 859, "compact": 1430, "compani": 154, "compar": [171, 175, 176, 177, 178, 230, 236, 285, 357, 517, 518, 538, 540, 550, 565, 613, 650, 651, 869, 907, 935, 991, 1147, 1148, 1258, 1404], "comparison": [172, 236, 285, 357, 907, 935, 991], "compat": [22, 42, 44, 45, 48, 50, 52, 101, 139, 309, 357, 714, 716, 722, 723, 724, 726, 737, 738, 991, 997, 1131, 1320, 1322, 1328, 1329, 1330, 1332, 1343, 1344, 1378, 1404, 1414, 1427, 1428, 1432], "compat_level": [44, 45, 50, 309, 357, 991, 1378, 1404], "compatibleframetyp": [1415, 1417, 1432], "compatlevel": [44, 45, 50, 309, 357, 991, 1378, 1404], "competit": [666, 869, 1269, 1404], "compil": [63, 401, 402, 570, 571, 995, 1021, 1022, 1202, 1203], "complement": 997, "complet": [151, 153, 166, 1433], "complex": [183, 442, 443, 462, 773, 774, 869, 1061, 1062, 1087, 1388, 1389, 1404], "compliant": [42, 357, 503, 1131], "compon": [474, 499, 503, 504, 505, 506, 507, 508, 509, 510, 751, 754, 812, 1098, 1127, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1357, 1360], "compos": 1433, "composit": [89, 1435], "compound": [139, 292, 357, 997], "comprehens": 180, "compress": [37, 41, 44, 45, 48, 50, 52, 357, 674, 869, 991, 1278, 1404], "compression_level": [48, 52, 357, 991], "comput": [64, 66, 104, 231, 244, 260, 281, 316, 322, 336, 349, 357, 379, 388, 389, 390, 391, 392, 393, 411, 412, 413, 414, 419, 420, 424, 450, 453, 454, 455, 458, 459, 460, 461, 467, 516, 519, 520, 521, 522, 524, 563, 588, 589, 590, 591, 595, 596, 597, 598, 602, 608, 609, 610, 611, 636, 656, 657, 662, 666, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 704, 705, 706, 707, 711, 770, 771, 779, 784, 786, 789, 790, 791, 798, 800, 813, 834, 844, 845, 859, 869, 884, 891, 910, 913, 915, 916, 934, 954, 962, 967, 980, 991, 1002, 1008, 1009, 1010, 1011, 1012, 1013, 1031, 1032, 1033, 1038, 1039, 1043, 1072, 1078, 1079, 1080, 1083, 1084, 1085, 1086, 1091, 1145, 1149, 1150, 1151, 1152, 1153, 1154, 1195, 1220, 1221, 1222, 1223, 1227, 1228, 1229, 1230, 1234, 1240, 1241, 1242, 1243, 1251, 1262, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1311, 1312, 1313, 1314, 1317, 1376, 1377, 1385, 1393, 1404, 1426, 1429], "computecontext": [934, 991], "computeerror": [626, 756, 859, 1362], "concat": [57, 98, 99, 107, 152, 190, 260, 357, 916, 962, 991, 1074, 1168, 1252, 1270, 1404, 1425], "concat_list": [577, 579, 813], "concat_w": [304, 357, 848, 949, 991, 1425, 1432], "concaten": [57, 66, 98, 99, 190, 238, 280, 357, 660, 713, 729, 795, 796, 797, 869, 930, 991, 1074, 1252, 1319, 1335, 1404, 1427], "concatmethod": [66, 190], "conclus": [136, 138, 357, 991], "concret": [182, 186], "condit": [42, 228, 236, 261, 285, 290, 357, 445, 449, 529, 550, 551, 719, 745, 792, 816, 859, 869, 907, 917, 935, 991, 1179, 1180, 1404, 1420, 1425, 1431], "conditional_format": [42, 357], "conditionalformatdict": [42, 357], "config": [0, 58, 223, 314, 357, 715, 725, 727, 739, 807, 808, 810, 811, 812, 881, 891, 897, 991, 1321, 1333, 1345], "configur": [5, 34, 41, 56, 153, 154, 155, 163, 165, 167, 168, 171, 207, 357, 360, 882, 891, 903, 932, 945, 966, 991, 1404, 1409], "configure_axisx": [357, 360, 1404, 1409], "configure_point": [357, 360, 1404, 1409], "conflat": [550, 869], "conform": [151, 1435], "confus": [106, 383, 558, 559, 739, 869], "conjunct": [42, 98, 153, 156, 162, 180, 357, 822, 825, 991], "conn": 153, "connect": [39, 40, 44, 48, 49, 50, 51, 52, 76, 151, 153, 154, 157, 159, 161, 163, 164, 166, 169, 170, 171, 172, 197, 357, 882, 991], "connectionorcursor": [40, 153, 357], "connector": 154, "connectorx": [153, 154, 174], "consecut": [235, 357, 425, 528, 534, 713, 729, 737, 869, 906, 991, 1044, 1159, 1164, 1319, 1335, 1344, 1404], "consid": [10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 98, 99, 131, 137, 142, 143, 144, 145, 146, 147, 151, 152, 153, 154, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 203, 215, 227, 228, 230, 256, 261, 265, 266, 272, 291, 304, 314, 319, 320, 322, 324, 326, 357, 360, 361, 369, 370, 375, 443, 452, 462, 463, 470, 482, 533, 544, 551, 615, 622, 638, 663, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 755, 774, 793, 795, 802, 816, 826, 827, 846, 865, 869, 886, 891, 892, 893, 900, 901, 903, 917, 922, 926, 931, 932, 945, 946, 949, 953, 954, 956, 957, 965, 974, 991, 997, 1062, 1071, 1076, 1087, 1088, 1094, 1106, 1148, 1174, 1180, 1246, 1267, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1296, 1298, 1302, 1304, 1382, 1387, 1389, 1404, 1409, 1414], "consider": 147, "consist": [244, 279, 315, 357, 751, 807, 808, 826, 859, 910, 991, 997, 1006, 1156, 1357, 1384, 1404], "consola": [42, 357], "const": 12, "constant": [231, 289, 357, 471, 520, 526, 827, 869, 938, 991, 1095, 1149, 1151, 1157, 1404], "constrain": [58, 166, 227, 228, 357, 900, 901, 991, 997], "constraint": [236, 285, 357, 529, 859, 869, 907, 935, 991, 997, 1434], "construct": [57, 98, 99, 106, 132, 134, 135, 136, 137, 138, 139, 147, 153, 357, 535, 840, 843, 860, 865, 869, 898, 991, 1404, 1419], "construct_categor": 57, "constructor": [147, 156, 186], "consumpt": [53, 54, 55], "contain": [5, 39, 40, 41, 42, 49, 53, 54, 55, 58, 63, 102, 134, 137, 139, 148, 153, 154, 155, 163, 167, 168, 171, 181, 182, 184, 186, 215, 220, 227, 228, 229, 245, 253, 258, 277, 314, 315, 319, 320, 326, 338, 357, 375, 383, 385, 408, 429, 432, 445, 449, 465, 541, 555, 585, 615, 713, 715, 719, 722, 724, 726, 729, 731, 744, 745, 761, 783, 784, 785, 786, 797, 830, 859, 869, 886, 895, 898, 900, 901, 902, 911, 932, 953, 957, 969, 991, 997, 1004, 1005, 1028, 1064, 1069, 1170, 1171, 1217, 1252, 1319, 1321, 1325, 1328, 1330, 1332, 1335, 1337, 1350, 1351, 1367, 1378, 1384, 1404, 1422], "contains_with_expr": 426, "contains_with_lit": 426, "content": [15, 49, 50, 51, 52, 703, 869, 991, 995, 1310, 1404], "context": [57, 98, 99, 143, 145, 188, 277, 304, 357, 375, 381, 529, 577, 615, 626, 709, 710, 779, 799, 815, 818, 824, 825, 830, 839, 843, 846, 847, 868, 869, 880, 881, 934, 949, 962, 991, 1209, 1393, 1404, 1419, 1432, 1434], "contigu": [66, 132, 133, 137, 151, 152, 155, 157, 159, 161, 163, 166, 167, 169, 170, 171, 284, 315, 357], "continu": [463, 663, 707, 869, 1088, 1267, 1314, 1404, 1421], "contrast": [812, 931, 991], "control": [12, 13, 42, 52, 65, 66, 156, 180, 182, 190, 303, 304, 314, 357, 671, 710, 848, 869, 891, 892, 903, 932, 945, 948, 949, 966, 988, 991, 1275, 1382, 1404, 1416, 1419, 1432], "conveni": [233, 319, 357, 983, 1006, 1156, 1404, 1414], "convers": [133, 211, 257, 258, 291, 292, 311, 315, 316, 357, 475, 751, 753, 754, 758, 881, 1099, 1357, 1359, 1360, 1364, 1384, 1385, 1404, 1430, 1432], "convert": [41, 56, 102, 133, 137, 148, 155, 156, 162, 167, 211, 292, 310, 311, 312, 313, 314, 315, 316, 318, 319, 357, 421, 422, 464, 475, 500, 503, 605, 606, 614, 640, 665, 724, 751, 753, 754, 755, 756, 758, 763, 869, 991, 1040, 1041, 1099, 1128, 1131, 1237, 1238, 1330, 1357, 1359, 1360, 1361, 1362, 1364, 1370, 1373, 1381, 1382, 1383, 1384, 1385, 1387, 1404, 1427, 1429, 1430, 1432], "convert_time_zon": [497, 1125], "coo": [286, 357, 936, 991], "coord": 766, "coordin": [42, 357, 1178, 1404], "copi": [38, 132, 133, 137, 150, 209, 211, 217, 218, 258, 309, 315, 316, 331, 357, 526, 869, 889, 890, 960, 991, 999, 1075, 1077, 1157, 1378, 1383, 1384, 1385, 1404, 1432], "corasick": [715, 725, 727, 739, 1321, 1331, 1333, 1345], "core": [1, 261, 357, 917, 991, 1432, 1435], "cores_right": [261, 357, 917, 991], "corner": [22, 42, 139, 357], "corr": [357, 1425], "corrcoef": [221, 357], "correct": [97, 148, 156, 162, 521, 522, 563, 677, 689, 707, 869, 921, 991, 1152, 1153, 1195, 1280, 1292, 1314, 1404], "correctli": [42, 357, 802, 816, 842], "correl": [221, 357, 798, 844, 1421], "correlationmethod": 798, "correspond": [245, 260, 289, 315, 327, 357, 443, 484, 493, 498, 511, 666, 676, 680, 682, 684, 686, 688, 691, 693, 695, 774, 807, 808, 810, 811, 856, 857, 869, 891, 911, 916, 938, 991, 1108, 1121, 1126, 1139, 1269, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1421], "cosd": 1425, "cosh": [869, 1404], "cosin": [388, 389, 453, 454, 614, 869, 1008, 1009, 1078, 1079, 1404, 1429], "cost": [261, 292, 357, 737, 917, 991, 1344], "cost_usd": [737, 1344], "cot": [869, 1404, 1425], "cotang": [455, 869, 1080, 1404, 1429], "cotd": 1425, "could": [41, 95, 104, 357, 704, 802, 812, 816, 859, 869, 888, 897, 991, 1311, 1404], "count": [42, 172, 214, 223, 245, 277, 278, 289, 321, 327, 333, 348, 357, 387, 404, 415, 457, 470, 482, 520, 544, 566, 574, 587, 592, 615, 638, 654, 662, 666, 676, 680, 682, 684, 686, 688, 691, 693, 695, 716, 768, 777, 779, 787, 793, 801, 825, 838, 852, 869, 885, 897, 911, 929, 938, 963, 979, 991, 997, 1007, 1024, 1034, 1082, 1089, 1094, 1106, 1151, 1174, 1198, 1206, 1219, 1224, 1253, 1261, 1266, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1322, 1374, 1391, 1393, 1404, 1409, 1413, 1425], "count_digit": 716, "count_num": [42, 357], "counterpart": 147, "countri": [260, 357, 471, 916, 991, 1095], "country_holidai": [470, 482, 793, 1094, 1106], "covar": 1421, "covar_samp": 1421, "covari": [148, 800, 845, 869, 1421], "cover": 12, "cow": [735, 736, 1341, 1342], "cpu": [151, 152, 174, 314, 357, 966, 1382, 1404], "crab": [714, 726, 1320, 1332], "crate": [39, 49, 102, 357, 714, 716, 722, 723, 724, 726, 737, 738, 751, 753, 754, 758, 991, 997, 1320, 1322, 1328, 1329, 1330, 1332, 1343, 1344, 1357, 1359, 1360, 1364], "creat": [40, 42, 48, 49, 50, 51, 52, 53, 55, 57, 99, 132, 136, 138, 151, 152, 153, 154, 157, 159, 163, 167, 168, 180, 181, 182, 183, 184, 185, 186, 187, 207, 217, 218, 245, 278, 281, 289, 314, 315, 327, 331, 334, 357, 360, 361, 474, 498, 511, 520, 544, 606, 614, 667, 676, 680, 682, 684, 686, 688, 691, 693, 695, 796, 806, 807, 808, 809, 810, 811, 812, 826, 855, 856, 857, 859, 865, 869, 889, 890, 897, 903, 911, 938, 960, 964, 991, 995, 996, 1075, 1077, 1088, 1098, 1126, 1139, 1151, 1174, 1259, 1267, 1270, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1382, 1384, 1404, 1409, 1431, 1432, 1435], "create_async_engin": 153, "create_engin": [40, 357], "created_at": [198, 201, 202], "created_bi": [198, 201, 202], "creation": [143, 145, 152], "credenti": [10, 33, 34, 35, 36, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 197, 357, 881, 991], "credential_provid": [10, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 197, 357, 991], "credentialprovideraw": 10, "credentialproviderfunct": [10, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 197, 357, 991], "cross": [259, 357, 915, 991, 1420], "crustacean": [726, 1332], "cst": [498, 511, 1126, 1139], "csv": [38, 39, 49, 50, 51, 52, 53, 54, 55, 150, 151, 152, 156, 157, 166, 200, 357, 881, 893, 946, 991], "csvencod": [151, 152, 166], "csvquotestyl": [39, 49, 357, 991], "ctx": [53, 54, 55, 1413, 1415, 1416, 1417, 1418, 1419, 1432], "cube": [1, 62, 450, 661, 869, 1072, 1404, 1426], "cuda": 966, "cum_count": [869, 1404], "cum_count_revers": [457, 869], "cum_max": [869, 1404], "cum_max_all_fil": [458, 869], "cum_max_revers": [458, 869], "cum_min": [869, 1404], "cum_min_revers": [459, 869], "cum_prod": [380, 869, 1404], "cum_prod_revers": [460, 869], "cum_reduc": 802, "cum_sum": [547, 656, 767, 805, 869, 913, 991, 1194, 1404], "cum_sum_revers": [461, 869], "cumsum_horizont": 804, "cumul": [457, 458, 459, 460, 461, 801, 802, 803, 804, 805, 869, 1082, 1083, 1084, 1085, 1086, 1404], "cumulative_ev": [869, 1404], "cumulative_sal": [656, 869], "current": [2, 3, 5, 6, 32, 39, 40, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 139, 143, 144, 145, 153, 154, 161, 163, 164, 166, 169, 170, 171, 179, 180, 182, 183, 184, 185, 186, 187, 197, 217, 218, 225, 259, 260, 286, 304, 314, 319, 357, 360, 361, 479, 579, 657, 869, 884, 889, 890, 899, 915, 916, 936, 945, 949, 966, 991, 997, 1075, 1077, 1095, 1103, 1211, 1262, 1382, 1387, 1404, 1409, 1416, 1432], "cursor": [40, 153, 357], "custom": [1, 29, 41, 42, 59, 60, 61, 62, 105, 147, 164, 185, 187, 223, 265, 281, 343, 357, 422, 470, 482, 500, 503, 606, 614, 615, 678, 779, 793, 829, 830, 846, 869, 897, 921, 974, 991, 1041, 1094, 1106, 1128, 1131, 1238, 1246, 1281, 1393, 1404, 1435], "cut": [663, 869, 1267, 1404], "cxx": 1427, "cypher": 153, "d": [30, 37, 39, 41, 42, 44, 45, 48, 135, 172, 212, 236, 243, 245, 246, 247, 259, 263, 285, 308, 309, 319, 323, 325, 329, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 380, 382, 457, 480, 500, 503, 550, 621, 660, 696, 702, 716, 723, 737, 738, 743, 751, 753, 754, 794, 795, 812, 818, 848, 869, 907, 911, 915, 935, 949, 955, 970, 972, 975, 976, 977, 978, 979, 980, 981, 991, 997, 1082, 1104, 1128, 1131, 1179, 1204, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1322, 1329, 1343, 1344, 1349, 1357, 1359, 1360, 1371, 1404, 1420, 1422, 1424, 1427, 1428], "d1": [42, 357, 474], "d2": 474, "d3": 474, "d789": [42, 357], "d_4": [743, 1349], "d_awai": [696, 869], "d_to_even": [696, 869], "dai": [72, 73, 90, 245, 258, 260, 289, 327, 357, 360, 470, 482, 490, 491, 493, 494, 496, 498, 500, 503, 504, 511, 513, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 793, 806, 807, 808, 809, 810, 811, 812, 856, 857, 869, 911, 916, 938, 991, 997, 1094, 1106, 1118, 1119, 1121, 1122, 1124, 1126, 1128, 1131, 1132, 1139, 1141, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1428], "dark": 1413, "data": [0, 1, 12, 20, 21, 23, 26, 30, 37, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 61, 66, 71, 72, 73, 75, 86, 87, 89, 90, 99, 102, 106, 108, 111, 125, 132, 133, 134, 135, 136, 137, 138, 139, 140, 147, 150, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 205, 209, 211, 218, 219, 229, 231, 232, 233, 243, 244, 245, 257, 258, 259, 262, 264, 265, 279, 280, 281, 284, 290, 291, 292, 294, 298, 301, 309, 314, 315, 316, 319, 321, 331, 335, 355, 357, 361, 375, 383, 384, 385, 388, 389, 390, 391, 392, 393, 396, 399, 400, 401, 402, 403, 405, 408, 410, 411, 412, 413, 414, 419, 420, 421, 423, 424, 426, 427, 428, 429, 430, 431, 432, 444, 446, 447, 448, 452, 453, 454, 455, 456, 463, 464, 465, 470, 471, 472, 473, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 525, 536, 538, 539, 540, 544, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 565, 566, 570, 571, 573, 578, 585, 587, 594, 605, 607, 613, 614, 615, 650, 651, 655, 656, 663, 665, 666, 669, 670, 671, 672, 674, 675, 680, 682, 684, 686, 688, 691, 693, 695, 696, 698, 700, 702, 705, 706, 707, 713, 716, 717, 718, 721, 722, 723, 724, 728, 729, 731, 732, 733, 741, 742, 743, 744, 751, 752, 753, 754, 756, 758, 761, 770, 771, 772, 775, 776, 782, 788, 796, 799, 806, 807, 808, 809, 810, 811, 812, 822, 823, 825, 826, 827, 828, 829, 830, 840, 843, 855, 856, 857, 860, 865, 869, 881, 889, 890, 893, 898, 902, 904, 910, 911, 939, 943, 946, 960, 991, 996, 997, 999, 1004, 1005, 1017, 1019, 1020, 1021, 1022, 1023, 1025, 1027, 1028, 1030, 1040, 1042, 1045, 1046, 1047, 1049, 1050, 1063, 1065, 1067, 1068, 1075, 1076, 1077, 1088, 1089, 1094, 1095, 1096, 1097, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1148, 1149, 1151, 1155, 1156, 1174, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1200, 1201, 1202, 1203, 1205, 1210, 1217, 1219, 1226, 1237, 1239, 1246, 1260, 1267, 1269, 1273, 1274, 1275, 1276, 1278, 1279, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1299, 1301, 1309, 1314, 1319, 1320, 1322, 1323, 1324, 1326, 1327, 1328, 1329, 1330, 1334, 1335, 1336, 1337, 1338, 1339, 1347, 1348, 1349, 1350, 1357, 1358, 1359, 1360, 1362, 1364, 1367, 1378, 1383, 1384, 1385, 1386, 1390, 1403, 1404, 1413, 1420, 1427, 1432, 1434], "data_bar": [42, 357], "data_bar_2010": [42, 357], "data_label": [42, 357], "data_page_s": [48, 52, 357, 991], "data_source_format": 202, "databas": [40, 130, 153, 154, 357, 881], "databrick": 192, "databricks_format": 200, "datafram": [0, 1, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 64, 65, 66, 85, 97, 103, 106, 107, 132, 133, 134, 135, 136, 137, 138, 139, 141, 146, 147, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 166, 169, 170, 171, 175, 176, 179, 180, 190, 207, 355, 356, 360, 361, 369, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 438, 441, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 755, 756, 757, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 865, 869, 881, 884, 891, 892, 893, 895, 897, 899, 902, 904, 908, 911, 915, 916, 917, 918, 919, 921, 926, 927, 932, 937, 939, 946, 947, 949, 954, 955, 956, 957, 959, 962, 967, 968, 970, 971, 972, 974, 975, 976, 977, 978, 979, 980, 981, 982, 984, 985, 991, 996, 997, 1088, 1089, 1125, 1151, 1174, 1246, 1267, 1333, 1337, 1349, 1350, 1373, 1379, 1380, 1393, 1404, 1413, 1414, 1415, 1416, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1432, 1435], "dataframeplot": [357, 360], "dataload": [319, 357], "datapoint": [245, 357, 911, 991], "dataset": [16, 48, 76, 151, 152, 155, 156, 162, 166, 167, 171, 172, 259, 319, 357, 563, 869, 881, 915, 921, 991, 1195, 1404, 1433], "datasourceformat": [202, 205], "datat": [42, 357], "datatyp": [0, 39, 49, 132, 134, 135, 136, 138, 158, 160, 161, 163, 165, 170, 171, 183, 184, 186, 229, 238, 264, 357, 363, 366, 367, 369, 444, 523, 606, 614, 615, 702, 730, 772, 795, 802, 803, 814, 816, 828, 829, 830, 842, 846, 865, 869, 881, 902, 991, 996, 997, 1063, 1089, 1144, 1246, 1308, 1386, 1404, 1430], "datatypeexpr": [362, 369, 370, 371, 372, 373, 374, 375, 430, 444, 614, 615, 671, 730, 788, 802, 803, 816, 822, 823, 829, 830, 842, 869, 888, 991], "date": [18, 42, 58, 73, 151, 152, 154, 156, 162, 163, 166, 169, 171, 172, 216, 223, 243, 245, 258, 260, 289, 304, 357, 360, 470, 472, 473, 474, 475, 478, 480, 482, 483, 484, 486, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 656, 676, 680, 682, 684, 686, 688, 691, 693, 695, 751, 753, 772, 793, 807, 808, 810, 811, 818, 826, 828, 855, 869, 888, 897, 911, 916, 938, 991, 997, 1094, 1096, 1097, 1098, 1099, 1102, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1151, 1255, 1256, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1357, 1359, 1386, 1404, 1425, 1428, 1430], "date32": [258, 357], "date_format": [39, 49, 357, 991], "date_min": 493, "date_minus_1y_2mon": 1121, "date_part": 1425, "date_plus_1i": [493, 1121], "date_rang": [260, 327, 357, 478, 480, 494, 502, 513, 810, 811, 916, 991, 1102, 1117, 1122, 1123, 1140, 1141], "date_right": [260, 357, 916, 991], "datetim": [18, 39, 42, 49, 56, 58, 102, 139, 155, 163, 167, 169, 171, 182, 183, 184, 186, 197, 198, 201, 202, 216, 223, 243, 245, 258, 260, 289, 304, 327, 357, 360, 470, 471, 472, 473, 474, 475, 476, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 623, 656, 676, 680, 682, 684, 686, 688, 691, 693, 695, 751, 754, 772, 793, 806, 807, 808, 810, 811, 812, 818, 826, 828, 856, 857, 869, 888, 897, 911, 916, 938, 991, 996, 997, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1151, 1255, 1256, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1357, 1360, 1384, 1386, 1404, 1427, 1428], "datetime_cast": 56, "datetime_format": [39, 49, 357, 991], "datetime_rang": [245, 357, 472, 475, 490, 491, 493, 497, 498, 504, 505, 506, 507, 508, 509, 510, 511, 514, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 869, 911, 991, 1095, 1096, 1099, 1103, 1104, 1105, 1111, 1112, 1114, 1116, 1118, 1119, 1120, 1121, 1125, 1126, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "datetime_str": 500, "datetimecastopt": 56, "datetimeindex": 137, "david": 1433, "day_nam": [500, 503], "day_of_month": [478, 494, 513], "day_of_year": [478, 494, 513], "daylight": [245, 260, 289, 327, 357, 471, 479, 493, 498, 511, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 812, 856, 857, 869, 911, 916, 938, 991, 1103, 1121, 1126, 1139, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "dayofweek": 1428, "dayofyear": 1428, "days_diff": 504, "db": [40, 153, 154, 357], "dbapi2": 153, "dbc": [716, 1322], "dbreadengin": 154, "dbwriteengin": [40, 357], "dbwritemod": [40, 357], "dd": [42, 357, 1427], "ddd": [1, 42, 357, 762, 764, 765], "dddd": 1427, "ddof": [305, 328, 357, 419, 424, 602, 608, 690, 691, 694, 695, 712, 780, 798, 800, 844, 845, 850, 858, 869, 950, 958, 991, 1038, 1043, 1234, 1240, 1293, 1294, 1297, 1298, 1318, 1394, 1404], "ddww": 1427, "de": [146, 1427], "deal": [48, 52, 257, 357, 383, 385, 496, 497, 666, 751, 754, 783, 784, 785, 786, 809, 869, 991, 1004, 1005, 1124, 1125, 1269, 1357, 1360, 1404], "debug": [31, 375, 921, 991, 1435], "decad": [1413, 1428], "decai": [519, 520, 521, 522, 869, 1150, 1151, 1152, 1153, 1404], "decemb": [503, 1131], "decim": [9, 12, 13, 29, 30, 39, 42, 49, 151, 152, 166, 357, 361, 375, 696, 755, 869, 991, 997, 1299, 1361, 1404, 1426], "decimal_comma": [39, 49, 151, 152, 166, 357, 991], "decimal_separ": [9, 29], "declar": [132, 134, 135, 136, 138, 153, 160, 161, 170, 314, 319, 357, 859, 991, 997, 1413], "decod": [151, 152, 730], "decompos": [323, 357, 955, 991], "decompress": [48, 50, 52, 357, 991], "decor": [57, 59, 60, 61, 62, 182, 186, 265, 357, 615, 869, 880, 881, 1246, 1404], "dedic": [1, 133, 257, 291, 357, 997, 1432], "deem": [223, 357, 897, 991], "deepcopi": [217, 357, 889, 991, 1075, 1404], "def": [1, 57, 59, 60, 61, 62, 153, 180, 182, 186, 207, 280, 321, 357, 369, 380, 660, 720, 723, 748, 782, 829, 869, 892, 930, 931, 991, 997, 1326, 1329, 1435], "default": [4, 5, 9, 10, 11, 12, 16, 29, 32, 35, 36, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 64, 65, 66, 70, 73, 74, 75, 132, 133, 134, 135, 136, 137, 138, 139, 148, 151, 152, 154, 156, 157, 159, 160, 161, 162, 163, 166, 168, 169, 170, 171, 175, 177, 179, 180, 181, 182, 183, 184, 185, 186, 190, 207, 223, 224, 227, 228, 231, 240, 244, 245, 246, 257, 259, 260, 266, 270, 272, 279, 281, 289, 290, 291, 292, 293, 297, 300, 304, 305, 307, 312, 314, 315, 319, 322, 324, 325, 326, 328, 333, 342, 357, 375, 382, 383, 385, 403, 408, 417, 422, 430, 463, 465, 470, 482, 496, 497, 503, 516, 518, 519, 521, 522, 542, 555, 573, 581, 585, 594, 599, 600, 602, 606, 608, 609, 614, 622, 623, 626, 629, 648, 649, 651, 656, 657, 663, 666, 670, 671, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 698, 701, 703, 712, 713, 722, 729, 741, 746, 747, 748, 751, 753, 754, 756, 758, 779, 780, 783, 785, 788, 792, 793, 794, 797, 798, 800, 807, 808, 809, 810, 811, 812, 815, 818, 822, 823, 824, 826, 827, 828, 829, 834, 840, 843, 847, 850, 851, 853, 856, 857, 858, 859, 860, 869, 891, 892, 893, 897, 898, 900, 901, 903, 910, 911, 915, 916, 922, 926, 932, 934, 938, 942, 944, 945, 946, 949, 950, 954, 956, 957, 958, 963, 966, 973, 991, 995, 997, 1004, 1005, 1023, 1028, 1036, 1041, 1049, 1076, 1088, 1089, 1094, 1106, 1124, 1125, 1131, 1145, 1149, 1150, 1152, 1153, 1172, 1185, 1205, 1213, 1217, 1226, 1231, 1232, 1238, 1255, 1256, 1262, 1267, 1269, 1274, 1275, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1301, 1307, 1310, 1318, 1319, 1320, 1328, 1332, 1335, 1347, 1352, 1353, 1354, 1357, 1359, 1360, 1362, 1364, 1382, 1384, 1393, 1394, 1404, 1426, 1427, 1435], "default_match": [714, 726], "default_scop": 36, "default_valu": 375, "defaultazurecredenti": 35, "defaultdict": [292, 357], "defaultfieldvalu": 171, "defer": [207, 357, 360, 361, 1404, 1409], "defin": [39, 42, 49, 56, 73, 76, 153, 160, 163, 171, 179, 180, 182, 216, 227, 228, 232, 245, 265, 277, 280, 289, 326, 343, 357, 448, 550, 581, 615, 660, 663, 675, 676, 680, 682, 684, 686, 688, 691, 693, 695, 728, 733, 741, 752, 759, 807, 808, 810, 811, 826, 827, 830, 851, 856, 857, 869, 888, 900, 901, 904, 911, 930, 938, 946, 957, 974, 991, 995, 996, 997, 1068, 1179, 1213, 1246, 1267, 1279, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1334, 1339, 1347, 1358, 1365, 1404], "definit": [42, 77, 357, 563, 677, 869, 996, 997, 1195, 1280, 1404], "deflat": [37, 357], "deg": 1429, "degre": [305, 328, 357, 602, 608, 665, 690, 691, 694, 695, 712, 780, 790, 800, 844, 845, 850, 858, 869, 950, 958, 991, 1293, 1294, 1297, 1298, 1318, 1394, 1404, 1425], "delai": 97, "delet": [76, 1420, 1431], "deletionfil": 171, "delimit": [47, 49, 161, 170, 281, 312, 357, 713, 729, 991, 1319, 1335, 1379, 1404, 1427], "delta": [41, 155, 167, 200, 305, 328, 357, 602, 608, 690, 691, 694, 695, 712, 780, 800, 844, 845, 850, 858, 869, 881, 950, 958, 991, 1293, 1294, 1297, 1298, 1318, 1394, 1404], "delta_merge_opt": [41, 357], "delta_table_opt": [155, 167, 197], "delta_table_vers": 197, "delta_write_opt": [41, 357], "deltalak": [41, 155, 167, 174, 197, 357], "deltashar": 200, "deltat": [41, 155, 167, 357], "demo": [42, 357], "demonstr": [151, 533, 869, 997], "dens": [22, 243, 357, 666, 869, 1269, 1404], "densiti": [1404, 1409], "depend": [48, 53, 57, 63, 99, 153, 156, 162, 174, 212, 213, 357, 401, 402, 570, 571, 614, 615, 626, 663, 666, 812, 815, 818, 824, 829, 830, 869, 921, 991, 1001, 1021, 1022, 1202, 1203, 1246, 1267, 1269, 1404, 1435], "deploi": [182, 186], "deprec": [8, 41, 64, 67, 70, 151, 152, 163, 171, 179, 180, 181, 182, 186, 189, 214, 272, 315, 333, 338, 357, 477, 514, 535, 606, 614, 615, 633, 670, 702, 713, 721, 730, 781, 790, 798, 799, 869, 885, 891, 903, 926, 932, 942, 945, 956, 962, 963, 969, 991, 1070, 1101, 1110, 1111, 1142, 1171, 1274, 1319, 1327, 1384, 1404], "depth": 147, "desc": [997, 1413, 1416, 1420, 1422], "descend": [58, 215, 298, 303, 320, 357, 396, 418, 443, 601, 656, 666, 699, 700, 709, 710, 774, 779, 791, 869, 886, 943, 948, 953, 991, 1016, 1037, 1192, 1233, 1269, 1303, 1305, 1316, 1393, 1404], "describ": [182, 243, 357, 734, 991, 1340, 1404], "descript": [245, 357, 911, 991, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1430, 1433, 1434], "deseri": [147, 297, 357, 535, 629, 869, 942, 991], "deserializ": [224, 297, 357, 465, 629, 869, 898, 942, 991], "design": [314, 319, 357, 884], "desir": [182, 259, 357, 422, 514, 606, 915, 991, 1041, 1142, 1238], "destin": 154, "detail": [63, 133, 153, 154, 175, 177, 211, 245, 326, 357, 503, 772, 869, 911, 957, 966, 991, 1131, 1386, 1404, 1435], "determin": [16, 39, 42, 49, 58, 66, 95, 147, 151, 152, 153, 156, 162, 163, 166, 171, 173, 190, 215, 219, 238, 245, 257, 258, 265, 289, 320, 321, 327, 357, 375, 443, 482, 483, 496, 497, 544, 626, 663, 669, 671, 707, 715, 728, 730, 751, 752, 754, 774, 809, 827, 840, 843, 860, 869, 886, 894, 895, 902, 911, 938, 953, 959, 991, 1062, 1106, 1107, 1124, 1125, 1174, 1238, 1267, 1273, 1274, 1275, 1314, 1321, 1357, 1360, 1361, 1389, 1404], "determinist": [779, 869, 1393, 1404], "dev": [210, 1000, 1293, 1404], "develop": [154, 182, 186], "deviat": [305, 357, 521, 690, 691, 712, 850, 869, 950, 991, 1152, 1294, 1318, 1404, 1421], "devic": [314, 357, 891, 903, 932, 945, 966, 991, 1382, 1404], "devicememoryresourc": 966, "df": [1, 7, 8, 9, 12, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 59, 60, 85, 103, 107, 133, 134, 135, 136, 137, 138, 139, 152, 153, 154, 166, 179, 180, 182, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 234, 235, 236, 238, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 369, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 430, 431, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 681, 683, 685, 687, 689, 690, 692, 694, 696, 697, 698, 699, 700, 701, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 755, 756, 757, 759, 760, 761, 762, 764, 765, 766, 767, 768, 769, 770, 771, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 842, 846, 847, 849, 850, 851, 852, 853, 854, 855, 857, 858, 859, 865, 869, 893, 911, 938, 946, 955, 957, 971, 974, 982, 991, 997, 1125, 1151, 1333, 1337, 1349, 1350, 1380, 1404, 1409, 1413, 1414, 1415, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1432, 1435], "df0": [273, 357, 927, 991, 1419], "df1": [58, 66, 175, 176, 190, 230, 233, 273, 304, 329, 357, 927, 991, 1416, 1418, 1419, 1420, 1432], "df2": [58, 66, 175, 176, 190, 230, 233, 329, 357, 1416, 1418, 1419, 1420, 1432], "df3": [58, 357], "df4": 357, "df5": 357, "df6": 357, "df_a": 1432, "df_a1": [66, 190], "df_a2": [66, 190], "df_a3": [66, 190], "df_agg_nuniqu": [277, 357], "df_b": 1432, "df_count": [779, 869], "df_current_batch": 152, "df_d1": [66, 190], "df_d2": [66, 190], "df_from_str_repr": [313, 357], "df_h1": [66, 190], "df_h2": [66, 190], "df_new_grid": [548, 869], "df_nuniqu": [277, 357], "df_original_grid": [548, 869], "df_panda": 1414, "df_pd": 133, "df_tempor": [680, 682, 684, 686, 688, 691, 693, 695, 869], "dfi": 211, "diagon": [66, 190, 321, 357], "diagonal_relax": [66, 190], "diagram": [934, 991], "diana": 369, "dict": [32, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 59, 61, 63, 132, 134, 135, 136, 137, 138, 147, 148, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 182, 197, 198, 201, 202, 237, 257, 279, 290, 291, 292, 310, 311, 314, 319, 321, 357, 869, 991, 996, 997, 1162, 1404, 1417], "dictat": [148, 493, 869, 1121], "dictionari": [10, 32, 39, 41, 42, 44, 48, 49, 50, 51, 52, 63, 89, 132, 134, 135, 136, 138, 147, 151, 152, 153, 154, 155, 158, 160, 161, 163, 164, 165, 166, 167, 169, 170, 171, 197, 257, 279, 290, 291, 292, 310, 311, 314, 319, 357, 991, 996], "did": [471, 1095], "diff": [504, 505, 506, 507, 508, 509, 510, 595, 869, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1227, 1404], "differ": [42, 48, 56, 102, 105, 126, 151, 156, 171, 172, 175, 177, 207, 227, 233, 245, 246, 257, 259, 281, 289, 291, 292, 311, 314, 315, 321, 357, 466, 478, 493, 494, 497, 503, 512, 518, 533, 542, 551, 575, 595, 597, 648, 649, 651, 656, 670, 671, 751, 777, 815, 818, 824, 869, 882, 900, 901, 903, 911, 915, 938, 991, 995, 997, 1090, 1102, 1121, 1122, 1125, 1131, 1140, 1147, 1156, 1172, 1180, 1207, 1227, 1229, 1246, 1255, 1256, 1258, 1274, 1275, 1357, 1404, 1428, 1430, 1432], "digit": [74, 660, 696, 697, 723, 755, 869, 997, 1299, 1300, 1322, 1329, 1361, 1404, 1435], "dimens": [132, 134, 136, 138, 160, 161, 170, 357, 672, 869, 991, 1276, 1384, 1404], "dimension": [134, 136, 138, 315, 357, 991, 1404], "direct": [42, 154, 163, 168, 171, 300, 314, 325, 357, 417, 599, 701, 869, 944, 991, 1036, 1231, 1307, 1404], "directli": [6, 32, 42, 65, 66, 132, 153, 182, 186, 190, 207, 213, 292, 314, 357, 519, 521, 522, 671, 843, 869, 892, 991, 1150, 1152, 1153, 1275, 1382, 1404, 1416, 1432, 1435], "directori": [42, 48, 49, 50, 51, 52, 53, 55, 148, 163, 166, 169, 171, 357, 991], "dirpath": [37, 39, 44, 45, 48, 166, 357], "disabl": [10, 48, 52, 57, 98, 99, 163, 169, 183, 257, 357, 891, 991], "disable_string_cach": 99, "disallow": 182, "discard": [236, 285, 357, 529, 869, 907, 935, 991, 1160, 1404], "disco": [725, 727, 1331, 1333], "discont": [725, 727, 1331, 1333], "discourag": [615, 869], "discoveri": [281, 357], "discret": [463, 466, 516, 575, 595, 663, 869, 1088, 1090, 1145, 1207, 1227, 1267, 1404], "disk": [48, 49, 50, 51, 52, 157, 357, 630, 882, 893, 945, 991], "dispatch": 997, "displai": [7, 12, 13, 14, 15, 19, 20, 21, 25, 26, 27, 28, 42, 223, 243, 357, 375, 897, 903, 945, 991], "distanc": [260, 357, 916, 991], "distinct": [42, 186, 279, 281, 335, 357, 403, 423, 554, 555, 557, 573, 607, 666, 675, 812, 869, 1023, 1042, 1184, 1185, 1187, 1205, 1239, 1269, 1279, 1404, 1421, 1431, 1433, 1435], "distinct_count": [48, 52, 357, 991], "distinguish": [503, 1131], "distribut": [563, 707, 869, 934, 991, 1195, 1314, 1404], "div": 1425, "diverg": [64, 131], "divid": [22, 463, 498, 511, 519, 521, 522, 533, 563, 663, 666, 869, 1088, 1126, 1139, 1150, 1152, 1153, 1195, 1267, 1404, 1421, 1426], "divis": [533, 775, 869, 1426], "divisor": [305, 328, 357, 602, 608, 690, 691, 694, 695, 712, 780, 800, 844, 845, 850, 858, 869, 950, 958, 991, 1293, 1294, 1297, 1298, 1318, 1394, 1404], "dl": [319, 357], "do": [1, 42, 56, 58, 64, 134, 135, 138, 151, 163, 166, 171, 175, 176, 177, 178, 212, 223, 225, 233, 256, 259, 260, 281, 286, 309, 321, 325, 357, 360, 470, 577, 737, 738, 746, 747, 748, 798, 840, 843, 860, 887, 891, 897, 899, 903, 915, 916, 921, 932, 934, 936, 945, 966, 991, 997, 1087, 1094, 1156, 1209, 1343, 1344, 1352, 1353, 1354, 1387, 1404, 1409], "do_polars_oper": 31, "do_someth": 153, "do_various_th": 207, "doc": [41, 44, 45, 133, 154, 157, 159, 175, 177, 209, 210, 221, 357, 999, 1000], "document": [34, 102, 151, 153, 154, 209, 357, 361, 500, 503, 731, 751, 753, 754, 758, 865, 966, 999, 1128, 1131, 1337, 1357, 1359, 1360, 1364], "doe": [12, 39, 41, 49, 50, 51, 52, 58, 64, 65, 120, 132, 134, 135, 136, 138, 139, 151, 152, 153, 154, 155, 156, 160, 161, 166, 167, 170, 172, 190, 213, 218, 233, 240, 245, 246, 258, 259, 266, 285, 290, 291, 292, 322, 331, 334, 357, 360, 361, 430, 514, 529, 533, 542, 702, 715, 725, 727, 739, 747, 748, 777, 865, 869, 884, 890, 891, 892, 897, 903, 907, 911, 915, 921, 922, 931, 932, 935, 945, 954, 960, 964, 991, 1049, 1077, 1142, 1156, 1160, 1172, 1309, 1321, 1331, 1333, 1345, 1404, 1409, 1427], "doesn": [41, 151, 166, 245, 260, 357, 516, 869, 911, 916, 991, 1145, 1404], "dog": [714, 757, 760, 797, 1320, 1363, 1366], "doi": 1428, "dollar": [737, 738, 1343, 1344], "domain": [1, 723, 1329], "don": [66, 137, 172, 190, 245, 260, 265, 322, 325, 357, 462, 577, 615, 656, 869, 911, 916, 954, 991, 997, 1087, 1209, 1246, 1404], "done": [49, 50, 51, 52, 64, 65, 131, 152, 172, 207, 214, 260, 357, 386, 387, 656, 869, 885, 888, 891, 892, 893, 903, 916, 932, 946, 991, 1007, 1404], "dot": [58, 630, 865, 869, 934, 945, 991, 1404], "doubl": [316, 357, 737, 738, 1343, 1344], "dow": 1428, "down": [166, 169, 170, 171, 172, 216, 357, 444, 532, 869, 1163, 1404], "downcast": 56, "download": [161, 166, 169, 170, 630, 945, 991], "downstream": [315, 357, 700, 869, 1305, 1404], "dr": 168, "drago": [728, 1334], "dragon": 728, "dragonfr": 1334, "dragonfruit": [728, 741, 752, 1334, 1347, 1358], "dramat": 156, "draw": [22, 27, 182, 186, 1435], "drawback": 865, "drawfn": 1435, "drawing_charact": 22, "dremio": 153, "driver": [40, 153, 154, 357], "drop": [1, 135, 226, 227, 228, 265, 285, 322, 357, 466, 468, 469, 575, 576, 663, 869, 900, 901, 935, 954, 991, 1090, 1092, 1093, 1207, 1208, 1267, 1404, 1431], "drop_dupl": [322, 357, 954, 991], "drop_empty_col": [156, 162], "drop_empty_row": [156, 162], "drop_first": [312, 357, 1379, 1404], "drop_in_plac": 357, "drop_nan": [228, 357, 469, 869, 901, 991, 1093, 1404], "drop_nul": [227, 312, 357, 468, 869, 900, 991, 1092, 1379, 1404], "dset": 172, "dst": [498, 511, 1126, 1139], "dst_offset": [471, 1095], "dt": [1, 42, 58, 156, 162, 289, 357, 676, 812, 869, 878, 938, 991, 997, 1412, 1427, 1428], "dt1": 1427, "dt2": 1427, "dtm": [42, 357, 474, 503, 997, 1098, 1131, 1427], "dtm_iso": 503, "dtm_iso_strict": 503, "dtype": [12, 42, 56, 57, 61, 67, 73, 77, 89, 98, 99, 109, 132, 134, 136, 138, 139, 151, 152, 153, 154, 156, 160, 161, 162, 166, 170, 179, 180, 181, 182, 186, 209, 211, 216, 219, 231, 245, 260, 289, 313, 314, 315, 316, 319, 325, 334, 357, 370, 375, 430, 444, 445, 446, 447, 448, 449, 460, 461, 503, 514, 523, 536, 572, 581, 612, 622, 661, 668, 669, 676, 702, 704, 730, 751, 756, 768, 772, 778, 788, 795, 802, 803, 814, 816, 818, 822, 823, 825, 826, 827, 828, 840, 842, 843, 851, 860, 869, 888, 894, 911, 916, 931, 938, 964, 991, 996, 997, 999, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1049, 1063, 1064, 1065, 1067, 1068, 1069, 1075, 1085, 1086, 1089, 1090, 1131, 1142, 1149, 1182, 1200, 1201, 1204, 1213, 1237, 1244, 1246, 1265, 1273, 1277, 1308, 1311, 1336, 1357, 1362, 1374, 1381, 1382, 1384, 1385, 1386, 1387, 1392, 1404, 1432, 1435], "dtype_format": [42, 357], "dtype_of": 375, "dtypekind": 211, "dtypelik": [209, 999], "dtypeoper": [1, 61], "dubiou": 102, "duckdb": 139, "due": [245, 260, 289, 292, 327, 357, 382, 479, 493, 498, 511, 639, 676, 680, 682, 684, 686, 688, 691, 693, 695, 793, 807, 808, 810, 811, 856, 857, 869, 888, 911, 916, 938, 991, 1103, 1121, 1126, 1139, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "dummi": [312, 357, 614, 615, 829, 830, 869, 1379, 1404], "dump": 147, "duplic": [58, 107, 146, 252, 259, 260, 261, 322, 326, 357, 382, 552, 639, 663, 859, 869, 915, 916, 917, 954, 957, 991, 1181, 1267, 1404, 1433], "duplicateerror": [663, 869, 1267, 1404], "dur": [261, 357, 917, 991], "durat": [207, 260, 327, 357, 471, 479, 503, 504, 505, 506, 507, 508, 509, 510, 514, 520, 772, 807, 808, 810, 811, 856, 857, 869, 916, 991, 996, 997, 1095, 1103, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1142, 1151, 1384, 1386, 1404], "dure": [49, 50, 51, 52, 57, 64, 65, 106, 131, 146, 151, 152, 166, 171, 207, 233, 357, 702, 869, 882, 891, 892, 893, 903, 931, 932, 946, 965, 991, 1156, 1404], "dutch": [470, 482, 793, 1094, 1106], "dynam": [148, 245, 357, 422, 606, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 869, 911, 931, 991, 995, 1041, 1238, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "dynamicgroupbi": [245, 357], "e": [12, 35, 37, 39, 41, 44, 45, 48, 49, 147, 151, 157, 159, 163, 165, 169, 171, 172, 184, 224, 236, 243, 247, 256, 260, 263, 308, 309, 315, 325, 357, 380, 465, 516, 520, 523, 550, 551, 609, 615, 620, 621, 622, 623, 624, 626, 627, 628, 630, 631, 632, 702, 707, 726, 747, 748, 759, 814, 830, 848, 859, 869, 898, 907, 916, 919, 936, 991, 995, 996, 997, 1145, 1151, 1179, 1314, 1332, 1365, 1404, 1422, 1427, 1435], "e101": [42, 357], "e_filt": [626, 628], "e_sum_ov": [626, 628], "e_sum_slic": [626, 628], "each": [39, 42, 49, 53, 54, 55, 58, 67, 74, 85, 152, 153, 156, 161, 170, 175, 176, 177, 178, 180, 220, 222, 229, 236, 243, 244, 245, 258, 260, 265, 279, 281, 285, 289, 291, 293, 314, 319, 323, 326, 327, 335, 336, 338, 340, 342, 343, 351, 357, 396, 410, 443, 447, 448, 463, 482, 498, 511, 529, 554, 557, 579, 584, 587, 594, 604, 611, 615, 663, 666, 674, 675, 683, 687, 698, 703, 710, 723, 727, 728, 732, 733, 741, 743, 744, 752, 759, 774, 788, 791, 797, 822, 823, 827, 851, 859, 869, 891, 895, 896, 902, 907, 911, 916, 932, 935, 938, 955, 957, 967, 969, 971, 973, 974, 982, 991, 1016, 1030, 1067, 1068, 1074, 1088, 1106, 1126, 1139, 1184, 1187, 1211, 1216, 1219, 1226, 1236, 1267, 1269, 1278, 1279, 1301, 1310, 1329, 1333, 1334, 1338, 1339, 1347, 1349, 1350, 1358, 1365, 1373, 1404, 1421, 1427, 1432, 1433, 1435], "eager": [97, 245, 260, 264, 281, 325, 357, 472, 475, 478, 480, 490, 491, 493, 494, 497, 498, 502, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 680, 682, 684, 686, 688, 691, 693, 695, 788, 792, 794, 798, 800, 807, 808, 810, 811, 818, 822, 823, 826, 827, 840, 843, 847, 848, 851, 856, 857, 860, 868, 869, 911, 916, 921, 991, 996, 1095, 1096, 1099, 1102, 1103, 1104, 1105, 1111, 1112, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1432], "eager_execut": 1432, "eagerli": 1413, "ear": [741, 752, 1347], "earli": [946, 991], "earlier": [260, 357, 916, 991], "earliest": [245, 357, 496, 497, 751, 754, 809, 911, 983, 991, 1124, 1125, 1357, 1360], "easi": 207, "easiest": 212, "easili": [58, 295, 319, 331, 336, 357, 851, 865, 940, 960, 967, 991], "east": [76, 171, 261, 357, 917, 991], "ebf1d": [42, 357], "ed": [261, 357, 917, 991], "edg": [544, 869, 1174, 1404], "eee": [1, 42, 357, 997], "ef": 738, "effect": [42, 49, 50, 51, 52, 56, 238, 245, 357, 479, 533, 615, 641, 643, 645, 798, 869, 911, 946, 963, 964, 991, 1095, 1103], "effici": [133, 153, 256, 258, 357, 884], "efgh": 1427, "eg": [19, 27, 28, 42, 66, 154, 190, 207, 314, 357, 751, 754, 775, 869, 997, 1357, 1360], "egnaro": 1427, "either": [64, 65, 89, 148, 182, 255, 259, 260, 261, 279, 289, 290, 314, 315, 357, 520, 614, 661, 663, 676, 699, 751, 783, 791, 795, 851, 869, 891, 892, 915, 916, 917, 919, 938, 991, 995, 997, 1151, 1265, 1267, 1303, 1357, 1404, 1417, 1435], "element": [15, 16, 27, 177, 178, 181, 182, 184, 186, 212, 213, 215, 222, 255, 281, 290, 303, 305, 320, 328, 357, 388, 389, 390, 391, 392, 393, 404, 405, 410, 442, 443, 450, 453, 454, 455, 456, 458, 459, 460, 461, 462, 468, 469, 524, 525, 529, 542, 546, 555, 566, 568, 569, 574, 576, 577, 578, 579, 582, 587, 595, 596, 597, 598, 602, 603, 608, 610, 611, 615, 656, 657, 666, 669, 677, 678, 679, 681, 683, 685, 687, 689, 690, 692, 694, 699, 704, 705, 706, 710, 711, 712, 743, 744, 770, 771, 773, 774, 780, 791, 800, 826, 844, 845, 850, 858, 869, 886, 896, 948, 950, 953, 958, 991, 1008, 1009, 1010, 1011, 1012, 1013, 1019, 1020, 1024, 1025, 1030, 1039, 1061, 1062, 1072, 1075, 1078, 1079, 1080, 1081, 1083, 1084, 1085, 1086, 1087, 1092, 1093, 1154, 1155, 1160, 1161, 1173, 1176, 1185, 1194, 1196, 1198, 1199, 1200, 1201, 1206, 1208, 1209, 1210, 1211, 1214, 1219, 1227, 1228, 1229, 1230, 1235, 1242, 1243, 1246, 1262, 1269, 1273, 1280, 1281, 1282, 1284, 1286, 1288, 1290, 1292, 1293, 1295, 1297, 1303, 1311, 1312, 1313, 1317, 1318, 1349, 1350, 1361, 1375, 1376, 1377, 1381, 1388, 1389, 1390, 1394, 1404, 1421, 1422], "elementwis": [614, 656, 678, 679, 681, 683, 685, 687, 690, 692, 694, 829, 830, 869, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1404], "elig": [921, 991], "elimin": [64, 131, 563, 869, 1195, 1404], "elis": [273, 357, 927, 991], "ellips": 22, "ellipsi": [243, 357], "elppa": 1427, "els": [152, 1266, 1374, 1404], "email": [723, 1329], "email_part": [723, 1329], "emit": [931, 991], "emphas": [357, 361], "emploi": 997, "employe": 154, "empti": [15, 37, 39, 49, 111, 135, 151, 152, 156, 162, 164, 166, 217, 218, 245, 272, 324, 357, 375, 662, 713, 721, 768, 828, 847, 852, 869, 889, 890, 911, 926, 956, 991, 996, 997, 1075, 1077, 1161, 1182, 1196, 1266, 1319, 1327, 1374, 1404], "en": [22, 42, 357], "enabl": [30, 31, 48, 52, 57, 64, 65, 98, 99, 137, 155, 163, 167, 169, 175, 176, 177, 178, 191, 209, 316, 357, 383, 385, 670, 671, 700, 715, 725, 727, 739, 779, 865, 869, 891, 892, 903, 932, 945, 991, 999, 1004, 1005, 1274, 1275, 1305, 1321, 1331, 1333, 1345, 1385, 1393, 1404], "enable_string_cach": 98, "encapsul": [39, 49, 357, 991], "enclos": [535, 869], "encod": [70, 76, 88, 147, 151, 152, 166, 312, 357, 360, 427, 535, 674, 717, 763, 869, 1046, 1278, 1323, 1379, 1404, 1409], "encompass": [544, 869, 1174, 1404], "encount": [56, 122, 151, 152, 166, 171, 245, 357, 648, 649, 730, 731, 798, 802, 816, 869, 911, 991, 1255, 1256, 1336, 1337, 1404], "end": [39, 42, 49, 151, 152, 166, 245, 251, 281, 357, 426, 429, 432, 445, 449, 471, 498, 523, 548, 549, 600, 714, 719, 723, 728, 735, 741, 745, 746, 747, 750, 788, 793, 806, 807, 808, 809, 810, 811, 814, 822, 823, 826, 827, 856, 857, 859, 865, 869, 911, 914, 932, 991, 997, 1048, 1064, 1069, 1095, 1126, 1177, 1178, 1192, 1232, 1325, 1329, 1334, 1341, 1347, 1351, 1352, 1353, 1358, 1404, 1427], "endian": [430, 1049], "endpoint": [192, 463, 663, 826, 869, 1088, 1267, 1404], "ends_a": 1427, "ends_in_digit": 1427, "ends_with": [426, 432, 449, 714, 745, 997, 1069, 1351, 1425], "ends_with_expr": 429, "ends_with_lit": 429, "engin": [11, 16, 40, 49, 50, 51, 52, 64, 65, 97, 146, 153, 154, 156, 162, 188, 244, 259, 265, 315, 322, 343, 357, 848, 891, 892, 893, 903, 910, 915, 921, 926, 932, 945, 946, 954, 966, 974, 988, 991, 995, 1246, 1384, 1404, 1416, 1432], "engine_opt": [40, 156, 357], "enginetyp": [49, 50, 51, 52, 64, 65, 891, 892, 893, 903, 932, 945, 946, 991], "enough": [577, 707, 869, 1209, 1314, 1404], "ensur": [12, 42, 53, 55, 97, 137, 148, 154, 181, 184, 209, 236, 244, 266, 279, 281, 285, 290, 315, 357, 550, 730, 869, 907, 910, 921, 922, 935, 966, 991, 997, 999, 1384, 1404], "enter": 207, "entir": [42, 153, 156, 162, 357], "entri": [207, 357, 991, 996, 1432], "entropi": [869, 1404], "enum": [375, 997], "enumer": [76, 137, 151, 152, 156, 162, 166, 258, 357], "env": [4, 187], "env_onli": 32, "environ": [4, 32, 39, 44, 48, 49, 50, 51, 52, 64, 65, 148, 161, 163, 164, 166, 169, 170, 171, 185, 188, 192, 197, 314, 357, 891, 892, 893, 903, 932, 945, 946, 991], "eol_char": [151, 152, 166], "eparg": 1427, "epoch": [72, 73, 511, 818, 1139, 1428], "epoch_": [480, 1104], "epoch_n": [480, 1104], "epochtimeunit": [480, 818, 1104], "eq": [236, 285, 357, 518, 529, 869, 907, 935, 991, 1147, 1404], "eq_miss": [869, 1258, 1404], "equal": [57, 99, 151, 152, 166, 175, 176, 177, 178, 245, 260, 261, 273, 303, 357, 463, 511, 517, 518, 538, 551, 565, 614, 651, 663, 669, 677, 678, 679, 681, 683, 685, 687, 689, 690, 692, 694, 710, 735, 736, 739, 761, 791, 826, 829, 830, 844, 845, 859, 865, 869, 907, 911, 916, 917, 927, 935, 948, 991, 1088, 1126, 1147, 1180, 1238, 1258, 1267, 1273, 1280, 1281, 1282, 1284, 1286, 1288, 1290, 1292, 1293, 1295, 1297, 1341, 1342, 1345, 1367, 1404, 1421, 1424, 1435], "equiprob": [223, 283, 349, 357, 664, 687, 688, 841, 869, 897, 933, 980, 991, 1089, 1268, 1290, 1291, 1404], "equival": [42, 66, 132, 134, 135, 136, 138, 160, 161, 170, 190, 245, 255, 277, 357, 380, 384, 448, 517, 518, 520, 533, 538, 540, 565, 613, 635, 637, 650, 651, 652, 655, 661, 733, 757, 759, 760, 767, 775, 782, 869, 911, 991, 1068, 1146, 1147, 1151, 1167, 1169, 1194, 1197, 1245, 1257, 1258, 1339, 1363, 1365, 1366, 1404, 1414, 1422, 1434], "err": 724, "error": [16, 41, 56, 65, 66, 97, 117, 121, 123, 134, 135, 138, 146, 151, 152, 156, 163, 166, 171, 190, 260, 266, 281, 290, 315, 357, 382, 407, 408, 427, 470, 581, 583, 585, 639, 671, 714, 717, 722, 724, 726, 730, 731, 751, 753, 754, 758, 869, 888, 892, 916, 922, 966, 974, 991, 1027, 1028, 1046, 1094, 1213, 1215, 1217, 1275, 1320, 1323, 1328, 1330, 1332, 1336, 1337, 1357, 1359, 1360, 1364, 1384, 1404, 1430], "escap": [100, 151, 152, 154, 166, 720, 737, 738, 1326, 1343, 1344], "esp": 16, "especi": [180, 675, 869, 991, 1279, 1404], "espresso": 997, "est": 810, "establish": [153, 207], "estim": [151, 152, 214, 231, 357, 387, 521, 522, 563, 787, 869, 885, 991, 1007, 1149, 1152, 1153, 1195, 1404], "estimated_s": [357, 1404], "etc": [23, 41, 42, 148, 151, 155, 156, 157, 159, 167, 168, 357, 869, 997, 1302, 1304, 1404, 1428], "ethan": 369, "eu": [167, 168], "eur": [243, 357, 1435], "europ": [475, 479, 497, 1099, 1103, 1125], "eval": [172, 313, 357, 615, 813, 869, 1246, 1381, 1404], "evalu": [49, 50, 51, 52, 171, 172, 234, 236, 260, 285, 357, 369, 384, 397, 399, 400, 434, 435, 436, 437, 439, 440, 462, 529, 547, 568, 569, 579, 606, 655, 656, 783, 785, 788, 792, 794, 798, 800, 807, 808, 810, 811, 813, 822, 823, 826, 827, 840, 843, 847, 851, 856, 857, 859, 860, 869, 891, 893, 907, 913, 915, 916, 935, 946, 991, 1017, 1019, 1020, 1053, 1054, 1055, 1056, 1058, 1059, 1087, 1160, 1200, 1201, 1211, 1395, 1404, 1424], "even": [39, 49, 151, 259, 357, 520, 579, 660, 663, 696, 813, 869, 915, 991, 997, 1151, 1267, 1299, 1404], "evenli": [245, 357, 826, 827, 911, 991], "event": [65, 892, 991], "eventu": [40, 357], "ever": [656, 869], "everi": [16, 39, 49, 151, 152, 156, 162, 166, 239, 245, 311, 327, 357, 399, 400, 401, 402, 405, 407, 415, 458, 459, 460, 461, 462, 498, 511, 525, 537, 570, 571, 575, 578, 582, 583, 584, 592, 595, 600, 604, 675, 721, 802, 803, 869, 909, 911, 946, 991, 1019, 1020, 1021, 1022, 1025, 1027, 1034, 1083, 1084, 1085, 1086, 1087, 1126, 1139, 1155, 1166, 1202, 1203, 1207, 1210, 1214, 1215, 1216, 1224, 1227, 1232, 1236, 1279, 1327, 1404], "everybodi": [715, 739, 1321, 1345], "everyth": 997, "evolv": [266, 357, 922, 991], "ew": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "ewm_mean": [869, 1404], "ewm_mean_bi": [869, 1404], "ewm_std": [869, 1404], "ewm_var": [869, 1404], "ewma": [520, 869, 1151, 1404], "exact": [177, 180, 182, 186, 260, 301, 357, 387, 533, 721, 749, 750, 751, 753, 754, 775, 869, 916, 991, 1327, 1357, 1359, 1360], "exactli": [134, 135, 138, 175, 176, 177, 178, 181, 182, 186, 266, 357, 743, 744, 749, 750, 812, 922, 991, 1309, 1349, 1350, 1355, 1356, 1404], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 66, 67, 76, 85, 89, 97, 98, 99, 103, 106, 107, 108, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 148, 151, 152, 153, 154, 155, 156, 160, 161, 162, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 362, 364, 365, 368, 369, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 869, 881, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 991, 996, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1165, 1166, 1168, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1404, 1409, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1424, 1426, 1427, 1428, 1429, 1430, 1432, 1433, 1434], "exc_tb": 1432, "exc_typ": 1432, "exc_val": 1432, "exce": [243, 357], "excel": [38, 42, 150, 156, 357, 881], "excelspreadsheetengin": 156, "except": [0, 225, 240, 245, 247, 260, 263, 264, 266, 286, 308, 357, 671, 728, 752, 814, 869, 881, 899, 911, 916, 922, 931, 936, 991, 997, 1063, 1173, 1199, 1275, 1334, 1358, 1375, 1384, 1404, 1431], "exclud": [182, 186, 245, 357, 443, 458, 461, 470, 482, 550, 622, 774, 793, 865, 869, 911, 991, 997, 1094, 1106, 1179, 1404], "excluded_dtyp": [182, 183, 186], "exclus": [290, 357, 782, 788, 822, 823, 869], "execut": [11, 41, 49, 50, 51, 52, 57, 64, 65, 66, 97, 148, 153, 154, 262, 304, 357, 465, 577, 702, 779, 848, 859, 869, 887, 891, 892, 893, 898, 903, 921, 931, 932, 934, 945, 946, 949, 966, 991, 1209, 1393, 1404, 1414, 1415, 1416, 1418, 1432, 1434], "execute_glob": 1432, "execute_opt": [153, 154], "execution_opt": 153, "exist": [1, 40, 41, 42, 43, 58, 76, 107, 155, 163, 167, 171, 182, 225, 240, 281, 286, 321, 326, 331, 332, 357, 375, 382, 426, 429, 432, 474, 497, 737, 738, 796, 869, 895, 899, 902, 936, 939, 957, 959, 960, 961, 991, 997, 1098, 1125, 1343, 1344, 1434], "existing_t": 1434, "existing_table_path": [41, 357], "exit": [57, 98, 207, 1419, 1432], "exp": [519, 520, 521, 522, 869, 1150, 1151, 1152, 1153, 1404, 1425], "exp_a": 1426, "expand": [148, 151, 163, 166, 171, 525, 620, 624, 669, 765, 869, 997, 1155, 1273, 1404], "expand_selector": 997, "expans": 762, "expect": [10, 39, 41, 44, 48, 49, 50, 51, 52, 55, 56, 74, 80, 112, 120, 128, 151, 153, 155, 161, 163, 164, 166, 167, 169, 170, 171, 176, 178, 197, 213, 357, 828, 919, 921, 991], "expens": [151, 152, 161, 163, 166, 170, 171, 185, 187, 257, 265, 290, 291, 292, 321, 322, 357, 615, 869, 895, 897, 902, 939, 954, 959, 991, 1156, 1246, 1404, 1435], "experiment": [48, 52, 164, 261, 319, 357, 826, 827, 917, 991], "expiri": [10, 39, 41, 44, 48, 49, 50, 51, 52, 155, 161, 163, 164, 166, 167, 169, 170, 171, 197, 357, 991], "explain": [131, 212, 262, 357, 891, 991, 1431], "explainformat": [903, 991], "explicit": [42, 106, 153, 166, 180, 304, 326, 357, 503, 842, 949, 957, 991, 1131], "explicitli": [76, 106, 153, 154, 180, 182, 207, 240, 259, 357, 670, 851, 869, 880, 915, 991, 1432], "explod": [148, 357, 443, 531, 615, 656, 672, 774, 869, 991, 1276, 1404, 1422], "explor": [223, 357, 897, 991], "expon": [661, 869, 1265, 1404, 1426], "exponenti": [519, 520, 521, 522, 524, 661, 869, 1150, 1151, 1152, 1153, 1154, 1404, 1426], "export": [42, 44, 45, 50, 210, 257, 258, 291, 292, 309, 311, 314, 357, 865, 991, 996, 997, 1000, 1378, 1404], "expos": 881, "expr": [1, 53, 54, 55, 58, 59, 60, 61, 62, 146, 148, 234, 235, 250, 259, 260, 261, 264, 266, 277, 281, 290, 295, 296, 314, 319, 331, 332, 357, 364, 365, 368, 369, 375, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 860, 861, 862, 864, 865, 869, 870, 871, 874, 875, 876, 877, 878, 905, 906, 915, 916, 917, 922, 933, 940, 941, 960, 961, 991, 997, 1087, 1146, 1147, 1151, 1158, 1159, 1165, 1167, 1169, 1197, 1209, 1211, 1216, 1232, 1236, 1245, 1257, 1258, 1273, 1320, 1325, 1332, 1351, 1404, 1430], "expr1": [1424, 1432], "expr2": [1424, 1432], "expr_unique_subset": [277, 357], "express": [0, 8, 53, 54, 55, 64, 146, 148, 179, 182, 186, 215, 232, 234, 236, 244, 250, 259, 260, 261, 264, 265, 266, 277, 281, 285, 290, 295, 296, 300, 303, 314, 319, 320, 331, 332, 334, 336, 343, 357, 369, 380, 382, 383, 384, 385, 386, 388, 389, 390, 391, 392, 393, 396, 397, 401, 402, 403, 404, 405, 408, 421, 426, 427, 428, 429, 430, 431, 432, 443, 445, 447, 448, 449, 452, 453, 454, 455, 456, 462, 463, 464, 465, 467, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 517, 518, 520, 523, 525, 526, 528, 529, 533, 535, 536, 538, 539, 540, 541, 547, 550, 551, 552, 553, 554, 555, 556, 557, 565, 566, 570, 571, 573, 574, 577, 578, 579, 585, 587, 605, 606, 612, 613, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 631, 633, 635, 637, 639, 640, 642, 644, 650, 651, 653, 655, 656, 660, 661, 662, 663, 665, 669, 670, 671, 672, 674, 675, 698, 699, 700, 703, 705, 706, 708, 710, 713, 714, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 735, 737, 738, 739, 741, 742, 743, 744, 752, 756, 766, 767, 770, 771, 774, 775, 776, 778, 779, 781, 782, 783, 784, 786, 788, 789, 790, 791, 792, 794, 795, 796, 797, 798, 799, 800, 802, 803, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 837, 840, 842, 843, 844, 845, 847, 849, 851, 853, 855, 856, 857, 859, 860, 865, 868, 881, 886, 891, 903, 904, 907, 910, 915, 916, 917, 922, 932, 935, 940, 941, 944, 945, 948, 953, 960, 961, 962, 964, 967, 974, 991, 997, 1024, 1062, 1076, 1087, 1094, 1098, 1131, 1146, 1147, 1151, 1157, 1167, 1169, 1179, 1197, 1206, 1209, 1211, 1245, 1246, 1257, 1258, 1273, 1274, 1275, 1303, 1307, 1320, 1321, 1322, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1336, 1337, 1343, 1344, 1345, 1358, 1362, 1389, 1404, 1422, 1424, 1426, 1427, 1431], "exprmetanamespac": [619, 625], "ext": [53, 54, 55, 153], "extend": [0, 135, 329, 357, 526, 869, 881, 995, 1006, 1157, 1404], "extend_const": [869, 1404], "extens": [316, 357, 1385, 1404], "extern": [204, 962, 991], "external_shallow_clon": 204, "extra": [41, 56, 148, 151, 152, 155, 157, 159, 163, 166, 167, 168, 171, 233, 245, 266, 357, 869, 911, 922, 991, 1156, 1404], "extra_column": [171, 266, 357, 922, 991], "extra_struct_field": [56, 266, 357, 922, 991], "extract": [139, 212, 304, 357, 473, 476, 478, 481, 484, 485, 486, 487, 488, 489, 492, 494, 495, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 512, 513, 515, 660, 723, 724, 725, 730, 731, 741, 743, 869, 1097, 1100, 1101, 1102, 1105, 1108, 1112, 1113, 1114, 1116, 1117, 1120, 1122, 1123, 1127, 1129, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1141, 1143, 1329, 1330, 1331, 1336, 1337, 1347, 1425], "extract_mani": 1333, "extract_numb": [660, 869], "extracted_nr": 723, "extrem": [526, 678, 869, 1157, 1281, 1404], "extrema": [702, 869, 1308, 1404], "f": [53, 59, 152, 153, 236, 243, 258, 309, 315, 321, 325, 357, 380, 422, 431, 606, 702, 721, 751, 754, 796, 869, 907, 991, 997, 1041, 1238, 1327, 1357, 1360, 1404, 1409, 1422], "f32": [1, 61, 216, 304, 313, 319, 357, 702, 848, 869, 888, 931, 949, 991, 997, 1244, 1404, 1430], "f4": [315, 357], "f5ed2452": [42, 357], "f64": [7, 9, 12, 13, 17, 20, 21, 23, 24, 25, 26, 27, 29, 58, 60, 62, 66, 85, 97, 133, 135, 160, 172, 179, 182, 190, 216, 217, 218, 221, 223, 224, 225, 227, 229, 234, 235, 238, 242, 243, 244, 245, 250, 251, 259, 260, 266, 268, 269, 270, 271, 275, 281, 282, 283, 302, 303, 305, 307, 319, 328, 331, 336, 339, 341, 344, 345, 346, 347, 349, 350, 357, 375, 379, 382, 388, 389, 390, 391, 392, 393, 412, 413, 419, 424, 431, 444, 450, 451, 453, 454, 455, 463, 464, 468, 469, 499, 516, 517, 518, 519, 520, 521, 522, 523, 524, 527, 528, 532, 533, 538, 540, 548, 549, 551, 558, 559, 560, 561, 563, 565, 577, 589, 590, 602, 608, 609, 610, 611, 613, 616, 617, 618, 634, 637, 639, 648, 649, 650, 651, 657, 661, 663, 664, 665, 666, 670, 671, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 704, 705, 706, 707, 711, 712, 766, 770, 771, 775, 779, 780, 789, 790, 794, 796, 798, 800, 813, 814, 826, 827, 830, 833, 834, 835, 848, 850, 858, 865, 869, 888, 889, 897, 899, 900, 905, 906, 910, 911, 914, 915, 916, 922, 924, 925, 931, 933, 948, 950, 958, 960, 962, 967, 970, 972, 975, 976, 977, 978, 980, 981, 991, 997, 1008, 1009, 1010, 1011, 1012, 1013, 1032, 1038, 1043, 1050, 1072, 1073, 1078, 1079, 1080, 1088, 1089, 1092, 1093, 1127, 1150, 1151, 1152, 1153, 1154, 1158, 1163, 1174, 1177, 1178, 1209, 1221, 1222, 1234, 1240, 1241, 1242, 1243, 1262, 1265, 1267, 1269, 1275, 1280, 1281, 1284, 1285, 1286, 1287, 1290, 1291, 1292, 1293, 1294, 1297, 1298, 1299, 1300, 1311, 1312, 1313, 1317, 1376, 1377, 1392, 1393, 1404, 1413, 1421, 1422, 1426, 1429, 1432, 1435], "f64_awai": [696, 869], "f64_to_even": [696, 869], "f_string": 817, "fa1e": [756, 1362], "face": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 169, 170, 171, 197, 357, 991], "facil": 153, "facilit": [219, 357], "factor": [519, 521, 522, 772, 869, 1150, 1152, 1153, 1386, 1404], "fail": [39, 40, 41, 44, 48, 49, 50, 51, 52, 133, 155, 157, 161, 163, 164, 166, 167, 169, 170, 171, 197, 211, 315, 322, 357, 397, 501, 751, 753, 754, 758, 869, 954, 991, 1246, 1357, 1359, 1360, 1364, 1384, 1404, 1430], "fall": [171, 463, 663, 869, 891, 903, 932, 945, 966, 991, 1088, 1267, 1404, 1421], "fallback": [133, 156], "fals": [5, 7, 8, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 30, 32, 34, 39, 41, 42, 48, 49, 50, 51, 52, 53, 56, 58, 64, 65, 66, 133, 134, 135, 137, 138, 139, 146, 148, 151, 152, 153, 155, 156, 157, 159, 161, 162, 163, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 211, 215, 216, 217, 218, 223, 230, 236, 238, 242, 243, 244, 245, 249, 252, 253, 254, 257, 259, 260, 262, 264, 269, 270, 276, 277, 279, 281, 282, 285, 290, 291, 292, 293, 298, 301, 303, 304, 307, 310, 312, 315, 316, 320, 321, 322, 326, 327, 329, 331, 339, 341, 344, 345, 347, 350, 357, 375, 383, 384, 385, 396, 399, 400, 403, 407, 408, 418, 423, 426, 429, 432, 443, 444, 445, 449, 457, 458, 459, 460, 461, 463, 470, 482, 483, 499, 504, 505, 506, 507, 508, 509, 510, 516, 517, 518, 519, 521, 522, 540, 541, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 568, 569, 573, 577, 581, 583, 585, 594, 601, 607, 613, 614, 615, 619, 621, 622, 623, 625, 627, 630, 631, 650, 651, 653, 655, 656, 658, 659, 663, 666, 677, 678, 679, 681, 683, 685, 687, 689, 690, 692, 694, 698, 699, 700, 702, 707, 709, 710, 713, 714, 715, 716, 719, 725, 726, 727, 729, 730, 737, 738, 739, 742, 743, 745, 751, 753, 754, 756, 774, 776, 779, 782, 783, 784, 785, 786, 788, 791, 792, 793, 794, 797, 798, 800, 801, 802, 803, 807, 808, 810, 811, 816, 822, 823, 826, 827, 828, 829, 830, 834, 840, 842, 843, 847, 848, 851, 853, 856, 857, 859, 860, 869, 886, 888, 889, 890, 891, 892, 893, 897, 903, 907, 910, 911, 915, 916, 919, 921, 932, 935, 943, 945, 946, 948, 949, 953, 954, 957, 960, 966, 970, 972, 975, 976, 978, 981, 991, 996, 997, 1004, 1005, 1016, 1019, 1020, 1023, 1027, 1028, 1037, 1042, 1045, 1046, 1048, 1051, 1062, 1063, 1064, 1066, 1069, 1074, 1075, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1094, 1106, 1107, 1127, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1147, 1148, 1150, 1152, 1153, 1160, 1162, 1168, 1170, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1200, 1201, 1205, 1209, 1213, 1215, 1217, 1226, 1233, 1239, 1252, 1258, 1260, 1263, 1264, 1267, 1269, 1270, 1271, 1280, 1281, 1282, 1284, 1286, 1288, 1290, 1292, 1293, 1295, 1297, 1301, 1303, 1305, 1309, 1314, 1316, 1319, 1320, 1321, 1322, 1325, 1331, 1332, 1333, 1335, 1336, 1343, 1344, 1345, 1348, 1349, 1351, 1357, 1359, 1360, 1362, 1379, 1384, 1385, 1389, 1390, 1393, 1395, 1404, 1414, 1416, 1422, 1427, 1432], "far": [42, 357], "fashion": [259, 357], "fast": [48, 50, 52, 148, 185, 187, 357, 526, 700, 869, 991, 995, 1157, 1305, 1404, 1435], "fast_executemani": [40, 357], "fast_project": 965, "faster": [49, 50, 51, 52, 64, 153, 156, 233, 315, 325, 357, 615, 777, 869, 891, 893, 903, 932, 945, 946, 991, 1156, 1246, 1404], "fastexcel": [156, 174], "favor": [40, 171, 357], "fay": 147, "feat1": [314, 319, 357], "feat2": [314, 319, 357], "feather": [44, 157, 169, 357, 881], "featur": [1, 48, 63, 74, 80, 168, 314, 319, 357], "feature_0": [962, 991], "feature_0_train": [962, 991], "feature_1": [962, 991], "feature_nam": [319, 357], "feb": [174, 1427], "februari": 1427, "fed": 747, "feel": [715, 739, 1321, 1345], "fetch": [141, 891, 991], "fetch_california_h": [319, 357], "few": [243, 264, 357], "fewer": [728, 752, 991, 1334, 1358], "ff": 1421, "ff00": [756, 1362], "fff": 1, "ffff00": [427, 428, 717, 1046, 1047, 1323], "ffffff": [42, 357], "ffi": [231, 357, 1149, 1404], "fgg": 997, "fghi": 1427, "fh": 152, "fiction": 1413, "field": [38, 39, 41, 49, 52, 56, 89, 124, 127, 135, 142, 266, 323, 357, 367, 368, 375, 422, 606, 614, 615, 641, 643, 645, 674, 723, 724, 730, 743, 744, 764, 765, 766, 772, 779, 802, 803, 829, 851, 859, 869, 922, 955, 991, 996, 1041, 1238, 1246, 1278, 1330, 1349, 1350, 1371, 1373, 1386, 1404, 1428], "field_0": [422, 606, 1041, 1238], "field_1": [422, 606, 1041, 1238], "field_2": [1041, 1238], "field_id": 142, "field_n": [422, 606, 1041, 1238], "field_nam": [367, 615, 869, 1246, 1404], "field_overwrit": [52, 142, 991], "fiftyf": [546, 869], "figsiz": [630, 932, 945, 991], "figur": [630, 697, 869, 945, 991, 1300, 1404], "file": [2, 3, 5, 6, 34, 37, 38, 39, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 148, 149, 150, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 224, 233, 297, 357, 465, 535, 629, 633, 869, 898, 942, 991, 995, 1156, 1404], "file_cache_ttl": [161, 166, 169, 170], "file_idx": [54, 143, 145], "file_path": [53, 54, 55, 143, 145], "filenam": 157, "filesourc": [156, 162, 163, 171], "filesystem": [41, 155, 167, 168, 357], "fill": [58, 66, 190, 217, 234, 235, 300, 325, 357, 361, 425, 458, 461, 527, 528, 534, 548, 549, 679, 681, 683, 685, 687, 690, 692, 694, 701, 817, 840, 843, 860, 869, 905, 906, 944, 962, 991, 1044, 1158, 1159, 1164, 1178, 1259, 1282, 1284, 1288, 1293, 1295, 1297, 1307, 1404], "fill_char": [735, 736, 1341, 1342], "fill_nan": [235, 357, 528, 869, 906, 991, 1159, 1404], "fill_nul": [58, 234, 327, 357, 425, 458, 461, 527, 534, 701, 869, 905, 962, 991, 1044, 1158, 1164, 1404], "fill_valu": [300, 325, 357, 701, 869, 944, 991, 1307, 1404], "fillnullstrategi": [235, 357, 528, 869, 906, 991, 1159, 1404], "film": 1413, "filter": [1, 59, 64, 97, 146, 166, 167, 168, 171, 172, 227, 228, 252, 253, 254, 281, 285, 343, 357, 445, 449, 626, 628, 719, 745, 781, 806, 809, 813, 816, 847, 848, 859, 869, 884, 891, 900, 901, 903, 913, 932, 935, 945, 949, 974, 991, 997, 1304, 1404, 1420], "final": [15, 42, 58, 148, 171, 260, 262, 357, 519, 521, 522, 869, 897, 916, 991, 1150, 1152, 1153, 1404, 1433], "find": [66, 190, 241, 357, 546, 699, 714, 715, 727, 869, 1176, 1303, 1321, 1333, 1343, 1404], "find_pat": 726, "fine": [891, 903, 932, 945, 988, 991], "finish": [53, 54, 55, 233, 357, 1156, 1404], "finish_callback": [53, 54, 55], "finit": [553, 775, 798, 869, 1183, 1404], "first": [48, 58, 151, 152, 156, 157, 159, 162, 163, 166, 171, 175, 176, 177, 178, 212, 243, 245, 247, 259, 260, 263, 264, 265, 276, 280, 281, 289, 308, 312, 313, 321, 322, 327, 334, 340, 357, 375, 396, 398, 407, 462, 466, 491, 493, 498, 514, 533, 543, 546, 554, 567, 575, 577, 583, 584, 614, 627, 636, 660, 661, 672, 676, 699, 710, 714, 721, 722, 726, 728, 730, 731, 737, 738, 752, 759, 794, 795, 802, 816, 820, 859, 865, 869, 893, 911, 912, 915, 916, 920, 930, 931, 938, 954, 962, 964, 971, 991, 997, 1016, 1027, 1087, 1089, 1090, 1119, 1121, 1126, 1142, 1173, 1176, 1184, 1199, 1207, 1209, 1215, 1216, 1238, 1246, 1303, 1316, 1327, 1328, 1330, 1332, 1334, 1336, 1337, 1343, 1344, 1358, 1365, 1375, 1379, 1381, 1384, 1404, 1424, 1425, 1427, 1433, 1435], "first_column": [42, 357], "first_non_nul": [606, 1238], "first_part": [743, 744, 1349, 1350], "fisher": [563, 677, 707, 869, 1195, 1280, 1314, 1404], "fit": [147, 257, 301, 325, 357, 702, 843, 869, 1308, 1309, 1404], "five": [318, 357, 1435], "fix": [12, 67, 76, 180, 514, 812, 827, 1142], "flag": [63, 155, 167, 179, 298, 315, 357, 700, 714, 722, 723, 726, 737, 738, 869, 903, 921, 943, 991, 997, 1305, 1320, 1328, 1329, 1332, 1343, 1344, 1384, 1404, 1427], "flat": [147, 292, 357, 578, 672, 869, 1210, 1276, 1404], "flat_from_polar": 142, "flatten": 869, "flavour": [42, 153, 357], "flight": 153, "flight_sql": 153, "flightsql": 153, "float": [12, 13, 39, 42, 49, 56, 78, 79, 151, 152, 166, 172, 175, 176, 177, 178, 179, 182, 186, 211, 223, 227, 231, 234, 260, 266, 283, 293, 314, 315, 349, 357, 375, 451, 463, 468, 469, 499, 516, 517, 518, 519, 521, 522, 527, 532, 533, 538, 540, 548, 551, 553, 556, 558, 559, 560, 561, 565, 594, 609, 613, 616, 630, 634, 648, 649, 650, 651, 661, 663, 664, 678, 679, 681, 683, 685, 687, 688, 690, 692, 694, 696, 698, 704, 775, 812, 841, 843, 869, 897, 900, 905, 916, 922, 933, 945, 980, 991, 997, 1063, 1073, 1088, 1089, 1091, 1092, 1093, 1127, 1145, 1149, 1150, 1152, 1153, 1158, 1163, 1174, 1180, 1195, 1226, 1241, 1255, 1256, 1265, 1266, 1267, 1268, 1281, 1282, 1284, 1286, 1288, 1290, 1291, 1293, 1295, 1297, 1299, 1301, 1304, 1311, 1314, 1318, 1374, 1384, 1394, 1404, 1432, 1435], "float16": [319, 357], "float32": [1, 12, 39, 49, 61, 216, 238, 266, 313, 314, 315, 319, 357, 520, 869, 888, 922, 931, 991, 997, 1151, 1182, 1244, 1382, 1384, 1387, 1404], "float4": [304, 357, 848, 949, 991, 1430], "float64": [12, 39, 42, 49, 97, 135, 151, 160, 179, 182, 219, 229, 231, 238, 266, 294, 319, 331, 357, 388, 389, 390, 391, 392, 393, 431, 444, 453, 454, 455, 464, 499, 504, 505, 506, 507, 508, 509, 510, 520, 523, 558, 559, 665, 705, 706, 770, 771, 814, 830, 840, 843, 860, 865, 869, 894, 902, 922, 931, 939, 960, 991, 996, 997, 1127, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1151, 1385, 1392, 1404], "float_cast": [56, 266, 357, 922, 991], "float_list": 85, "float_precis": [9, 12, 29, 39, 42, 49, 357, 991], "float_scientif": [39, 49, 357, 991], "floatcastopt": 56, "floatfmt": 13, "floor": [60, 533, 869, 1404, 1425], "floor_a": 1426, "floordiv": [775, 869], "fmt": [13, 260, 357, 547, 817, 869, 913, 916, 991], "fmt_number": [357, 361], "fmt_str_length": [14, 807, 808, 810, 811], "fmt_table_cell_list_len": 15, "fmt_titl": [42, 357], "fn": [802, 803, 816, 842], "foggi": [737, 738, 1343, 1344], "fold": [357, 627, 794, 802, 803, 842, 859], "folder": 172, "follow": [42, 48, 63, 137, 146, 151, 152, 153, 155, 156, 162, 166, 167, 168, 245, 260, 264, 265, 280, 289, 315, 327, 357, 371, 372, 373, 374, 493, 498, 511, 520, 551, 660, 661, 666, 676, 680, 682, 684, 686, 688, 689, 691, 693, 695, 704, 764, 775, 790, 807, 808, 810, 811, 830, 856, 857, 859, 861, 862, 864, 869, 870, 871, 874, 876, 877, 878, 911, 916, 930, 938, 991, 997, 1121, 1126, 1139, 1151, 1180, 1265, 1269, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1302, 1304, 1311, 1384, 1396, 1398, 1400, 1404, 1405, 1410, 1411, 1412, 1430, 1435], "font": [42, 357], "font_color": [42, 357], "font_siz": [42, 357], "foo": [37, 39, 41, 44, 45, 46, 47, 48, 147, 160, 161, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 233, 236, 238, 240, 241, 242, 246, 247, 248, 249, 250, 251, 253, 259, 263, 265, 267, 268, 269, 270, 271, 274, 275, 278, 281, 283, 285, 286, 287, 290, 293, 294, 295, 297, 299, 302, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 321, 322, 323, 328, 329, 330, 335, 357, 446, 463, 465, 493, 537, 543, 547, 567, 619, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 663, 672, 713, 716, 718, 721, 723, 724, 729, 740, 742, 744, 746, 747, 748, 749, 750, 757, 760, 769, 787, 798, 799, 800, 815, 819, 820, 821, 824, 825, 831, 833, 835, 836, 838, 839, 841, 847, 850, 854, 858, 859, 865, 869, 888, 894, 895, 899, 900, 901, 902, 907, 913, 914, 915, 929, 935, 936, 939, 940, 954, 955, 959, 962, 991, 996, 997, 1065, 1088, 1121, 1217, 1265, 1267, 1276, 1322, 1324, 1327, 1329, 1330, 1346, 1350, 1355, 1356, 1363, 1366, 1404, 1418, 1420, 1421, 1422, 1424, 1427, 1430], "foo1": 1427, "foo11": [238, 357], "foo_": [624, 742, 817], "foo_1": [312, 357], "foo_2": [312, 357], "foo_3_4": 1427, "foo_a": [281, 357], "foo_a_bar_1": 817, "foo_at_1": 1422, "foo_b": [281, 357], "foo_b_bar_2": 817, "foo_bar": [619, 625, 742, 828, 1418], "foo_bar2": [619, 625], "foo_bar_baz": 742, "foo_c_bar_3": 817, "foo_low": [757, 1427], "foo_mean": 1422, "foo_q25": 1421, "foo_q50": 1421, "foo_q75": 1421, "foo_std": 1421, "foo_strip": 746, "foo_strip_end": 747, "foo_strip_start": 748, "foo_sum": [1421, 1422], "foo_uniqu": 1422, "foo_upp": [760, 1427], "foo_var": 1421, "foobar": [749, 750, 1355, 1356, 1427], "foobarbar": [750, 1356], "foofoobar": [749, 1355], "foral": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "forbid": [56, 266, 357, 922, 991], "forc": [151, 157, 161, 163, 260, 265, 315, 343, 357, 915, 916, 974, 991, 1246, 1384, 1404], "force_parallel": [260, 357, 915, 916, 991], "foreign": 204, "form": [39, 49, 132, 134, 135, 136, 138, 160, 161, 170, 213, 257, 291, 325, 357, 503, 657, 734, 759, 869, 884, 991, 1131, 1262, 1340, 1365, 1404, 1427], "format": [7, 13, 17, 18, 22, 38, 39, 42, 44, 45, 48, 49, 102, 133, 149, 151, 152, 153, 156, 157, 159, 162, 166, 172, 210, 224, 232, 243, 257, 272, 281, 291, 292, 297, 311, 324, 355, 357, 361, 375, 465, 498, 500, 503, 629, 630, 631, 751, 753, 754, 758, 812, 869, 898, 903, 904, 926, 942, 956, 991, 995, 1000, 1128, 1131, 1357, 1359, 1360, 1364, 1403, 1427, 1428], "formul": [227, 357, 900, 901, 991], "formula": [42, 357, 516, 869, 1145, 1404], "fortran": [314, 315, 357], "forward": [235, 260, 300, 327, 357, 417, 458, 461, 470, 490, 528, 534, 599, 701, 869, 906, 916, 944, 991, 1036, 1094, 1118, 1159, 1164, 1231, 1307, 1404], "forward_fil": [425, 528, 869, 1044, 1159, 1404], "found": [22, 39, 42, 49, 103, 124, 127, 135, 139, 156, 163, 171, 229, 304, 357, 546, 699, 726, 731, 749, 750, 751, 754, 869, 949, 991, 1176, 1303, 1332, 1337, 1355, 1356, 1357, 1360, 1404, 1416, 1427, 1432], "four": [318, 357, 1432], "fourth": [563, 869, 1195, 1404], "frac": [519, 520, 521, 522, 707, 869, 1150, 1151, 1152, 1153, 1314, 1404], "fraction": [39, 49, 175, 176, 177, 178, 293, 357, 499, 504, 505, 506, 507, 508, 509, 510, 594, 657, 698, 751, 754, 779, 869, 991, 1127, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1226, 1262, 1301, 1357, 1360, 1393, 1404], "fragment": 1432, "frame": [39, 40, 42, 49, 58, 65, 66, 135, 152, 156, 162, 175, 176, 190, 216, 217, 223, 257, 258, 262, 265, 273, 277, 280, 290, 291, 292, 304, 319, 325, 326, 357, 503, 848, 888, 889, 897, 927, 930, 931, 949, 957, 991, 997, 1075, 1131, 1404, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1431, 1435], "frame_data": [1415, 1418], "frameinittyp": [357, 991], "frametyp": [58, 1432], "framework": [281, 324, 357, 956, 991], "freedom": [305, 328, 357, 602, 608, 690, 691, 694, 695, 712, 780, 800, 844, 845, 850, 858, 869, 950, 958, 991, 1293, 1294, 1297, 1298, 1318, 1394, 1404], "freeli": [266, 357, 848, 922, 949, 991, 997], "freez": [42, 357], "freeze_pan": [42, 357], "frequenc": [327, 357, 779, 869, 1393, 1404], "frequent": [1302, 1304, 1404], "fri": [357, 360], "fridai": [245, 357, 470, 482, 500, 793, 911, 991, 1094, 1106, 1128, 1131], "friendship": 14, "from": [2, 3, 4, 5, 6, 12, 18, 30, 34, 38, 39, 41, 42, 44, 48, 49, 50, 51, 52, 56, 58, 66, 76, 89, 97, 102, 106, 122, 126, 132, 133, 134, 135, 136, 137, 138, 139, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 179, 180, 181, 182, 183, 185, 186, 187, 190, 192, 197, 212, 216, 223, 224, 225, 231, 233, 236, 237, 243, 245, 257, 258, 259, 260, 261, 262, 266, 272, 281, 285, 286, 289, 290, 292, 293, 295, 296, 304, 312, 319, 321, 322, 324, 325, 326, 327, 333, 357, 360, 361, 422, 431, 463, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 518, 520, 523, 533, 535, 548, 563, 582, 594, 606, 623, 648, 649, 651, 656, 657, 660, 663, 665, 676, 678, 680, 682, 684, 686, 688, 691, 693, 695, 696, 698, 710, 722, 723, 728, 730, 731, 741, 746, 747, 748, 749, 750, 751, 752, 753, 754, 758, 777, 789, 790, 793, 794, 806, 807, 808, 809, 810, 811, 812, 826, 828, 843, 848, 855, 856, 857, 859, 865, 868, 869, 888, 897, 898, 899, 907, 911, 915, 916, 917, 922, 926, 935, 936, 938, 940, 941, 949, 954, 956, 957, 962, 963, 991, 995, 996, 997, 1041, 1050, 1088, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1147, 1149, 1151, 1156, 1195, 1214, 1226, 1238, 1255, 1256, 1258, 1259, 1262, 1267, 1281, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1301, 1328, 1329, 1334, 1336, 1347, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1364, 1379, 1395, 1404, 1413, 1414, 1415, 1416, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434, 1435], "from_arrai": 848, "from_arrow": 133, "from_json": 869, "from_panda": 133, "from_repr": [313, 357, 1381, 1404], "fromkei": [59, 61], "front": [245, 357, 911, 991], "fruit": [310, 357, 445, 449, 673, 719, 745, 752, 869, 1064, 1069, 1325, 1351, 1358], "fruits_revers": [673, 869], "fsspec": [151, 152, 157, 159, 167, 168, 174], "fsspecfileio": 168, "full": [13, 28, 48, 52, 58, 73, 102, 135, 138, 151, 152, 153, 155, 157, 160, 161, 163, 166, 167, 168, 170, 171, 172, 259, 326, 357, 728, 737, 738, 751, 752, 753, 754, 758, 807, 808, 915, 921, 957, 991, 995, 997, 1334, 1336, 1343, 1344, 1357, 1358, 1359, 1360, 1364, 1404, 1420, 1435], "full_path": [143, 145], "full_sent": 797, "fulli": [184, 280, 293, 315, 357, 544, 869, 893, 991, 1174, 1404], "funcnam": [42, 357], "function": [0, 10, 33, 34, 35, 36, 39, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 64, 65, 74, 80, 97, 98, 99, 129, 131, 133, 137, 139, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 184, 185, 186, 187, 189, 190, 192, 193, 194, 195, 196, 197, 203, 207, 209, 211, 215, 221, 224, 231, 238, 261, 264, 265, 266, 272, 280, 281, 286, 304, 314, 315, 316, 319, 320, 321, 324, 326, 343, 357, 360, 361, 369, 370, 375, 383, 422, 442, 443, 462, 463, 465, 470, 482, 519, 521, 522, 544, 606, 614, 615, 640, 641, 656, 660, 663, 675, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 695, 704, 707, 727, 755, 772, 773, 774, 783, 787, 793, 795, 799, 801, 802, 803, 815, 816, 818, 820, 821, 824, 826, 827, 829, 830, 833, 835, 838, 840, 842, 846, 850, 854, 858, 860, 865, 869, 881, 886, 891, 892, 893, 898, 903, 917, 921, 922, 926, 930, 931, 932, 936, 946, 949, 953, 956, 957, 964, 965, 974, 991, 995, 999, 1041, 1061, 1062, 1071, 1087, 1088, 1094, 1106, 1149, 1150, 1152, 1153, 1174, 1238, 1246, 1267, 1279, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1296, 1298, 1302, 1304, 1309, 1311, 1314, 1333, 1382, 1385, 1387, 1388, 1389, 1404, 1409, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1430, 1431, 1432, 1433, 1434, 1435], "function_nam": 148, "further": 865, "futur": [44, 45, 65, 211, 223, 259, 298, 309, 357, 892, 897, 915, 943, 991, 1378, 1404], "g": [35, 39, 49, 147, 151, 155, 157, 159, 165, 167, 172, 184, 211, 224, 256, 315, 325, 357, 380, 465, 520, 523, 615, 702, 814, 859, 869, 898, 936, 991, 995, 996, 1151, 1404, 1435], "g1": [529, 781, 869], "g2": [529, 781, 869], "g_1": [707, 869, 1314, 1404], "gag": 28, "gamma": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "gantt": [932, 991], "gather": [152, 239, 357, 396, 537, 582, 791, 869, 909, 991, 1016, 1166, 1214, 1404], "gather_everi": [357, 869, 991, 1404], "gb": [231, 357, 431, 1149, 1404], "gbp": 1435, "gc": [41, 155, 167, 168, 357], "gca": 28, "gcaacgcatata": 28, "gcp": [36, 39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 168, 169, 170, 171, 197, 357, 991], "gdp": [260, 357, 916, 991], "gdp2": [260, 357, 916, 991], "gdp_date": [260, 357, 916, 991], "ge": [869, 1404], "gener": [1, 42, 53, 54, 97, 146, 147, 153, 154, 173, 179, 180, 181, 182, 183, 184, 186, 211, 219, 221, 281, 293, 312, 315, 321, 357, 594, 698, 703, 788, 807, 810, 822, 823, 825, 826, 827, 843, 846, 856, 857, 869, 893, 991, 1063, 1226, 1301, 1310, 1379, 1404, 1435], "geq": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "germani": [260, 357, 916, 991], "get": [53, 54, 55, 58, 65, 76, 148, 158, 164, 165, 172, 203, 212, 215, 219, 220, 229, 237, 240, 242, 245, 247, 248, 252, 254, 255, 261, 263, 268, 275, 276, 281, 289, 290, 294, 299, 302, 308, 316, 320, 330, 340, 351, 357, 363, 364, 365, 366, 367, 368, 369, 370, 375, 381, 394, 395, 396, 398, 406, 409, 423, 431, 443, 446, 458, 459, 460, 461, 470, 480, 482, 530, 536, 543, 546, 562, 564, 567, 580, 586, 607, 616, 617, 618, 626, 628, 634, 648, 649, 658, 659, 664, 675, 676, 708, 712, 721, 768, 769, 773, 774, 776, 780, 791, 793, 815, 820, 824, 830, 831, 832, 833, 835, 836, 837, 839, 850, 854, 858, 869, 886, 891, 892, 893, 895, 902, 907, 908, 911, 912, 917, 918, 920, 938, 939, 947, 952, 953, 959, 971, 982, 991, 996, 1001, 1014, 1015, 1016, 1017, 1018, 1026, 1029, 1042, 1050, 1065, 1074, 1083, 1084, 1085, 1086, 1094, 1104, 1106, 1144, 1161, 1162, 1168, 1173, 1176, 1179, 1180, 1181, 1193, 1196, 1199, 1212, 1218, 1239, 1247, 1249, 1250, 1252, 1254, 1255, 1256, 1263, 1264, 1268, 1279, 1315, 1318, 1327, 1375, 1379, 1385, 1390, 1394, 1404], "get_chunk": 1404, "get_column": [211, 317, 357], "get_column_index": 357, "get_index_dtyp": 846, "get_polars_schema": 205, "get_table_info": 205, "get_token": 35, "get_worksheet_by_nam": [42, 357], "gevent": [65, 174, 892, 991], "gh": 738, "gh45": 738, "gh45ij67kl": 738, "ghi": [380, 723, 869, 997, 1329], "gil": [615, 869, 995], "git": 63, "github": [154, 357], "give": [161, 169, 170, 260, 272, 322, 324, 357, 375, 480, 533, 563, 669, 775, 779, 859, 869, 881, 916, 926, 934, 954, 956, 991, 1104, 1195, 1273, 1393, 1404, 1431], "given": [42, 53, 54, 55, 58, 97, 108, 113, 130, 132, 134, 135, 136, 138, 146, 147, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 166, 169, 170, 171, 177, 178, 179, 180, 182, 184, 185, 186, 187, 209, 231, 232, 234, 236, 245, 250, 255, 264, 265, 273, 279, 280, 285, 290, 291, 292, 300, 303, 319, 326, 357, 403, 417, 422, 431, 443, 452, 471, 475, 500, 502, 503, 516, 520, 544, 550, 573, 599, 606, 609, 615, 656, 660, 666, 669, 670, 672, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 699, 701, 723, 724, 735, 736, 751, 754, 761, 764, 774, 792, 794, 798, 800, 814, 815, 824, 829, 830, 843, 844, 845, 859, 869, 893, 904, 911, 921, 927, 930, 934, 935, 944, 948, 957, 974, 991, 996, 997, 999, 1023, 1036, 1041, 1050, 1076, 1095, 1099, 1128, 1130, 1131, 1145, 1149, 1151, 1174, 1179, 1194, 1205, 1231, 1238, 1241, 1244, 1246, 1259, 1265, 1269, 1273, 1276, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1303, 1307, 1329, 1330, 1341, 1342, 1357, 1360, 1361, 1367, 1392, 1395, 1404, 1413, 1415, 1420, 1422, 1423, 1426, 1427, 1432, 1434, 1435], "glimps": [223, 247, 357], "glob": [151, 152, 156, 157, 161, 163, 166, 169, 170, 171], "global": [10, 57, 98, 99, 156, 173, 182, 191, 304, 357, 670, 671, 848, 869, 949, 991, 1274, 1275, 1404, 1414, 1416, 1431], "gmt": [475, 479, 497, 1099, 1103, 1125], "go": [14, 151, 152, 166, 445, 719, 1064, 1325], "godfath": 1413, "goe": 14, "gonfruit": 1358, "good": [48, 50, 52, 257, 357, 991, 1426], "goodby": 1, "googl": [36, 155, 167, 168], "gpu": [11, 50, 64, 65, 314, 357, 891, 892, 903, 932, 945, 966, 988, 991, 1382, 1404], "gpu_devic": [314, 357], "gpudevic": [314, 357], "gpuengin": [11, 891, 903, 932, 945, 991], "grade": [1195, 1404], "grain": [891, 903, 932, 945, 988, 991], "granular": [52, 991, 1432], "grape": 1427, "graph": [64, 153, 262, 357, 630, 891, 913, 962, 991], "graphviz": [262, 357, 630, 945, 991], "great": [357, 361], "great_tabl": [357, 361], "greater": [217, 260, 357, 538, 540, 550, 707, 735, 736, 744, 761, 859, 869, 916, 991, 1179, 1314, 1341, 1342, 1350, 1367, 1404], "greatest": [1421, 1425], "greatli": [157, 169], "green": [57, 98, 99, 343, 779, 869, 974, 1393, 1404], "greenlet": [65, 892, 991], "greet": 1, "grid": [548, 869], "grid_point": [548, 869], "gridlin": [42, 357], "gross": 1413, "ground": 606, "group": [9, 29, 48, 52, 55, 148, 152, 171, 216, 244, 245, 258, 260, 277, 279, 281, 289, 292, 325, 327, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 381, 443, 525, 531, 536, 539, 577, 614, 615, 626, 628, 656, 666, 675, 676, 709, 710, 714, 722, 723, 724, 726, 737, 738, 774, 779, 830, 869, 888, 910, 911, 916, 938, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 991, 997, 1087, 1209, 1279, 1320, 1328, 1329, 1330, 1332, 1343, 1344, 1393, 1404, 1413, 1421, 1431, 1432], "group_bi": [245, 277, 281, 289, 327, 356, 357, 381, 433, 438, 441, 443, 529, 531, 536, 539, 614, 615, 656, 709, 710, 774, 779, 781, 807, 810, 830, 846, 869, 891, 892, 903, 911, 932, 934, 938, 945, 989, 991, 997, 1393, 1404], "group_by_dynam": [289, 357, 938, 991], "group_by_partit": [932, 991], "group_col": [529, 781, 869], "group_df": [343, 974], "group_dtyp": [656, 869], "group_index": [722, 1328], "group_to_row": [656, 869], "groupbi": [244, 357, 615, 830, 869], "grouper": [433, 438, 441, 869], "grow": [329, 357], "grown": [249, 357], "gt": [357, 361, 869, 1404], "gte": [529, 781, 869], "guarante": [11, 48, 52, 151, 152, 190, 215, 223, 246, 273, 320, 322, 357, 442, 443, 542, 772, 773, 774, 869, 886, 897, 927, 953, 954, 991, 1061, 1062, 1172, 1386, 1388, 1389, 1404], "guid": [146, 148, 869, 995, 1435], "gzip": [48, 52, 357, 991], "h": [325, 357, 380, 500, 503, 702, 737, 738, 751, 754, 758, 869, 1343, 1344, 1357, 1360, 1364, 1427, 1428], "ha": [41, 42, 49, 50, 51, 52, 56, 58, 65, 137, 153, 166, 189, 211, 327, 333, 338, 357, 367, 442, 443, 535, 614, 627, 633, 728, 752, 762, 773, 774, 798, 815, 824, 829, 830, 865, 869, 892, 945, 946, 963, 969, 974, 991, 1061, 1062, 1075, 1087, 1089, 1334, 1358, 1388, 1389, 1404], "half": [319, 357, 498, 519, 520, 521, 522, 696, 869, 1126, 1150, 1151, 1152, 1153, 1299, 1404], "half_away_from_zero": [696, 869, 1299, 1404], "half_lif": [519, 520, 521, 522, 869, 1150, 1151, 1152, 1153, 1404], "half_to_even": [696, 869, 1299, 1404], "ham": [37, 39, 41, 44, 45, 48, 216, 219, 220, 221, 225, 226, 227, 228, 229, 230, 236, 241, 246, 247, 249, 259, 263, 267, 269, 271, 274, 278, 283, 285, 286, 287, 290, 293, 294, 295, 302, 305, 306, 308, 312, 313, 315, 316, 317, 322, 328, 329, 357, 446, 630, 631, 865, 888, 894, 895, 899, 900, 901, 902, 907, 915, 929, 935, 936, 939, 940, 954, 962, 991, 1065, 1420, 1421], "ham_a": [312, 357], "ham_b": [312, 357], "ham_right": [259, 357, 915, 991], "hamburg": 865, "hand": [42, 151, 152, 166, 357, 595, 596, 597, 598, 1227, 1228, 1229, 1230], "handi": [470, 482, 793, 1094, 1106], "handl": [41, 43, 105, 139, 148, 151, 152, 166, 172, 236, 240, 285, 357, 466, 575, 721, 761, 869, 891, 907, 935, 991, 1090, 1207, 1327, 1367, 1404], "handler": [149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 224, 357, 465, 869, 898, 991], "happen": [153, 475, 663, 869, 1099, 1267, 1404], "hard": [97, 146, 166, 921, 991], "harder": [245, 357, 911, 991], "hardwar": 1435, "has_head": [151, 152, 156, 162, 166], "has_nul": [869, 1171, 1404], "has_prefix": [449, 745], "has_suffix": [445, 719], "has_two": 1422, "has_valid": 1404, "hash": [246, 357, 869, 1404], "hash_row": 357, "hat": [737, 738, 1343, 1344], "have": [5, 16, 32, 35, 42, 54, 57, 58, 66, 73, 99, 148, 149, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 171, 190, 212, 224, 233, 257, 259, 260, 281, 284, 289, 291, 292, 311, 319, 334, 357, 462, 465, 519, 521, 522, 627, 666, 670, 671, 676, 724, 739, 795, 869, 893, 898, 915, 916, 926, 938, 963, 964, 991, 997, 1087, 1089, 1150, 1152, 1153, 1156, 1269, 1274, 1275, 1343, 1345, 1404, 1431, 1433, 1435], "haystack": [723, 1329], "he": 747, "head": [76, 166, 243, 263, 308, 357, 386, 567, 869, 920, 991, 1199, 1375, 1404], "header": [39, 42, 48, 49, 52, 139, 151, 152, 156, 162, 166, 229, 321, 357, 991], "header_format": [42, 357], "header_nam": [321, 357], "headerless": 166, "heap": [148, 231, 357, 869, 1149, 1404], "heatmap": [42, 357], "heavili": 171, "height": [42, 147, 182, 228, 357, 360, 1404, 1409], "hell": [746, 1352], "hello": [1, 22, 746, 747, 748, 997, 1217, 1352, 1353, 1354, 1415, 1418, 1427], "hello_": 817, "hello_data": 1418, "hello_world": 1418, "help": [42, 175, 176, 177, 178, 357, 991], "helper": [357, 361, 865], "henc": [737, 1344], "here": [39, 41, 42, 44, 48, 49, 50, 51, 52, 132, 134, 135, 136, 138, 153, 154, 155, 160, 161, 163, 164, 166, 167, 168, 169, 170, 171, 180, 182, 186, 197, 212, 281, 357, 470, 482, 614, 615, 630, 724, 731, 793, 859, 869, 884, 945, 991, 997, 1094, 1106, 1337], "hex": [427, 428, 717, 718, 756, 1046, 1047, 1323, 1324, 1362], "hexadecim": [1046, 1047], "hf": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 169, 170, 171, 197, 357, 991], "hf_token": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 169, 170, 171, 197, 357, 991], "hi": [1, 1427], "hidden": [42, 357], "hidden_column": [42, 357], "hidden_file_prefix": 171, "hide": [23, 24, 25, 26], "hide_gridlin": [42, 357], "hide_password": 153, "high": [292, 357, 361, 663, 869, 881, 1267, 1404], "higher": [48, 52, 56, 223, 283, 349, 357, 664, 687, 688, 841, 869, 897, 933, 980, 991, 1089, 1268, 1290, 1291, 1404], "highest": [357, 361, 666, 778, 798, 869, 991, 1269, 1404], "highli": [148, 869], "hint": [132, 146], "hippopotamu": [735, 736, 1341, 1342], "hist": [869, 1404, 1409], "histogram": [1404, 1409], "hit": [887, 991], "hive": [53, 163, 169, 171], "hive_custom": 200, "hive_dir": [53, 55], "hive_partit": [163, 169, 171], "hive_schema": [163, 169, 171], "hive_serd": 200, "hmm": [997, 1427], "hold": [301, 315, 357, 551, 869, 1180, 1384, 1404], "holidai": [470, 482, 793, 1094, 1106], "home": [759, 1365], "horizont": [22, 66, 107, 190, 238, 249, 268, 270, 275, 307, 325, 357, 784, 786, 795, 796, 797, 802, 803, 805, 813, 816, 832, 834, 837, 842, 853, 962, 991], "host": [63, 151, 157, 159, 171], "hour": [161, 166, 169, 170, 245, 260, 289, 327, 357, 485, 487, 488, 492, 493, 496, 498, 499, 503, 505, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 809, 810, 811, 812, 826, 855, 856, 857, 869, 911, 916, 938, 991, 997, 1121, 1124, 1126, 1133, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1428], "hourly_r": 154, "hours_diff": 505, "hous": [319, 357], "how": [13, 39, 41, 42, 43, 44, 48, 49, 50, 51, 52, 58, 66, 107, 148, 154, 161, 163, 164, 166, 169, 170, 171, 190, 197, 228, 236, 259, 260, 281, 325, 326, 357, 404, 466, 496, 497, 548, 574, 575, 656, 669, 689, 751, 754, 793, 809, 869, 907, 915, 916, 957, 962, 991, 1024, 1090, 1124, 1125, 1206, 1207, 1273, 1292, 1357, 1360, 1404], "howev": [1, 11, 53, 135, 153, 163, 171, 207, 231, 265, 315, 357, 656, 869, 891, 903, 932, 945, 991, 1149, 1404], "hstack": [107, 357], "html": [34, 42, 44, 45, 133, 153, 157, 159, 209, 210, 211, 221, 357, 999, 1000], "http": [22, 34, 42, 44, 45, 76, 133, 153, 154, 157, 159, 192, 209, 210, 211, 221, 357, 630, 722, 724, 734, 945, 991, 999, 1000, 1328, 1330, 1340], "httpmethod": 76, "hug": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 169, 170, 171, 197, 357, 991], "huge": [231, 357, 1149, 1404], "hut": [737, 738, 1343, 1344], "hvplot": [357, 360, 1404, 1409], "hyperbol": [389, 391, 393, 454, 706, 771, 869, 1009, 1011, 1013, 1079, 1313, 1377, 1404], "hyperloglog": [214, 357, 387, 787, 869, 885, 991, 1007, 1404], "hyphen": [713, 1319], "hypothesi": [180, 182, 185, 186, 1435], "i": [1, 10, 11, 14, 16, 19, 33, 34, 35, 36, 39, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 63, 64, 65, 66, 67, 70, 72, 73, 74, 75, 80, 90, 97, 99, 103, 105, 106, 107, 108, 109, 110, 112, 113, 118, 124, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 190, 191, 192, 193, 194, 195, 196, 197, 201, 203, 207, 212, 213, 214, 215, 216, 218, 219, 223, 224, 227, 228, 230, 231, 233, 234, 235, 236, 240, 244, 245, 246, 247, 250, 251, 255, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 272, 273, 277, 279, 280, 281, 285, 286, 287, 289, 290, 291, 292, 293, 296, 297, 298, 300, 302, 303, 304, 305, 308, 309, 312, 314, 315, 316, 319, 320, 321, 322, 324, 326, 327, 328, 332, 334, 335, 343, 357, 360, 361, 369, 370, 375, 380, 383, 385, 386, 387, 397, 400, 407, 408, 417, 422, 425, 442, 443, 444, 447, 448, 462, 463, 465, 468, 469, 470, 471, 474, 482, 483, 490, 491, 493, 498, 500, 503, 504, 505, 506, 507, 508, 509, 510, 511, 519, 520, 521, 522, 525, 527, 528, 529, 533, 534, 542, 544, 547, 550, 551, 563, 568, 569, 576, 577, 579, 581, 583, 585, 594, 599, 600, 602, 603, 606, 608, 611, 614, 615, 619, 621, 622, 623, 625, 626, 627, 629, 638, 656, 661, 662, 663, 666, 668, 669, 670, 671, 672, 675, 676, 677, 678, 680, 682, 684, 686, 688, 689, 690, 691, 693, 694, 695, 696, 698, 699, 700, 701, 703, 704, 707, 708, 709, 710, 712, 713, 714, 715, 716, 722, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 735, 736, 737, 738, 739, 741, 744, 746, 747, 748, 751, 752, 753, 754, 755, 756, 758, 759, 761, 766, 768, 773, 774, 779, 780, 783, 784, 785, 786, 787, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 807, 808, 810, 811, 816, 820, 821, 822, 823, 825, 826, 827, 828, 829, 830, 833, 835, 838, 840, 843, 844, 845, 846, 847, 848, 850, 852, 854, 856, 857, 858, 859, 860, 865, 869, 884, 885, 886, 887, 890, 891, 892, 893, 895, 897, 898, 900, 901, 902, 903, 905, 906, 907, 910, 911, 914, 915, 916, 917, 919, 921, 922, 926, 927, 931, 932, 935, 936, 938, 939, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 953, 954, 956, 957, 958, 959, 961, 964, 965, 966, 974, 984, 991, 995, 997, 1004, 1005, 1006, 1007, 1019, 1020, 1027, 1028, 1036, 1039, 1041, 1044, 1061, 1062, 1066, 1067, 1068, 1070, 1071, 1076, 1077, 1087, 1088, 1089, 1092, 1093, 1094, 1095, 1098, 1106, 1107, 1121, 1126, 1128, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1148, 1149, 1150, 1151, 1152, 1153, 1155, 1156, 1158, 1159, 1160, 1161, 1164, 1172, 1173, 1174, 1176, 1179, 1180, 1182, 1185, 1192, 1194, 1195, 1196, 1199, 1200, 1201, 1208, 1209, 1213, 1215, 1217, 1226, 1231, 1232, 1235, 1238, 1246, 1265, 1266, 1267, 1269, 1271, 1273, 1274, 1275, 1276, 1279, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1293, 1294, 1296, 1297, 1298, 1299, 1301, 1302, 1303, 1304, 1305, 1307, 1310, 1311, 1314, 1315, 1318, 1319, 1320, 1321, 1322, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1343, 1344, 1345, 1347, 1350, 1352, 1353, 1354, 1357, 1358, 1359, 1360, 1362, 1364, 1365, 1367, 1374, 1375, 1378, 1379, 1382, 1384, 1385, 1387, 1388, 1389, 1393, 1394, 1404, 1409, 1413, 1414, 1419, 1423, 1424, 1427, 1430, 1432, 1433, 1435], "i0e0": 1435, "i16": [1, 61, 478, 494, 513, 702, 869, 997, 1122, 1381, 1404, 1435], "i32": [1, 61, 132, 135, 139, 179, 181, 182, 295, 304, 357, 406, 407, 409, 430, 444, 473, 481, 484, 485, 486, 487, 488, 492, 515, 702, 756, 793, 816, 859, 869, 940, 991, 996, 1026, 1027, 1029, 1049, 1097, 1108, 1112, 1113, 1114, 1120, 1143, 1244, 1362, 1404, 1424, 1428, 1435], "i64": [1, 11, 12, 15, 18, 19, 23, 29, 59, 60, 61, 62, 66, 67, 85, 106, 132, 133, 134, 135, 136, 137, 138, 139, 147, 151, 153, 160, 161, 166, 175, 177, 190, 212, 213, 215, 216, 217, 218, 220, 224, 225, 228, 229, 232, 233, 235, 236, 239, 240, 242, 243, 244, 245, 247, 249, 250, 252, 254, 256, 259, 260, 261, 263, 265, 266, 267, 273, 274, 279, 280, 281, 282, 285, 286, 287, 288, 289, 293, 295, 297, 300, 302, 303, 304, 306, 308, 310, 317, 320, 321, 322, 323, 324, 325, 326, 327, 329, 331, 333, 334, 335, 336, 337, 339, 340, 341, 343, 344, 347, 350, 351, 357, 375, 380, 382, 386, 396, 401, 402, 404, 405, 411, 414, 415, 416, 417, 418, 420, 423, 433, 438, 441, 442, 443, 452, 458, 459, 460, 461, 462, 463, 466, 467, 480, 496, 502, 504, 505, 506, 507, 508, 509, 510, 520, 523, 525, 526, 528, 529, 530, 531, 533, 536, 537, 539, 543, 545, 547, 548, 549, 550, 554, 555, 557, 558, 559, 560, 561, 564, 567, 570, 571, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 606, 607, 608, 612, 614, 615, 635, 636, 637, 639, 640, 642, 644, 646, 647, 652, 656, 657, 660, 661, 662, 663, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 698, 700, 701, 702, 703, 708, 709, 710, 728, 737, 738, 752, 756, 761, 762, 764, 765, 766, 767, 768, 769, 773, 774, 775, 776, 778, 781, 788, 791, 794, 795, 796, 797, 801, 802, 803, 804, 805, 806, 809, 812, 813, 814, 815, 816, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 834, 836, 837, 839, 842, 847, 848, 849, 852, 853, 854, 855, 859, 865, 869, 884, 886, 888, 889, 891, 892, 898, 899, 901, 904, 906, 907, 908, 909, 910, 911, 912, 915, 916, 917, 918, 920, 921, 922, 923, 927, 928, 930, 932, 934, 935, 936, 937, 938, 940, 942, 944, 947, 948, 949, 951, 952, 953, 954, 955, 956, 957, 960, 963, 964, 967, 968, 970, 971, 972, 974, 975, 978, 981, 982, 991, 997, 1001, 1002, 1003, 1006, 1025, 1031, 1033, 1035, 1036, 1037, 1039, 1042, 1061, 1062, 1076, 1077, 1083, 1084, 1085, 1086, 1087, 1088, 1104, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1155, 1156, 1157, 1159, 1160, 1165, 1166, 1168, 1173, 1175, 1185, 1199, 1207, 1208, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1218, 1220, 1223, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1238, 1239, 1246, 1251, 1259, 1265, 1267, 1270, 1271, 1272, 1274, 1275, 1276, 1278, 1282, 1283, 1285, 1287, 1288, 1289, 1291, 1294, 1295, 1296, 1298, 1301, 1302, 1304, 1307, 1308, 1310, 1315, 1316, 1362, 1368, 1373, 1375, 1380, 1388, 1389, 1390, 1395, 1404, 1413, 1414, 1416, 1420, 1421, 1422, 1423, 1424, 1426, 1429, 1430, 1432, 1433, 1435], "i8": [264, 357, 421, 422, 478, 481, 485, 487, 488, 489, 492, 494, 495, 499, 512, 513, 605, 702, 840, 843, 860, 869, 1040, 1041, 1090, 1102, 1105, 1116, 1117, 1123, 1127, 1140, 1141, 1237, 1277, 1308, 1392, 1404, 1428], "i_bitand_j": 1423, "i_bitand_op_j": 1423, "i_bitcount": 1423, "i_bitor_j": 1423, "i_bitor_op_j": 1423, "i_bitxor_j": 1423, "i_bitxor_op_j": 1423, "iceberg": [43, 168, 357, 881], "icon": [42, 357], "id": [28, 35, 42, 66, 147, 151, 156, 168, 190, 261, 314, 321, 334, 343, 357, 675, 737, 738, 777, 869, 917, 964, 974, 991, 997, 1279, 1391, 1404, 1432, 1433, 1435], "id_char": 1435, "id_var": [272, 324, 357, 926, 956, 991], "ideal": [141, 146], "ident": [35, 139, 217, 218, 357, 500, 674, 675, 869, 889, 890, 991, 1075, 1077, 1128, 1278, 1279, 1404], "identif": [156, 162], "identifi": [139, 153, 272, 279, 322, 324, 335, 357, 926, 954, 956, 991], "idiograph": 997, "idiom": 859, "idiomat": [865, 895, 902, 939, 959, 974, 991], "idx": [166, 245, 258, 357, 407, 422, 606, 911, 991, 1041, 1238, 1332], "idx_lit": 1332, "idx_rx": 1332, "ieee": [775, 869], "if_set": [5, 32], "if_table_exist": [40, 357], "ifnul": 1425, "ignor": [41, 56, 70, 153, 171, 181, 182, 186, 266, 270, 307, 326, 357, 383, 385, 408, 466, 497, 519, 521, 522, 575, 585, 606, 615, 648, 649, 713, 729, 730, 783, 785, 797, 834, 853, 869, 922, 957, 991, 997, 1004, 1005, 1028, 1090, 1125, 1150, 1152, 1153, 1207, 1217, 1255, 1256, 1319, 1335, 1404], "ignore_error": [151, 152, 161, 166, 170], "ignore_nul": [270, 307, 357, 383, 385, 408, 519, 521, 522, 585, 713, 729, 783, 785, 797, 834, 853, 869, 1004, 1005, 1028, 1150, 1152, 1153, 1217, 1319, 1335, 1404], "ignore_spac": 997, "ij": 738, "ij67": 738, "ijkl": 1427, "ilmsuxu": [714, 722, 723, 726, 737, 738, 1320, 1328, 1329, 1332, 1343, 1344], "imbal": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "imdb_scor": 1413, "immedi": [207, 666, 788, 792, 794, 798, 800, 807, 808, 810, 811, 822, 823, 826, 827, 840, 843, 847, 851, 856, 857, 860, 869, 931, 991, 1269, 1404, 1414], "immut": [315, 357, 1384, 1404], "impact": [245, 357, 911, 991, 1413, 1432], "impl": 168, "implement": [48, 97, 146, 153, 211, 246, 265, 343, 357, 360, 361, 367, 542, 551, 615, 762, 772, 829, 830, 869, 893, 946, 974, 991, 996, 1172, 1180, 1246, 1302, 1304, 1386, 1404, 1409], "implic": [465, 869, 898, 991], "implicit": [326, 357, 859, 957, 991], "implicitli": [236, 285, 357, 529, 859, 869, 907, 935, 991, 1432], "implod": [614, 615, 869, 1404, 1422], "import": [12, 18, 30, 37, 39, 41, 42, 44, 45, 48, 58, 73, 76, 97, 132, 133, 136, 137, 147, 151, 153, 154, 160, 161, 166, 172, 175, 176, 177, 178, 179, 180, 181, 182, 185, 186, 187, 188, 213, 216, 223, 224, 225, 228, 243, 245, 258, 260, 264, 279, 281, 297, 304, 312, 314, 319, 324, 325, 327, 357, 360, 361, 375, 431, 464, 465, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 579, 622, 623, 629, 656, 678, 680, 682, 684, 686, 688, 691, 693, 695, 793, 806, 807, 808, 809, 810, 811, 812, 813, 826, 848, 856, 857, 865, 869, 881, 888, 892, 897, 898, 899, 901, 911, 916, 921, 942, 956, 991, 995, 996, 1050, 1078, 1080, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1151, 1183, 1186, 1188, 1189, 1211, 1281, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1312, 1376, 1404, 1409, 1414, 1429, 1432, 1435], "improv": [40, 52, 157, 168, 169, 259, 357, 915, 991], "in_part_idx": [53, 55, 145], "in_plac": [249, 301, 329, 357, 1270, 1309, 1316, 1404], "in_progress": [934, 991], "includ": [7, 22, 32, 39, 41, 42, 49, 53, 55, 63, 137, 153, 155, 156, 161, 162, 163, 166, 167, 168, 169, 170, 171, 182, 183, 207, 219, 223, 231, 261, 279, 281, 285, 292, 303, 319, 321, 325, 326, 357, 463, 499, 504, 505, 506, 507, 508, 509, 510, 529, 533, 544, 550, 622, 663, 677, 679, 681, 683, 685, 687, 689, 690, 692, 694, 737, 738, 742, 743, 746, 747, 793, 802, 803, 844, 845, 869, 897, 907, 917, 935, 948, 957, 991, 997, 1088, 1089, 1127, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1149, 1160, 1174, 1179, 1267, 1280, 1282, 1284, 1286, 1288, 1290, 1292, 1293, 1295, 1297, 1343, 1344, 1348, 1349, 1352, 1404, 1432], "include_bom": [39, 49, 357, 991], "include_boundari": [245, 357, 911, 991], "include_break": [463, 663, 869, 1088, 1267, 1404], "include_breakpoint": [544, 869, 1174, 1404], "include_categor": 997, "include_categori": [544, 869, 1174, 1404], "include_col": 182, "include_file_path": [156, 161, 162, 163, 166, 169, 170, 171], "include_head": [39, 42, 49, 152, 321, 357, 375, 991], "include_index": 137, "include_init": [802, 803], "include_kei": [53, 55, 279, 292, 357], "include_nul": [326, 357, 957, 991], "inclus": [212, 245, 289, 357, 503, 550, 676, 680, 682, 684, 686, 688, 691, 693, 695, 742, 743, 788, 807, 808, 810, 811, 822, 823, 826, 827, 856, 857, 869, 911, 938, 991, 1131, 1179, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1348, 1349, 1404], "incom": 153, "incompat": 125, "incomplet": [671, 869, 1275, 1404], "incorpor": 1432, "incorrect": [298, 357, 514, 700, 869, 943, 974, 991, 1142, 1305, 1404], "incorrectli": 151, "increas": [42, 53, 54, 55, 58, 151, 156, 162, 163, 171, 357, 462, 675, 869, 1087, 1279, 1404], "independ": [64, 179, 182, 186, 319, 357, 703, 869, 891, 903, 932, 945, 991], "index": [42, 113, 133, 137, 140, 151, 152, 157, 159, 161, 163, 166, 169, 170, 171, 174, 211, 213, 239, 241, 245, 250, 255, 257, 281, 287, 289, 290, 291, 300, 302, 314, 315, 317, 324, 326, 327, 333, 334, 357, 367, 381, 394, 395, 396, 398, 401, 402, 407, 417, 422, 520, 536, 537, 539, 546, 570, 571, 581, 582, 583, 599, 600, 606, 676, 680, 682, 684, 686, 688, 691, 693, 695, 699, 701, 708, 714, 722, 726, 728, 741, 752, 762, 791, 822, 825, 846, 869, 909, 911, 938, 944, 947, 956, 957, 963, 964, 991, 997, 1014, 1015, 1016, 1017, 1018, 1021, 1022, 1027, 1036, 1041, 1151, 1165, 1166, 1176, 1194, 1202, 1203, 1213, 1214, 1215, 1231, 1232, 1238, 1259, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1302, 1303, 1307, 1315, 1328, 1332, 1334, 1347, 1358, 1404, 1409, 1422, 1427], "index_column": [245, 289, 357, 676, 869, 911, 938, 991], "index_of": [869, 1404], "indexord": [314, 315, 357], "indic": [39, 42, 44, 48, 49, 50, 51, 52, 72, 73, 75, 90, 106, 116, 148, 149, 151, 152, 153, 156, 157, 159, 161, 162, 163, 164, 166, 169, 170, 171, 179, 180, 186, 197, 245, 289, 292, 300, 312, 357, 397, 417, 536, 544, 552, 553, 554, 556, 557, 558, 559, 560, 561, 581, 599, 619, 620, 621, 622, 623, 624, 625, 656, 676, 680, 682, 684, 686, 688, 691, 693, 695, 699, 701, 791, 792, 839, 869, 911, 938, 944, 991, 997, 1036, 1071, 1165, 1174, 1183, 1184, 1186, 1187, 1188, 1189, 1190, 1191, 1213, 1231, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1302, 1303, 1307, 1379, 1404, 1427, 1435], "indistinguish": [39, 49, 357, 991], "individu": [42, 52, 142, 207, 289, 314, 315, 319, 357, 615, 723, 765, 869, 891, 938, 991, 997, 1074, 1329, 1404], "inequ": [650, 869], "inexact": [175, 176, 177, 178], "inf": [179, 182, 186, 393, 463, 553, 556, 663, 775, 869, 1013, 1080, 1088, 1183, 1186, 1244, 1262, 1267, 1392, 1404, 1429], "infer": [39, 44, 48, 49, 50, 51, 52, 89, 106, 132, 134, 135, 136, 137, 138, 151, 152, 153, 156, 160, 161, 162, 163, 164, 166, 169, 170, 171, 197, 265, 357, 614, 615, 672, 751, 753, 754, 758, 802, 803, 812, 816, 828, 829, 830, 842, 843, 869, 991, 1246, 1276, 1336, 1357, 1359, 1360, 1361, 1364, 1404], "infer_schema": [151, 166], "infer_schema_length": [135, 138, 147, 151, 152, 153, 156, 160, 161, 162, 166, 170, 357, 730, 991, 1336], "inference_length": [755, 1361], "inference_s": [265, 357], "infin": [759, 775, 869, 1365], "infinit": [556, 775, 869, 1186, 1404], "influenc": [156, 921, 991], "influxdb": 153, "info": [155, 167, 168, 174], "inform": [21, 25, 39, 40, 44, 48, 49, 50, 51, 52, 53, 54, 55, 63, 146, 148, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 175, 177, 197, 198, 199, 201, 202, 209, 221, 223, 357, 361, 563, 707, 714, 722, 723, 726, 737, 738, 869, 891, 897, 903, 932, 945, 991, 995, 999, 1195, 1314, 1320, 1328, 1329, 1332, 1343, 1344, 1404], "inherit": [290, 357, 465, 869, 898, 991], "init": [207, 1413], "initcap": 1425, "initi": [10, 34, 35, 36, 42, 89, 146, 192, 207, 357, 802, 803, 816, 859, 1432], "initialis": [76, 153, 207, 991], "inject": [42, 58, 357], "inlin": [26, 292, 357, 714, 722, 723, 726, 737, 738, 1320, 1328, 1329, 1332, 1343, 1344, 1422], "inner": [67, 85, 181, 259, 261, 326, 357, 363, 366, 375, 408, 421, 467, 585, 605, 615, 669, 772, 848, 869, 915, 917, 957, 991, 997, 1028, 1040, 1091, 1217, 1237, 1246, 1273, 1386, 1404, 1420, 1432], "inner_dtyp": [181, 184, 375], "innermost": [181, 184], "innter": 1027, "inprocessqueri": [891, 991], "input": [0, 55, 58, 64, 106, 135, 137, 148, 151, 152, 172, 215, 225, 244, 261, 265, 266, 270, 279, 281, 286, 295, 296, 300, 303, 307, 320, 326, 331, 332, 336, 357, 369, 380, 443, 445, 449, 452, 520, 523, 535, 550, 610, 614, 615, 627, 656, 670, 671, 704, 710, 728, 739, 741, 747, 748, 749, 750, 752, 754, 766, 774, 782, 784, 786, 788, 791, 794, 795, 796, 797, 803, 805, 812, 814, 822, 823, 828, 829, 830, 832, 834, 837, 842, 847, 851, 853, 859, 865, 869, 881, 886, 899, 910, 917, 922, 931, 936, 940, 941, 944, 948, 953, 957, 960, 961, 967, 991, 997, 1062, 1076, 1151, 1179, 1242, 1243, 1246, 1265, 1274, 1275, 1307, 1311, 1334, 1347, 1358, 1360, 1389, 1404, 1426, 1427, 1429], "input_wildcard_expans": [148, 869], "insensit": [715, 723, 725, 727, 737, 738, 739, 997, 1320, 1321, 1329, 1331, 1332, 1333, 1343, 1344, 1345], "insensitive_match": [714, 726], "insert": [40, 56, 151, 152, 157, 159, 161, 163, 166, 169, 170, 171, 250, 266, 321, 323, 357, 699, 713, 729, 761, 869, 922, 955, 991, 1303, 1319, 1335, 1367, 1404], "insert_aft": [42, 357], "insert_befor": [42, 357], "insert_chart": [42, 357], "insert_column": 357, "insid": [65, 614, 859, 869, 892, 991], "inspect": [369, 702, 869, 991], "instal": [34, 35, 36, 110, 137, 151, 152, 154, 157, 159, 221, 316, 357, 470, 482, 630, 793, 945, 991, 1094, 1106, 1385, 1404], "instanc": [39, 44, 48, 49, 50, 51, 52, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 171, 182, 186, 197, 233, 238, 357, 627, 802, 816, 865, 881, 888, 921, 934, 963, 964, 991, 1156, 1404], "instanti": [35, 40, 42, 153, 184, 313, 314, 357, 375, 996, 1381, 1382, 1404], "instantli": [65, 892, 991], "instead": [39, 41, 46, 47, 49, 58, 65, 67, 133, 134, 135, 138, 151, 152, 153, 156, 162, 163, 166, 171, 172, 179, 180, 181, 182, 186, 190, 214, 215, 243, 256, 257, 260, 265, 272, 277, 279, 290, 291, 292, 295, 296, 297, 300, 314, 315, 316, 320, 332, 333, 357, 360, 361, 375, 396, 417, 443, 444, 447, 448, 463, 477, 503, 520, 523, 533, 599, 614, 629, 662, 663, 670, 701, 702, 713, 721, 732, 733, 746, 747, 748, 749, 750, 761, 768, 774, 781, 788, 790, 792, 794, 798, 799, 800, 807, 808, 810, 811, 812, 822, 823, 826, 827, 840, 843, 846, 847, 848, 851, 852, 856, 857, 860, 869, 884, 885, 886, 892, 903, 916, 926, 940, 941, 942, 944, 953, 961, 962, 963, 966, 991, 997, 1016, 1036, 1046, 1062, 1063, 1067, 1068, 1088, 1101, 1110, 1111, 1131, 1151, 1171, 1231, 1266, 1267, 1274, 1302, 1304, 1307, 1316, 1319, 1327, 1338, 1339, 1352, 1353, 1354, 1367, 1374, 1384, 1385, 1389, 1404, 1409, 1413, 1414, 1418, 1432, 1433], "int": [12, 14, 15, 16, 19, 27, 28, 39, 40, 42, 44, 48, 49, 50, 51, 52, 54, 60, 67, 74, 135, 138, 141, 142, 143, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 197, 199, 213, 215, 217, 223, 231, 234, 235, 239, 241, 243, 246, 247, 248, 250, 255, 257, 258, 260, 263, 265, 276, 277, 287, 289, 290, 293, 299, 300, 302, 305, 308, 313, 317, 320, 325, 328, 330, 333, 334, 340, 351, 357, 375, 380, 407, 417, 419, 422, 424, 425, 442, 443, 462, 466, 470, 496, 519, 521, 522, 526, 527, 528, 534, 536, 537, 539, 542, 543, 544, 567, 575, 581, 582, 583, 584, 594, 599, 600, 602, 604, 605, 606, 608, 655, 657, 660, 661, 663, 666, 669, 672, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 708, 712, 722, 728, 730, 735, 736, 737, 741, 743, 744, 752, 755, 756, 761, 769, 773, 774, 780, 782, 788, 798, 800, 806, 809, 812, 818, 820, 822, 823, 826, 827, 839, 840, 843, 844, 845, 850, 851, 854, 855, 858, 860, 869, 886, 889, 893, 897, 905, 906, 909, 912, 916, 920, 932, 944, 946, 947, 950, 952, 953, 958, 959, 963, 964, 966, 971, 982, 991, 996, 997, 1014, 1015, 1027, 1036, 1038, 1041, 1043, 1044, 1061, 1062, 1063, 1074, 1075, 1081, 1087, 1090, 1091, 1094, 1124, 1149, 1150, 1152, 1153, 1157, 1158, 1159, 1164, 1165, 1166, 1172, 1173, 1174, 1176, 1194, 1198, 1199, 1207, 1213, 1214, 1215, 1216, 1226, 1231, 1232, 1234, 1236, 1237, 1238, 1240, 1252, 1253, 1255, 1256, 1259, 1261, 1262, 1265, 1266, 1267, 1269, 1273, 1276, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1306, 1307, 1310, 1315, 1318, 1328, 1334, 1336, 1341, 1342, 1343, 1347, 1349, 1350, 1358, 1361, 1362, 1367, 1374, 1375, 1381, 1388, 1389, 1394, 1404, 1416, 1419, 1432, 1435], "int16": [1, 61, 319, 357, 362, 460, 461, 494, 768, 869, 997, 1085, 1086, 1122, 1374, 1381, 1404], "int32": [1, 42, 61, 66, 132, 135, 179, 181, 182, 190, 245, 258, 266, 289, 314, 357, 375, 406, 407, 409, 430, 444, 473, 484, 485, 486, 487, 492, 515, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 756, 772, 843, 869, 911, 922, 938, 991, 996, 997, 1023, 1026, 1027, 1029, 1049, 1097, 1108, 1112, 1113, 1114, 1120, 1143, 1151, 1244, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1362, 1386, 1387, 1404], "int64": [1, 41, 42, 60, 61, 66, 67, 89, 108, 151, 160, 190, 219, 229, 238, 245, 266, 280, 289, 294, 309, 316, 357, 367, 368, 375, 401, 402, 404, 405, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 423, 424, 460, 461, 504, 505, 506, 507, 508, 509, 510, 514, 520, 523, 614, 615, 641, 643, 645, 660, 668, 676, 680, 682, 684, 686, 688, 691, 693, 695, 730, 756, 768, 772, 788, 795, 814, 822, 823, 828, 843, 851, 865, 869, 894, 902, 911, 922, 930, 938, 939, 991, 997, 1021, 1022, 1024, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1085, 1086, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1142, 1144, 1151, 1246, 1271, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1362, 1374, 1384, 1385, 1386, 1387, 1404], "int64arrai": [1378, 1404], "int8": [1, 61, 89, 238, 357, 364, 365, 421, 422, 460, 461, 478, 481, 488, 489, 495, 499, 512, 513, 605, 768, 840, 843, 860, 869, 996, 1040, 1041, 1085, 1086, 1090, 1102, 1105, 1116, 1117, 1123, 1127, 1140, 1141, 1237, 1277, 1374, 1384, 1392, 1404], "int_rang": [245, 325, 334, 343, 357, 788, 825, 846, 847, 911, 921, 964, 974, 991], "integ": [39, 42, 49, 56, 72, 73, 75, 80, 81, 82, 83, 84, 90, 91, 92, 93, 94, 173, 180, 182, 185, 187, 213, 228, 245, 266, 289, 312, 315, 357, 375, 384, 451, 499, 532, 533, 655, 661, 663, 668, 675, 676, 677, 689, 728, 752, 756, 782, 788, 818, 822, 823, 843, 846, 869, 901, 911, 922, 938, 991, 997, 1073, 1127, 1163, 1265, 1267, 1271, 1279, 1280, 1292, 1302, 1334, 1358, 1362, 1384, 1404, 1426, 1432, 1435], "integer_cast": [56, 266, 357, 922, 991], "integer_list": 85, "integr": [42, 319, 357, 680, 682, 684, 686, 688, 691, 693, 695, 869, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1435], "intend": [1, 175, 176, 177, 178, 761, 1367], "intens": [265, 343, 357, 656, 869, 1246, 1404], "interact": [182, 186, 223, 357, 360, 897, 991, 1404, 1409], "interchang": [133, 211], "interest": [152, 500, 503, 1128, 1131], "interfac": [0, 121, 122, 132, 133, 205, 206, 210, 881, 996, 1000, 1432], "interfer": 995, "interleav": 1427, "intermedi": [251, 357, 548, 869, 914, 991, 1177, 1178, 1404, 1435], "intern": [44, 45, 50, 153, 173, 257, 309, 357, 533, 869, 991, 1378, 1404, 1414], "interoper": [209, 999], "interpol": [223, 283, 349, 357, 528, 549, 618, 664, 687, 688, 841, 869, 897, 933, 980, 991, 1089, 1178, 1268, 1290, 1291, 1404, 1421], "interpolate_bi": [869, 1404], "interpolationmethod": [548, 869, 1177, 1404], "interpret": [136, 138, 151, 152, 166, 357, 430, 991, 1049], "intersect": [42, 357, 596, 997, 1228, 1431], "interv": [245, 289, 327, 357, 463, 498, 544, 550, 663, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 826, 827, 856, 857, 869, 911, 938, 991, 1088, 1102, 1104, 1105, 1112, 1114, 1116, 1117, 1120, 1122, 1123, 1126, 1130, 1140, 1174, 1179, 1267, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1421], "intoexpr": [148, 215, 244, 245, 289, 295, 296, 300, 303, 320, 331, 332, 336, 357, 386, 403, 404, 426, 429, 432, 443, 466, 470, 496, 520, 526, 536, 544, 546, 549, 550, 551, 573, 574, 595, 596, 597, 598, 609, 656, 670, 671, 680, 682, 684, 686, 688, 691, 693, 695, 699, 701, 710, 715, 725, 727, 739, 742, 743, 744, 746, 747, 748, 749, 750, 766, 774, 784, 786, 791, 794, 795, 796, 797, 798, 800, 802, 805, 809, 816, 826, 832, 834, 837, 843, 847, 851, 853, 869, 886, 910, 911, 938, 940, 941, 944, 948, 953, 960, 961, 967, 991, 1023, 1024, 1045, 1048, 1051, 1062, 1094, 1151, 1157, 1176, 1178, 1179, 1180, 1205, 1206, 1274, 1275, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1303, 1307, 1333, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1389, 1404], "intoexprcolumn": [236, 250, 285, 357, 407, 408, 417, 442, 443, 452, 498, 526, 529, 582, 585, 594, 599, 657, 661, 698, 701, 722, 728, 731, 735, 736, 741, 752, 756, 761, 773, 774, 788, 793, 807, 808, 810, 811, 822, 823, 827, 856, 857, 859, 869, 907, 935, 944, 991, 1027, 1028, 1036, 1076, 1121, 1126, 1139, 1157, 1214, 1217, 1226, 1231, 1262, 1273, 1328, 1334, 1337, 1341, 1342, 1347, 1358, 1362, 1367, 1404], "introduc": [57, 99, 751, 753, 754, 1357, 1359, 1360], "introduct": 1431, "intuit": [533, 869, 997], "invalid": [39, 49, 122, 151, 152, 166, 216, 357, 444, 730, 731, 756, 775, 869, 991, 1046, 1063, 1336, 1337, 1362, 1404], "invalid_valu": 1046, "invalidoperationerror": [671, 869, 1275, 1404, 1430], "invari": [921, 991], "invers": [388, 389, 390, 391, 392, 393, 869, 1008, 1009, 1010, 1011, 1012, 1013, 1384, 1404, 1429], "invert": 997, "invok": 207, "involv": [236, 285, 357, 907, 935, 991], "io": [37, 39, 42, 44, 45, 47, 48, 49, 50, 51, 52, 53, 54, 55, 149, 151, 157, 158, 159, 160, 161, 164, 165, 166, 168, 169, 170, 224, 297, 357, 465, 535, 629, 869, 898, 942, 991], "io_sourc": 146, "iobas": [46, 160, 224, 297, 357, 465, 629, 633, 869, 898, 942, 991], "ipc": [44, 45, 50, 157, 158, 159, 169, 172, 357, 881, 991], "ipccompress": [44, 45, 50, 357, 991], "ir": [945, 991], "is_between": [869, 1404], "is_clos": [869, 1404], "is_dupl": [357, 869, 1404], "is_elementwis": [148, 614, 829, 830, 869], "is_empti": [357, 1404], "is_finit": [869, 1404], "is_first_distinct": [869, 1404], "is_float": [931, 991], "is_in": [108, 236, 357, 869, 1404], "is_infinit": [869, 1404], "is_last_distinct": [869, 1404], "is_nan": [227, 357, 869, 900, 991, 1404], "is_not_nan": [869, 1404], "is_not_nul": [285, 357, 869, 935, 991, 1404], "is_nul": [228, 357, 869, 901, 991, 1404], "is_numer": 1435, "is_odd": 997, "is_pur": 146, "is_selector": 997, "is_sort": 1404, "is_uniqu": [357, 869, 1404], "isclos": [551, 869, 1180, 1404], "isn": [97, 146, 859], "iso": [484, 503, 512, 513, 1108, 1131, 1140, 1141, 1427], "iso8601": [151, 152, 166, 503, 1131], "iso_lang": 1427, "iso_year": 515, "isodow": 1428, "isoweek": 1428, "isoyear": 1428, "issu": [101, 102, 105, 106, 109, 116, 118, 129, 132, 151, 152, 153, 166, 357, 460, 461, 768, 869, 1085, 1086, 1374, 1404, 1432], "ital": [42, 357], "item": [15, 66, 152, 190, 243, 290, 293, 357, 403, 407, 408, 430, 466, 525, 573, 575, 583, 585, 594, 698, 744, 869, 884, 931, 991, 1023, 1027, 1028, 1049, 1090, 1155, 1205, 1207, 1215, 1217, 1226, 1301, 1350, 1404], "iter": [53, 54, 55, 58, 64, 65, 66, 76, 131, 132, 135, 146, 148, 153, 185, 187, 190, 215, 225, 232, 236, 244, 245, 256, 257, 258, 261, 285, 289, 290, 291, 292, 295, 296, 303, 320, 321, 331, 332, 335, 336, 357, 443, 462, 470, 482, 529, 656, 710, 766, 774, 784, 786, 791, 793, 794, 795, 796, 797, 805, 832, 834, 837, 847, 851, 853, 859, 865, 869, 886, 893, 899, 904, 907, 910, 911, 917, 935, 938, 940, 941, 948, 953, 960, 961, 967, 991, 996, 997, 1062, 1087, 1094, 1106, 1160, 1302, 1389, 1404, 1435], "iter_batch": 153, "iter_column": 357, "iter_row": [258, 290, 291, 292, 357], "iter_slic": 357, "its": [77, 139, 153, 174, 231, 315, 357, 474, 498, 511, 520, 614, 615, 674, 710, 765, 779, 829, 830, 859, 869, 884, 895, 902, 921, 959, 991, 995, 1098, 1126, 1139, 1149, 1151, 1246, 1278, 1384, 1404, 1434], "itself": [180, 357, 360, 361, 677, 679, 681, 683, 685, 687, 689, 690, 692, 694, 792, 844, 845, 869, 919, 991, 1280, 1282, 1284, 1286, 1288, 1290, 1292, 1293, 1295, 1297, 1404, 1409, 1413, 1414, 1432], "ix": [281, 357], "j": [321, 357, 1423], "jax": [314, 357, 1382, 1404], "jax_enable_x64": [314, 357], "jaxexporttyp": [314, 357], "jjk": 997, "jkl": [723, 1329], "jklmn": 1427, "job": [887, 991], "join": [57, 58, 64, 66, 99, 190, 236, 260, 261, 285, 326, 357, 529, 548, 656, 713, 848, 869, 891, 903, 907, 916, 917, 932, 935, 945, 957, 962, 991, 1319, 1414, 1416, 1422, 1431, 1432], "join_asof": [259, 357, 915, 991], "join_nul": [259, 357, 915, 991], "join_wher": [357, 991], "joinstrategi": [58, 259, 357, 915, 991], "joinvalid": [259, 357, 915, 991], "jpy": 1435, "json": [2, 3, 5, 6, 46, 47, 147, 148, 160, 161, 168, 170, 200, 224, 297, 357, 465, 535, 629, 633, 730, 731, 763, 869, 881, 898, 942, 991, 1336, 1337, 1370], "json_decod": [264, 357], "json_path": [731, 1337], "json_path_match": [730, 1336], "json_stat": 5, "json_str": [160, 161], "json_val": [731, 1337], "jsonencod": 147, "jsonpath": [730, 731, 1336, 1337], "jst": [139, 997], "jul": [751, 1357, 1427], "juli": [1131, 1427, 1428], "just": [42, 137, 153, 166, 272, 324, 357, 926, 956, 991, 997], "k": [215, 292, 320, 321, 357, 442, 443, 457, 563, 773, 774, 869, 886, 953, 991, 1061, 1062, 1082, 1195, 1388, 1389, 1404], "k_2": [707, 869, 1314, 1404], "k_3": [707, 869, 1314, 1404], "kadokawa": [734, 1340], "kanji": 997, "karen": [281, 357], "kathmandu": [1100, 1101, 1129], "kb": [231, 357, 431, 1050, 1149, 1404], "kde": [1404, 1409], "keep": [42, 58, 151, 152, 161, 166, 169, 170, 236, 322, 326, 327, 357, 535, 614, 632, 640, 670, 794, 829, 859, 869, 954, 957, 991, 1274, 1404], "kei": [10, 39, 41, 42, 44, 48, 49, 50, 51, 52, 53, 55, 58, 63, 66, 144, 145, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 190, 197, 212, 213, 245, 257, 259, 260, 273, 279, 286, 288, 291, 292, 326, 357, 529, 615, 670, 671, 739, 807, 810, 851, 869, 911, 915, 916, 927, 934, 936, 937, 957, 991, 997, 1001, 1274, 1275, 1345, 1404, 1420], "kept": [322, 357, 954, 991], "keyedpartit": 145, "keyedpartitioncontext": [53, 55, 144], "keyerror": 18, "keystrok": 865, "keyword": [41, 155, 163, 167, 182, 186, 197, 221, 244, 264, 280, 290, 295, 296, 316, 331, 332, 336, 357, 470, 529, 660, 755, 766, 793, 847, 851, 859, 869, 910, 930, 940, 941, 960, 961, 967, 991, 1094, 1361, 1385, 1404, 1417], "kl": 738, "kleen": [383, 385, 783, 784, 785, 786, 869, 1004, 1005, 1404], "klmnoopqrstuvwxyz": [258, 357], "knight": 1413, "know": [58, 153, 264, 281, 324, 357, 884, 956, 991], "known": [132, 157, 201, 422, 606, 672, 696, 702, 869, 974, 1041, 1238, 1299, 1404], "kurtosi": [677, 869, 1280, 1404], "kuzu_db_conn": 153, "kwarg": [33, 34, 38, 57, 68, 69, 70, 71, 72, 78, 79, 80, 81, 82, 83, 84, 86, 87, 88, 90, 91, 92, 93, 94, 95, 148, 150, 153, 154, 182, 184, 186, 200, 204, 221, 236, 264, 280, 285, 316, 357, 360, 660, 869, 907, 930, 935, 966, 991, 1385, 1404, 1409, 1417, 1432], "k\u00f9zudb": 153, "l": [826, 827], "l1": [66, 190], "l2": [66, 190], "label": [245, 314, 319, 357, 360, 361, 463, 663, 677, 678, 679, 681, 683, 685, 687, 689, 690, 692, 694, 869, 911, 932, 991, 1088, 1267, 1280, 1281, 1282, 1284, 1286, 1288, 1290, 1292, 1293, 1295, 1297, 1404, 1409], "label_column": [319, 357], "labelangl": [357, 360, 1404, 1409], "lag": [300, 357, 417, 599, 701, 796, 869, 944, 991, 1036, 1231, 1307, 1404], "lake": [41, 155, 167, 357, 881], "lambda": [53, 97, 166, 238, 264, 265, 280, 281, 286, 323, 343, 357, 375, 422, 521, 522, 606, 614, 615, 640, 641, 802, 803, 816, 829, 830, 842, 869, 921, 930, 936, 946, 955, 974, 991, 1041, 1152, 1153, 1238, 1246, 1404], "land": [470, 482, 1094, 1106], "languag": [166, 245, 260, 289, 327, 357, 493, 498, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1121, 1126, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "larg": [12, 13, 16, 58, 153, 156, 162, 171], "large_str": [258, 309, 316, 357], "larger": [12, 49, 50, 51, 52, 533, 551, 798, 869, 893, 946, 991, 1180, 1404], "largest": [215, 320, 357, 443, 773, 774, 869, 886, 953, 991, 1062, 1388, 1389, 1404], "last": [41, 161, 166, 169, 170, 175, 176, 177, 178, 247, 260, 263, 281, 292, 303, 308, 315, 322, 351, 357, 396, 407, 418, 462, 478, 490, 494, 512, 534, 557, 583, 601, 604, 606, 656, 671, 709, 710, 728, 744, 752, 769, 791, 854, 865, 869, 916, 948, 952, 954, 982, 991, 997, 1016, 1027, 1037, 1087, 1102, 1118, 1122, 1140, 1164, 1173, 1187, 1199, 1215, 1233, 1236, 1275, 1316, 1334, 1350, 1358, 1375, 1384, 1404, 1425, 1427], "last_column": [42, 357], "later": [260, 297, 357, 629, 916, 942, 991], "latest": [34, 133, 155, 167, 211, 496, 497, 627, 751, 754, 809, 1124, 1125, 1357, 1360], "latt": 997, "latter": [42, 133, 233, 357, 1156, 1404], "lazi": [1, 49, 50, 51, 52, 53, 66, 151, 157, 161, 163, 166, 182, 260, 280, 281, 304, 357, 375, 615, 702, 818, 840, 843, 860, 869, 893, 897, 915, 916, 931, 946, 962, 967, 968, 970, 972, 974, 975, 976, 977, 978, 979, 980, 981, 991, 997, 1413, 1414, 1415, 1416, 1417, 1419, 1432, 1435], "lazili": [151, 152, 157, 161, 163, 166, 167, 168, 169, 170, 171, 369, 375, 892, 991], "lazy_fram": [64, 65, 131], "lazyfram": [0, 1, 11, 58, 59, 60, 61, 62, 64, 65, 66, 97, 131, 142, 146, 151, 157, 161, 163, 166, 167, 168, 169, 170, 171, 172, 175, 176, 182, 190, 197, 219, 224, 262, 266, 280, 281, 297, 304, 357, 375, 465, 529, 629, 847, 848, 859, 869, 881, 988, 989, 990, 996, 997, 1413, 1414, 1417, 1419, 1432, 1433, 1435], "lazyframeremot": [934, 991], "lazygroupbi": [910, 911, 938, 991], "lbl": [314, 319, 357], "ldf": [1, 967, 968, 970, 972, 975, 976, 977, 978, 979, 980, 981], "ldot": [520, 869, 1151, 1404], "le": [551, 719, 869, 1180, 1404], "lead": [16, 48, 97, 139, 146, 151, 172, 270, 298, 300, 307, 357, 417, 536, 539, 599, 700, 701, 746, 748, 798, 834, 853, 869, 921, 943, 944, 974, 991, 1036, 1231, 1246, 1305, 1307, 1352, 1354, 1404], "leap": [483, 493, 1107, 1121], "leap_year": 483, "learn": [319, 357], "least": [66, 112, 190, 281, 357, 439, 440, 657, 722, 724, 794, 798, 800, 869, 1058, 1059, 1262, 1328, 1330, 1404, 1425], "leav": [6, 272, 324, 357, 926, 956, 991], "left": [17, 18, 42, 58, 175, 176, 177, 178, 245, 259, 260, 289, 326, 357, 463, 519, 520, 521, 522, 548, 550, 663, 676, 680, 682, 684, 686, 688, 691, 693, 695, 699, 772, 794, 802, 803, 807, 808, 810, 811, 816, 826, 827, 842, 856, 857, 859, 869, 911, 915, 916, 938, 957, 991, 1088, 1150, 1151, 1152, 1153, 1179, 1267, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1303, 1386, 1404, 1416, 1420, 1425], "left_clos": [463, 663, 869, 1088, 1267, 1404], "left_on": [259, 260, 326, 357, 915, 916, 957, 991], "left_right": [259, 326, 357, 915, 957, 991], "leftmost": [699, 869, 1303, 1404, 1427], "len": [14, 182, 186, 219, 258, 281, 334, 338, 343, 357, 456, 615, 626, 628, 666, 674, 799, 822, 826, 869, 894, 959, 964, 969, 974, 991, 996, 1081, 1278, 1404], "len_byt": [14, 448, 733, 734, 1068, 1339], "len_char": [447, 732, 1067, 1338], "length": [66, 67, 85, 148, 156, 162, 166, 180, 184, 190, 243, 245, 289, 302, 357, 360, 430, 447, 462, 498, 600, 614, 627, 666, 670, 671, 674, 676, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 708, 728, 732, 733, 735, 736, 739, 741, 752, 761, 795, 826, 827, 829, 830, 840, 843, 844, 845, 846, 860, 869, 884, 911, 932, 938, 947, 991, 1049, 1067, 1074, 1087, 1098, 1126, 1232, 1238, 1259, 1274, 1275, 1278, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1315, 1334, 1338, 1339, 1341, 1342, 1345, 1347, 1358, 1367, 1404, 1421, 1422, 1425], "leq": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "less": [55, 166, 260, 357, 533, 565, 613, 744, 859, 869, 916, 991, 1350, 1435], "letter": [232, 340, 351, 357, 523, 715, 723, 725, 727, 739, 759, 814, 869, 904, 971, 982, 991, 997, 1321, 1329, 1331, 1333, 1345, 1365, 1427], "level": [12, 42, 44, 45, 48, 50, 52, 147, 164, 166, 169, 170, 171, 238, 265, 277, 304, 309, 357, 361, 529, 869, 881, 949, 991, 1378, 1404, 1432], "lexic": [70, 997, 1071], "lf": [11, 49, 50, 51, 52, 61, 97, 142, 375, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 918, 919, 920, 921, 922, 923, 924, 925, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 939, 940, 942, 944, 945, 946, 947, 948, 950, 951, 952, 953, 954, 956, 957, 958, 959, 960, 962, 963, 964, 969, 973, 991, 1421, 1432, 1435], "lf1": [848, 949, 991, 1417, 1419, 1433], "lf2": [848, 949, 991, 1417, 1419, 1433], "lf3": [991, 1417], "lf4": [991, 1417], "lf5": 991, "lf6": 991, "lf_other": [962, 991], "lib": [869, 1378, 1404], "librari": [1, 114, 148, 153, 156, 614, 869, 995, 1435], "life": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "lifetim": [207, 880, 1419], "light": [42, 357], "like": [37, 39, 41, 44, 45, 46, 47, 48, 65, 133, 148, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 213, 224, 245, 252, 254, 259, 292, 297, 314, 315, 357, 360, 465, 471, 535, 577, 614, 632, 666, 722, 747, 748, 779, 829, 846, 865, 869, 887, 892, 898, 911, 991, 1095, 1209, 1269, 1328, 1393, 1404, 1409], "limit": [12, 13, 52, 53, 153, 154, 188, 235, 357, 425, 528, 534, 869, 906, 991, 1044, 1159, 1164, 1404, 1422, 1431], "line": [12, 22, 42, 151, 152, 156, 166, 243, 252, 254, 357, 360, 722, 1328, 1404, 1409], "line_termin": [39, 49, 357, 991], "linear": [223, 251, 283, 349, 357, 548, 549, 572, 618, 664, 687, 688, 796, 797, 841, 869, 897, 914, 933, 980, 991, 1089, 1177, 1178, 1204, 1268, 1290, 1291, 1404], "linearli": 827, "lineitem": [141, 152, 154], "link": 995, "list": [1, 15, 35, 41, 42, 58, 59, 61, 64, 65, 67, 73, 89, 106, 131, 132, 134, 135, 136, 138, 139, 141, 142, 145, 146, 149, 151, 152, 154, 155, 156, 157, 159, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 180, 181, 182, 186, 194, 195, 196, 202, 213, 220, 225, 229, 231, 232, 236, 242, 244, 245, 249, 257, 276, 279, 285, 289, 290, 291, 292, 295, 303, 310, 311, 319, 321, 322, 323, 325, 331, 336, 337, 357, 368, 375, 381, 408, 421, 422, 423, 463, 470, 482, 525, 531, 536, 545, 555, 614, 615, 627, 628, 656, 663, 669, 672, 678, 679, 681, 683, 685, 687, 690, 692, 694, 709, 710, 721, 723, 725, 727, 742, 762, 764, 765, 772, 791, 793, 796, 807, 808, 810, 811, 813, 821, 823, 827, 828, 829, 830, 846, 849, 851, 857, 865, 869, 895, 902, 904, 907, 910, 911, 935, 940, 948, 954, 955, 960, 962, 967, 968, 991, 996, 997, 1028, 1040, 1041, 1042, 1074, 1088, 1094, 1106, 1149, 1155, 1165, 1168, 1174, 1175, 1185, 1246, 1267, 1273, 1276, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1321, 1327, 1329, 1331, 1333, 1345, 1348, 1383, 1386, 1404, 1413, 1418, 1422, 1424, 1427, 1434, 1435], "list_catalog": 205, "list_namespac": 205, "list_of_seri": 830, "list_tabl": 205, "listitem": 142, "listtostructwidthstrategi": [606, 1238], "lit": [1, 382, 426, 550, 623, 639, 726, 795, 796, 802, 816, 840, 843, 859, 860, 869, 1159, 1404], "liter": [10, 11, 17, 18, 22, 39, 41, 43, 44, 48, 49, 50, 51, 52, 56, 153, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 185, 186, 187, 197, 200, 204, 266, 276, 295, 296, 300, 326, 331, 332, 357, 364, 365, 368, 382, 426, 445, 449, 452, 474, 496, 517, 518, 526, 533, 538, 540, 550, 565, 613, 623, 635, 637, 650, 651, 661, 670, 671, 714, 715, 716, 725, 726, 727, 737, 738, 739, 766, 767, 775, 784, 786, 788, 794, 795, 796, 797, 805, 806, 809, 822, 826, 828, 832, 834, 837, 847, 851, 853, 855, 859, 869, 906, 922, 940, 941, 944, 957, 960, 961, 991, 997, 1045, 1076, 1098, 1124, 1147, 1157, 1179, 1258, 1274, 1275, 1302, 1304, 1307, 1320, 1321, 1322, 1331, 1332, 1333, 1343, 1344, 1345, 1404, 1427], "littl": [291, 357, 430, 1049], "lmn": 997, "ln": [519, 520, 521, 522, 869, 1150, 1151, 1152, 1153, 1404, 1425], "ln_a": 1426, "load": [3, 5, 6, 135, 137, 148, 153, 155, 156, 162, 167, 168, 185, 187, 357, 869, 881, 991, 1435], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 156, "load_tabl": 156, "load_workbook": 156, "loader": [319, 357], "lobster": [726, 1332], "loc": [357, 361], "local": [4, 41, 153, 155, 167, 168, 171, 357, 511, 658, 659, 869, 1066, 1070, 1100, 1101, 1126, 1129, 1139, 1263, 1264, 1404, 1414], "localhost": 153, "localis": [498, 511, 1139], "locat": [42, 163, 166, 169, 171, 213, 233, 287, 317, 323, 357, 699, 869, 955, 991, 1156, 1165, 1302, 1303, 1404], "lock": 188, "log": [31, 60, 443, 516, 611, 637, 661, 774, 869, 1062, 1145, 1389, 1404, 1425], "log10": [869, 1404, 1425], "log10_a": 1426, "log16_a": 1426, "log1p": [869, 1404, 1425], "log1p_a": 1426, "log2": 1425, "logarithm": [609, 610, 611, 869, 1241, 1242, 1243, 1404, 1426], "logic": [66, 190, 265, 343, 357, 360, 361, 383, 385, 465, 615, 772, 783, 784, 785, 786, 829, 830, 859, 869, 893, 898, 903, 915, 934, 942, 946, 974, 991, 1004, 1005, 1246, 1384, 1386, 1404, 1409], "london": [475, 479, 497, 1099, 1103, 1125], "london_timezon": [497, 1125], "london_to_amsterdam": [497, 1125], "long": [232, 272, 281, 324, 325, 357, 904, 926, 956, 991], "longer": [151, 152, 166], "look": [12, 245, 264, 357, 426, 614, 615, 829, 830, 869, 911, 991, 1045], "lookup": 865, "loop": [153, 615, 869], "lose": [472, 1096], "lossi": [151, 152, 166], "lossless": 56, "lot": 55, "love": [715, 739, 1321, 1345], "low": [19, 452, 663, 869, 1267, 1404], "low_memori": [151, 152, 161, 163, 166, 170, 171], "lower": [56, 153, 166, 223, 245, 283, 349, 357, 452, 550, 612, 640, 664, 668, 687, 688, 788, 807, 808, 810, 811, 826, 827, 841, 856, 857, 869, 897, 911, 933, 980, 991, 1076, 1089, 1179, 1244, 1268, 1271, 1290, 1291, 1392, 1404, 1422, 1425], "lower_bound": [245, 357, 452, 550, 869, 911, 991, 1076, 1179, 1392, 1404], "lowercas": [646, 757, 759, 1363, 1365, 1427], "lowest": [612, 869], "lru_cach": [265, 357, 615, 869, 1246, 1404], "lst": 181, "lt": [174, 529, 781, 869, 1404], "ltrim": 1425, "lyric": [715, 739, 1321, 1345], "lz4": [44, 45, 48, 50, 52, 357, 991], "lzo": [48, 52, 357, 991], "m": [73, 75, 259, 357, 471, 472, 474, 479, 480, 500, 502, 503, 514, 722, 751, 753, 754, 758, 809, 810, 811, 812, 818, 915, 991, 997, 1095, 1096, 1098, 1103, 1104, 1128, 1130, 1131, 1142, 1328, 1357, 1359, 1360, 1364, 1417, 1427, 1428], "m_2": [707, 869, 1314, 1404], "m_3": [707, 869, 1314, 1404], "m_i": [707, 869, 1314, 1404], "machin": 1435, "maco": 174, "made": [42, 153, 357, 375, 503, 755, 1131], "mai": [1, 10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 66, 74, 80, 131, 132, 133, 134, 135, 136, 137, 138, 142, 143, 144, 145, 146, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 175, 177, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 203, 207, 223, 224, 231, 233, 245, 259, 260, 261, 265, 266, 289, 297, 304, 314, 316, 319, 326, 327, 357, 360, 361, 369, 370, 375, 447, 462, 463, 465, 470, 471, 472, 482, 484, 493, 498, 500, 511, 523, 544, 581, 614, 615, 626, 629, 663, 672, 676, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 695, 725, 727, 732, 738, 755, 793, 795, 802, 803, 807, 808, 810, 811, 816, 826, 827, 829, 830, 842, 846, 856, 857, 869, 884, 891, 892, 893, 897, 898, 903, 911, 915, 916, 917, 921, 922, 931, 932, 938, 942, 946, 949, 957, 963, 964, 965, 974, 991, 997, 1067, 1071, 1087, 1088, 1089, 1094, 1095, 1096, 1106, 1108, 1121, 1126, 1128, 1139, 1149, 1156, 1174, 1213, 1246, 1267, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1296, 1298, 1331, 1333, 1336, 1338, 1382, 1385, 1387, 1404, 1409, 1435], "main": [154, 174, 892, 991], "maintain": [49, 50, 51, 52, 303, 357, 423, 607, 699, 710, 776, 791, 869, 893, 897, 946, 948, 991, 1042, 1239, 1303, 1390, 1404], "maintain_ord": [49, 50, 51, 52, 244, 259, 279, 281, 303, 322, 326, 327, 337, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 381, 423, 433, 438, 441, 443, 536, 539, 607, 615, 710, 774, 776, 791, 869, 892, 893, 903, 910, 915, 932, 945, 946, 948, 954, 957, 968, 970, 972, 975, 976, 977, 978, 979, 980, 981, 991, 1042, 1239, 1390, 1404], "maintainorderjoin": [259, 326, 357, 915, 957, 991], "major": [156, 314, 357], "make": [42, 66, 89, 132, 133, 137, 148, 151, 152, 155, 156, 157, 159, 163, 167, 273, 277, 284, 315, 327, 357, 360, 521, 522, 646, 647, 656, 669, 730, 743, 869, 927, 991, 1152, 1153, 1273, 1349, 1384, 1404], "malform": 151, "man": [740, 1346], "manag": [57, 98, 99, 204, 880, 881, 1419, 1432], "managed_shallow_clon": 204, "mandatori": [42, 357], "mango": [445, 449, 719, 745, 1064, 1069, 1325, 1351], "mani": [153, 154, 171, 233, 259, 357, 725, 727, 739, 915, 991, 1156, 1331, 1345, 1404, 1408], "manner": 153, "map": [52, 53, 55, 89, 134, 135, 142, 151, 152, 153, 154, 157, 158, 163, 165, 166, 169, 182, 216, 219, 237, 257, 265, 266, 286, 290, 291, 292, 294, 310, 323, 357, 382, 498, 511, 614, 615, 639, 641, 642, 644, 646, 647, 670, 671, 739, 779, 829, 869, 888, 922, 936, 939, 955, 991, 996, 997, 1089, 1126, 1139, 1246, 1274, 1275, 1345, 1393, 1404, 1414, 1416, 1417, 1432], "map_": 118, "map_batch": [369, 370, 375, 830, 869, 991], "map_column": 357, "map_el": [109, 265, 357, 370, 614, 782, 869, 1404], "map_field": [643, 645], "map_row": 357, "mapelementsstrategi": [615, 869], "mapping_strategi": [656, 869], "march": [500, 1128], "mariadb": 154, "mark": [42, 147, 357, 444, 869, 1063, 1404], "mark_area": [1404, 1409], "mark_attr": [357, 360, 1404, 1409], "mark_bar": [357, 360, 1404, 1409], "mark_lin": [357, 360], "mark_point": [357, 360], "markdown": [7, 22, 207], "marker": [42, 357], "mask": [171, 182, 186, 252, 254, 357, 427, 552, 554, 557, 562, 658, 659, 714, 717, 726, 869, 1046, 1160, 1179, 1180, 1181, 1184, 1187, 1193, 1263, 1264, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1304, 1320, 1323, 1332, 1395, 1404], "mass": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "massag": [272, 324, 357, 926, 956, 991], "match": [41, 42, 56, 66, 73, 97, 120, 132, 134, 135, 136, 138, 146, 151, 153, 160, 161, 163, 166, 170, 171, 175, 176, 177, 178, 190, 213, 216, 235, 236, 259, 260, 266, 285, 290, 326, 357, 375, 430, 445, 449, 622, 623, 624, 670, 671, 689, 702, 714, 715, 716, 719, 722, 723, 725, 726, 727, 730, 731, 737, 738, 739, 745, 751, 753, 754, 846, 859, 865, 869, 888, 906, 915, 916, 922, 935, 957, 991, 997, 1049, 1064, 1069, 1148, 1274, 1275, 1292, 1320, 1321, 1322, 1325, 1328, 1329, 1331, 1332, 1333, 1336, 1337, 1343, 1344, 1345, 1351, 1357, 1359, 1360, 1404, 1427], "match_to_schema": [357, 991], "matches_overlap": [725, 727, 1333], "matches_supertyp": [235, 357, 906, 991], "materi": [146, 151, 157, 161, 163, 265, 292, 343, 357, 375, 891, 932, 974, 984, 991, 997, 1246, 1404], "materialis": [153, 257, 258, 290, 291, 357], "materialized_view": 204, "math": [1, 12, 62, 281, 357, 464, 551, 869, 1078, 1080, 1180, 1312, 1376, 1404, 1425, 1429, 1431], "mathemat": [775, 813, 869, 1425], "mathshortcut": [1, 62], "matplotlib": [174, 630, 932, 945, 991], "matter": [245, 257, 289, 291, 292, 311, 357, 676, 747, 748, 869, 911, 938, 991], "max": [11, 27, 42, 48, 52, 147, 168, 223, 235, 244, 268, 281, 289, 357, 361, 458, 528, 551, 614, 656, 666, 670, 671, 676, 679, 680, 700, 744, 795, 807, 810, 832, 849, 869, 897, 906, 910, 938, 991, 1083, 1089, 1159, 1180, 1238, 1269, 1282, 1283, 1305, 1350, 1404, 1413, 1422, 1425], "max_a": [289, 357, 676, 869, 938, 991], "max_binary_s": 153, "max_col": [180, 182], "max_colname_length": [243, 357], "max_color": [42, 357], "max_data_s": 186, "max_elem": 1422, "max_horizont": [357, 831], "max_items_per_column": [243, 357], "max_level": 147, "max_siz": [54, 181, 182, 184, 186, 1435], "max_text_s": 153, "max_valu": 1435, "max_width": [606, 1238], "maxim": [344, 394, 869, 975, 1014, 1404], "maximum": [12, 28, 39, 48, 49, 52, 54, 74, 135, 138, 151, 152, 153, 156, 160, 161, 162, 166, 170, 172, 180, 181, 182, 184, 186, 243, 245, 267, 268, 357, 401, 448, 551, 570, 616, 648, 658, 666, 728, 733, 741, 752, 831, 832, 869, 911, 923, 991, 1021, 1068, 1109, 1180, 1202, 1247, 1255, 1263, 1269, 1334, 1336, 1339, 1347, 1358, 1404, 1421], "mb": [231, 357, 431, 1149, 1404], "md": 142, "md2": 142, "me": [715, 739, 759, 1321, 1345, 1365], "mean": [48, 52, 64, 131, 151, 152, 157, 163, 166, 169, 207, 223, 235, 244, 245, 260, 270, 281, 289, 327, 336, 357, 493, 498, 511, 525, 528, 533, 614, 615, 676, 680, 681, 682, 684, 686, 688, 691, 693, 695, 707, 713, 722, 729, 807, 808, 810, 811, 812, 829, 830, 834, 856, 857, 859, 869, 897, 906, 910, 911, 916, 921, 931, 938, 967, 991, 1089, 1121, 1126, 1139, 1155, 1159, 1246, 1283, 1284, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1314, 1319, 1328, 1335, 1404, 1421, 1422], "mean_horizont": [357, 833], "measur": [272, 324, 357, 361, 926, 956, 991], "measure_a": [357, 361], "measure_b": [357, 361], "median": [223, 281, 357, 528, 683, 684, 869, 897, 962, 991, 1089, 1286, 1287, 1404, 1425], "mediat": 1432, "medium": [42, 357], "megan": [273, 357, 927, 991], "melt": [324, 357, 956, 991], "member": [245, 357, 911, 991, 1185, 1404], "membership": [403, 573, 1023, 1205], "memori": [11, 16, 48, 52, 53, 54, 55, 64, 65, 66, 132, 133, 136, 137, 138, 151, 152, 153, 154, 155, 156, 157, 161, 163, 166, 167, 169, 170, 171, 211, 233, 265, 291, 292, 301, 315, 343, 357, 656, 667, 702, 869, 891, 892, 903, 932, 945, 966, 991, 1156, 1246, 1270, 1308, 1309, 1384, 1404], "memory_map": [157, 163, 169], "memory_resourc": 966, "merg": [41, 259, 260, 273, 357, 915, 916, 927, 991], "merge_sort": [357, 991], "messi": [722, 724, 1328, 1330], "met": 859, "meta": [100, 465, 720, 869, 1326], "metadata": [0, 48, 49, 50, 51, 52, 142, 164, 168, 193, 197, 357, 881, 991], "metastor": 198, "method": [4, 33, 34, 35, 36, 37, 40, 41, 42, 44, 45, 53, 54, 55, 56, 57, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 130, 133, 142, 143, 144, 145, 149, 151, 152, 153, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 172, 179, 182, 186, 190, 192, 198, 199, 201, 202, 207, 209, 214, 219, 223, 224, 227, 228, 233, 240, 244, 251, 257, 265, 272, 277, 283, 290, 291, 292, 300, 322, 331, 333, 338, 343, 349, 357, 371, 373, 374, 375, 380, 383, 384, 417, 452, 465, 477, 500, 503, 517, 518, 526, 533, 535, 538, 540, 548, 551, 565, 599, 613, 615, 633, 635, 637, 650, 651, 652, 655, 661, 664, 666, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 701, 715, 721, 725, 727, 739, 747, 748, 749, 750, 761, 767, 775, 777, 781, 782, 798, 829, 830, 841, 861, 862, 864, 865, 869, 870, 871, 874, 875, 876, 877, 878, 881, 884, 892, 893, 897, 898, 900, 901, 914, 926, 931, 933, 944, 946, 954, 960, 963, 965, 966, 969, 974, 980, 991, 996, 999, 1006, 1036, 1076, 1089, 1110, 1111, 1128, 1131, 1146, 1147, 1156, 1157, 1167, 1169, 1171, 1177, 1180, 1197, 1231, 1245, 1246, 1257, 1258, 1268, 1269, 1283, 1285, 1287, 1289, 1290, 1291, 1294, 1296, 1298, 1307, 1321, 1327, 1331, 1333, 1345, 1361, 1367, 1386, 1396, 1398, 1400, 1404, 1405, 1408, 1410, 1411, 1412, 1414, 1418], "metric": [53, 54, 55, 153], "micro": [499, 1127], "microsecond": [73, 75, 245, 257, 260, 289, 291, 292, 311, 327, 357, 493, 496, 498, 503, 506, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 809, 810, 811, 812, 855, 856, 857, 869, 911, 916, 932, 938, 991, 997, 1121, 1124, 1126, 1134, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1428], "microsoft": [35, 42, 357], "mid_color": [42, 357], "midnight": 90, "midpoint": [223, 283, 349, 357, 664, 687, 688, 841, 869, 897, 933, 980, 991, 1089, 1268, 1290, 1291, 1404], "might": [53, 54, 55, 151, 152, 166, 188, 259, 281, 315, 324, 357, 615, 777, 869, 915, 948, 956, 991], "millennia": 1428, "millennium": 1428, "milli": [499, 1127], "millisecond": [245, 260, 289, 327, 357, 481, 488, 493, 498, 507, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 810, 811, 812, 826, 856, 857, 869, 911, 916, 938, 991, 997, 1121, 1126, 1135, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1428], "milliseconds_diff": [506, 507, 509], "mimic": 796, "min": [42, 48, 52, 148, 168, 223, 235, 275, 281, 289, 357, 459, 528, 656, 666, 676, 685, 686, 807, 810, 837, 847, 869, 897, 906, 938, 991, 1084, 1089, 1159, 1269, 1288, 1289, 1404, 1422, 1425, 1428, 1435], "min_a": [289, 357, 676, 869, 938, 991], "min_col": [180, 182], "min_color": [42, 357], "min_elem": 1422, "min_horizont": [357, 836, 847], "min_period": [462, 519, 521, 522, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 844, 845, 869, 1087, 1150, 1152, 1153, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1404], "min_sampl": [462, 519, 521, 522, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 844, 845, 869, 1087, 1150, 1152, 1153, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1404], "min_siz": [181, 182, 184, 186, 1435], "min_valu": 1435, "mincol": 180, "minim": [347, 395, 402, 571, 702, 710, 869, 978, 1015, 1022, 1203, 1250, 1308, 1404], "minimum": [48, 52, 180, 181, 182, 184, 186, 238, 274, 275, 357, 519, 521, 522, 634, 649, 659, 666, 836, 837, 869, 928, 991, 1115, 1150, 1152, 1153, 1256, 1264, 1269, 1404, 1421, 1435], "minu": [493, 652, 869, 1121], "minut": [245, 260, 289, 327, 357, 481, 485, 487, 492, 493, 496, 498, 499, 508, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 809, 810, 811, 812, 855, 856, 857, 869, 911, 916, 938, 991, 997, 1121, 1124, 1126, 1136, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1428], "minutes_diff": 508, "mirror": [551, 869, 1180, 1404], "misc": 1419, "miscellan": 881, "mismatch": [66, 123, 161, 170, 175, 177, 190], "miss": [56, 66, 151, 152, 163, 166, 171, 190, 240, 266, 357, 425, 519, 521, 522, 534, 558, 559, 606, 869, 922, 991, 1044, 1150, 1152, 1153, 1164, 1404], "missing_column": [163, 171, 266, 357, 922, 991], "missing_struct_field": [56, 266, 357, 922, 991], "missing_utf8_is_empty_str": [151, 152, 166], "mix": [13, 260, 315, 357, 795, 848, 916, 949, 991, 997, 1089, 1404], "mixin": 1, "mkdir": [48, 49, 50, 51, 52, 53, 55, 357, 991], "mlnm": 486, "mm": [42, 357], "mn": 1427, "mno": [18, 22], "mnop": 1427, "mo": 812, "mocha": 997, "mod": [869, 1425], "mode": [40, 41, 42, 43, 49, 50, 51, 52, 175, 177, 281, 304, 357, 696, 723, 840, 843, 860, 869, 891, 893, 903, 932, 945, 991, 1299, 1329, 1404, 1413, 1414, 1432], "model": [319, 357, 702, 869], "modif": 137, "modifi": [53, 54, 55, 151, 152, 166, 188, 207, 213, 233, 249, 256, 257, 329, 357, 397, 497, 514, 614, 615, 714, 722, 723, 726, 737, 738, 757, 759, 760, 829, 830, 869, 921, 991, 1006, 1125, 1142, 1156, 1246, 1320, 1328, 1329, 1332, 1343, 1344, 1363, 1365, 1366, 1404], "modul": [102, 110, 156, 868, 995, 997, 1435], "modulu": [635, 869], "moment": [48, 49, 50, 51, 52, 64, 65, 221, 357, 563, 707, 869, 891, 892, 893, 903, 932, 945, 946, 991, 1195, 1314, 1404], "mon": [357, 360, 1428], "mondai": [245, 357, 470, 482, 511, 513, 793, 911, 991, 1094, 1106, 1139, 1141], "monkei": [735, 736, 1341, 1342], "month": [245, 260, 289, 327, 357, 478, 490, 491, 493, 496, 498, 500, 503, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 806, 807, 808, 809, 810, 811, 812, 856, 857, 869, 911, 916, 938, 991, 1102, 1118, 1119, 1121, 1124, 1126, 1128, 1131, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1428], "month_nam": [500, 503], "monthbegin": [491, 1119], "monthend": [490, 1118], "moos": 997, "more": [22, 42, 48, 52, 58, 66, 98, 99, 128, 132, 133, 134, 135, 136, 137, 138, 146, 148, 153, 154, 155, 156, 160, 161, 162, 163, 167, 168, 170, 175, 177, 182, 190, 207, 209, 221, 223, 227, 228, 236, 256, 257, 265, 272, 277, 285, 290, 291, 293, 304, 314, 315, 319, 322, 324, 343, 357, 361, 384, 423, 447, 529, 533, 541, 563, 594, 607, 611, 615, 655, 656, 698, 707, 723, 732, 751, 753, 754, 776, 787, 799, 815, 821, 824, 833, 835, 838, 839, 849, 859, 865, 869, 897, 900, 901, 907, 926, 934, 935, 946, 949, 954, 956, 966, 991, 995, 997, 999, 1042, 1067, 1089, 1170, 1171, 1195, 1226, 1239, 1246, 1301, 1314, 1329, 1338, 1357, 1359, 1360, 1382, 1384, 1390, 1404, 1419, 1420, 1430, 1433, 1434, 1435], "more_bi": [279, 303, 357, 710, 869, 948, 991], "more_column": [232, 323, 357, 523, 814, 869, 904, 955, 991, 997], "more_expr": [656, 791, 794, 795, 796, 797, 869], "more_nam": [762, 865], "most": [42, 132, 151, 152, 154, 166, 175, 176, 177, 178, 315, 357, 436, 437, 627, 636, 657, 671, 744, 869, 1055, 1056, 1251, 1262, 1275, 1350, 1384, 1404, 1416, 1432], "mostli": [309, 357, 529, 869], "move": [281, 292, 357, 470, 519, 520, 521, 522, 679, 681, 685, 692, 859, 869, 1094, 1150, 1151, 1152, 1153, 1282, 1284, 1288, 1295, 1404], "mr": 966, "mssql": [40, 357], "much": [265, 325, 343, 357, 447, 448, 581, 615, 732, 733, 829, 830, 869, 893, 946, 974, 991, 1067, 1068, 1087, 1213, 1246, 1338, 1339, 1404], "mul": 869, "multi": [8, 42, 151, 152, 319, 357, 523, 722, 869, 997, 1328], "multi_fram": [42, 357], "multicolselector": 212, "multiindexselector": [212, 1001], "multipl": [42, 55, 64, 65, 66, 115, 131, 151, 152, 154, 156, 157, 161, 162, 163, 166, 169, 170, 171, 180, 182, 186, 190, 213, 225, 231, 233, 236, 244, 245, 249, 258, 261, 279, 281, 285, 292, 295, 303, 326, 331, 336, 357, 443, 581, 614, 620, 627, 636, 637, 656, 670, 672, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 710, 762, 774, 791, 799, 816, 829, 831, 836, 842, 849, 852, 859, 865, 869, 881, 891, 892, 899, 903, 907, 910, 911, 917, 932, 935, 940, 945, 948, 957, 960, 967, 974, 991, 1006, 1037, 1149, 1156, 1213, 1233, 1251, 1274, 1276, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1316, 1404, 1417, 1422], "multipli": [614, 678, 679, 681, 683, 685, 687, 690, 692, 694, 766, 869, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1404], "multithread": [303, 357, 710, 791, 869, 948, 991, 1037, 1233, 1316, 1404], "must": [35, 42, 76, 97, 134, 146, 148, 151, 155, 163, 166, 167, 168, 171, 172, 213, 223, 232, 245, 260, 261, 273, 281, 289, 290, 357, 463, 551, 606, 614, 615, 630, 663, 670, 671, 676, 739, 795, 802, 807, 808, 816, 827, 829, 830, 842, 859, 869, 897, 904, 911, 916, 917, 921, 927, 938, 945, 966, 991, 1088, 1089, 1180, 1246, 1267, 1274, 1275, 1345, 1404], "mutual": [290, 357], "my": [168, 172, 357, 360, 1404, 1409], "my_bucket": [934, 991], "my_column": 974, "my_column_": [321, 357], "my_column_0": [321, 357], "my_column_1": [321, 357], "my_column_2": [321, 357], "my_custom_aggreg": 830, "my_fil": 157, "my_holidai": [470, 482, 793, 1094, 1106], "my_larger_than_ram_fil": [49, 50, 51, 52, 893, 946, 991], "my_long_fil": 166, "my_struct": 851, "mydf": 166, "myrol": 154, "mysql": 154, "n": [1, 14, 15, 19, 27, 28, 39, 47, 49, 59, 60, 61, 62, 73, 75, 141, 146, 151, 152, 156, 161, 166, 182, 217, 233, 239, 245, 247, 257, 258, 263, 265, 291, 292, 293, 300, 305, 308, 311, 313, 328, 340, 342, 351, 357, 375, 387, 417, 422, 431, 433, 438, 441, 442, 443, 447, 448, 462, 466, 470, 472, 474, 480, 502, 509, 514, 520, 526, 529, 537, 543, 567, 575, 582, 584, 594, 595, 599, 602, 604, 606, 608, 657, 660, 669, 690, 691, 694, 695, 698, 701, 707, 712, 728, 732, 733, 737, 738, 743, 744, 746, 747, 752, 754, 769, 773, 774, 775, 780, 782, 800, 809, 810, 811, 812, 818, 820, 840, 843, 844, 845, 847, 850, 854, 858, 860, 869, 889, 909, 911, 912, 920, 944, 950, 952, 958, 971, 973, 982, 991, 997, 1036, 1041, 1050, 1061, 1062, 1067, 1068, 1075, 1087, 1090, 1094, 1096, 1098, 1104, 1130, 1137, 1142, 1151, 1156, 1157, 1166, 1173, 1199, 1207, 1214, 1216, 1226, 1227, 1231, 1236, 1238, 1262, 1293, 1294, 1297, 1298, 1301, 1307, 1314, 1318, 1334, 1338, 1339, 1343, 1344, 1349, 1350, 1358, 1360, 1375, 1381, 1388, 1389, 1393, 1394, 1404, 1416, 1417, 1424, 1427, 1428, 1430, 1432, 1435], "n0": [422, 606], "n00": [1041, 1238], "n01": [1041, 1238], "n02": [1041, 1238], "n1": [42, 357, 422, 606], "n2": [1, 42, 357, 422], "n3": 1, "n_1": [529, 869], "n_2": [529, 869], "n_3": [529, 869], "n_bar": 1421, "n_bit": 1427, "n_byte": [431, 447, 448, 732, 733, 1427], "n_char": [447, 448, 732, 733, 1427], "n_chunk": [357, 1006, 1156, 1270, 1404], "n_column": 213, "n_elem": 1422, "n_even": 997, "n_field_strategi": [606, 1238], "n_film": 1413, "n_foo_uniqu": 1421, "n_kilobyt": 431, "n_row": [146, 149, 151, 152, 157, 159, 161, 163, 166, 169, 170, 171, 213, 258, 357, 991], "n_thread": [151, 152], "n_uniqu": [357, 387, 869, 1404], "na": [316, 357, 745, 1385, 1404], "naiv": [474, 475, 754, 1098, 1099, 1360], "name": [1, 20, 24, 26, 34, 37, 39, 40, 42, 43, 49, 59, 60, 61, 62, 77, 89, 107, 132, 134, 135, 136, 137, 138, 142, 144, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 166, 168, 169, 170, 171, 177, 178, 179, 180, 182, 185, 186, 187, 193, 195, 196, 197, 198, 199, 201, 202, 213, 215, 216, 219, 220, 225, 226, 227, 228, 232, 236, 237, 240, 241, 243, 244, 255, 256, 257, 259, 260, 261, 265, 268, 270, 272, 273, 275, 279, 281, 285, 286, 290, 291, 292, 294, 295, 296, 303, 304, 307, 310, 312, 314, 315, 318, 319, 320, 321, 322, 323, 324, 325, 326, 331, 332, 333, 334, 335, 336, 342, 357, 361, 367, 368, 369, 382, 422, 426, 427, 429, 432, 443, 452, 463, 500, 503, 523, 529, 550, 558, 559, 560, 561, 606, 615, 620, 624, 626, 628, 632, 656, 663, 673, 696, 710, 723, 724, 737, 738, 739, 762, 764, 766, 774, 779, 783, 784, 785, 786, 787, 789, 790, 791, 794, 795, 796, 797, 798, 799, 800, 801, 804, 805, 814, 815, 820, 821, 824, 831, 832, 833, 834, 835, 836, 837, 838, 841, 844, 845, 846, 847, 848, 850, 851, 852, 853, 854, 858, 859, 865, 869, 886, 888, 894, 895, 899, 900, 901, 904, 907, 910, 915, 916, 917, 926, 927, 931, 935, 936, 939, 940, 941, 948, 949, 953, 954, 955, 956, 957, 960, 961, 962, 963, 964, 967, 973, 991, 996, 997, 1003, 1041, 1062, 1075, 1088, 1128, 1131, 1148, 1238, 1267, 1272, 1328, 1329, 1330, 1343, 1344, 1368, 1371, 1379, 1380, 1385, 1389, 1393, 1404, 1409, 1414, 1415, 1416, 1417, 1418, 1419, 1431, 1432, 1435], "name_gener": [321, 357], "named_agg": [336, 967], "named_bi": [244, 357, 910, 991], "named_expr": [295, 296, 331, 332, 357, 766, 847, 851, 940, 941, 960, 961, 991], "named_fram": [1417, 1432], "nameless": 137, "namespac": [1, 153, 193, 195, 196, 197, 201, 356, 357, 360, 367, 762, 848, 868, 881, 989, 990, 995, 1404, 1409, 1435], "namespaceinfo": [195, 205], "nan": [137, 182, 211, 227, 228, 234, 235, 315, 316, 357, 468, 469, 517, 518, 527, 528, 538, 540, 548, 551, 558, 559, 560, 561, 565, 613, 616, 634, 648, 649, 650, 651, 678, 704, 775, 798, 869, 900, 901, 905, 906, 991, 1009, 1013, 1092, 1093, 1158, 1159, 1180, 1188, 1189, 1255, 1256, 1281, 1311, 1384, 1385, 1404, 1435], "nan_as_nul": 211, "nan_max": [869, 1404], "nan_min": [869, 1404], "nan_to_nul": [137, 357, 991, 1404], "nana": 1427, "nanmax": [648, 649, 869, 1255, 1256, 1404], "nanosecond": [56, 90, 245, 260, 289, 327, 357, 493, 498, 499, 509, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 810, 811, 812, 856, 857, 869, 911, 916, 938, 991, 1121, 1126, 1127, 1137, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1428], "nans_equ": [551, 869, 1180, 1404], "nansum": [678, 869, 1281, 1404], "nativ": [12, 40, 151, 153, 156, 157, 159, 163, 168, 203, 257, 265, 291, 292, 311, 315, 343, 357, 615, 829, 830, 848, 869, 875, 893, 946, 949, 974, 991, 995, 1246, 1384, 1404, 1408, 1432, 1435], "natur": [611, 869, 1243, 1404, 1420, 1426], "ndarrai": [136, 209, 236, 285, 315, 357, 536, 699, 869, 907, 935, 991, 999, 1165, 1302, 1303, 1384, 1404], "ndjson": [51, 161, 991], "ne": [651, 869, 1258, 1404], "ne_miss": [236, 285, 357, 869, 907, 935, 991, 1147, 1404], "nearest": [60, 223, 260, 283, 349, 357, 451, 532, 548, 664, 687, 688, 696, 841, 869, 897, 916, 933, 980, 991, 1073, 1089, 1163, 1177, 1268, 1290, 1291, 1404, 1426], "nearest_pow2": 60, "necessari": [39, 40, 49, 57, 99, 156, 168, 315, 357, 991, 1384, 1404], "need": [53, 54, 55, 66, 101, 110, 139, 151, 152, 154, 163, 166, 169, 171, 190, 207, 245, 289, 292, 301, 357, 360, 606, 676, 702, 737, 738, 739, 812, 840, 843, 860, 869, 911, 938, 946, 991, 997, 1308, 1343, 1344, 1345, 1361, 1404, 1409, 1435], "neg": [15, 72, 73, 74, 75, 151, 152, 157, 159, 163, 173, 247, 263, 289, 300, 302, 308, 334, 357, 417, 551, 599, 600, 660, 661, 676, 701, 708, 728, 741, 752, 869, 884, 938, 944, 947, 963, 964, 991, 997, 1036, 1173, 1180, 1199, 1231, 1232, 1265, 1307, 1315, 1334, 1347, 1358, 1375, 1404], "negat": [653, 869, 1260, 1404], "neither": [139, 156, 162, 293, 357, 422, 606, 1041, 1238], "nest": [57, 139, 147, 183, 184, 231, 357, 881, 997, 1149, 1404, 1432, 1435], "nesting_level": 183, "net": [723, 1329], "netherland": [260, 357, 916, 991], "netsuite_format": 200, "never": [39, 49, 153, 259, 260, 264, 290, 357, 915, 916, 991], "new": [40, 41, 42, 43, 54, 55, 166, 207, 212, 213, 239, 249, 250, 265, 277, 278, 281, 286, 321, 323, 325, 326, 331, 332, 357, 382, 474, 525, 535, 537, 548, 640, 641, 656, 670, 671, 675, 734, 737, 738, 743, 744, 762, 764, 865, 869, 881, 884, 909, 936, 955, 957, 960, 961, 974, 991, 1001, 1003, 1098, 1155, 1166, 1211, 1259, 1272, 1274, 1275, 1279, 1343, 1344, 1349, 1350, 1368, 1371, 1380, 1404, 1432, 1434], "new_column": [151, 152, 156, 166], "new_dai": 496, "new_dat": 493, "new_df": [326, 357, 957, 991], "new_fil": [37, 39, 44, 45, 48, 357], "new_from_index": 1404, "new_id": [321, 357], "new_lf": [957, 991], "new_tabl": 1434, "new_valu": [802, 803, 816, 842], "new_york": 810, "newli": 58, "newlin": [47, 151, 152, 161, 166, 170, 357], "next": [20, 60, 245, 260, 289, 327, 357, 425, 470, 493, 498, 511, 666, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 856, 857, 869, 893, 911, 916, 938, 991, 1044, 1094, 1121, 1126, 1139, 1269, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "next_batch": 152, "next_pow2": 60, "nfc": [734, 1340, 1427], "nfd": [734, 1340, 1427], "nfkc": [734, 1340, 1427], "nfkd": [734, 1340, 1427], "nfruit": 752, "nl": [470, 482, 793, 1094, 1106], "nnel_id": 139, "no1": 997, "no_default": [240, 357, 670, 671, 739, 869, 1274, 1275, 1345, 1404], "no_optim": [64, 891, 921, 932, 991], "nodataerror": [151, 152, 156, 162, 166], "nodd": [722, 1328], "node": [887, 891, 913, 921, 926, 932, 936, 991], "nodefault": [240, 357, 670, 671, 739, 869, 1274, 1275, 1345, 1404], "non": [4, 5, 39, 41, 42, 49, 58, 73, 74, 137, 148, 173, 215, 222, 258, 272, 289, 295, 296, 300, 320, 321, 324, 326, 331, 332, 357, 383, 385, 425, 442, 443, 447, 452, 456, 457, 470, 497, 534, 550, 551, 568, 569, 603, 621, 656, 657, 662, 666, 670, 671, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 716, 723, 730, 732, 737, 738, 739, 755, 759, 761, 766, 768, 773, 774, 779, 783, 784, 785, 786, 794, 795, 796, 797, 799, 801, 805, 812, 832, 834, 837, 844, 845, 847, 851, 852, 853, 869, 886, 896, 926, 938, 940, 941, 944, 953, 956, 957, 960, 961, 991, 997, 1004, 1005, 1019, 1020, 1039, 1044, 1061, 1062, 1067, 1076, 1081, 1082, 1089, 1094, 1125, 1164, 1179, 1180, 1200, 1201, 1235, 1238, 1246, 1262, 1266, 1274, 1275, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1307, 1322, 1329, 1338, 1343, 1344, 1365, 1367, 1374, 1384, 1388, 1389, 1393, 1404, 1424, 1432], "non_exist": [497, 1125], "non_numer": [39, 49, 357, 991], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 65, 67, 70, 73, 74, 75, 76, 77, 85, 89, 98, 99, 132, 133, 134, 135, 136, 137, 138, 141, 142, 143, 144, 145, 146, 147, 148, 149, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 192, 197, 198, 199, 201, 202, 203, 207, 209, 210, 213, 217, 222, 223, 227, 228, 234, 235, 236, 238, 240, 243, 245, 246, 251, 255, 259, 260, 262, 264, 265, 269, 272, 277, 278, 281, 285, 289, 290, 293, 297, 300, 302, 303, 309, 310, 312, 314, 315, 316, 319, 321, 322, 323, 324, 325, 326, 327, 338, 342, 357, 383, 385, 386, 398, 399, 400, 407, 408, 422, 425, 445, 447, 448, 449, 452, 456, 457, 458, 461, 463, 468, 469, 477, 493, 496, 497, 503, 518, 519, 520, 521, 522, 523, 526, 527, 528, 534, 541, 542, 544, 546, 548, 549, 550, 558, 559, 560, 561, 566, 568, 569, 576, 583, 585, 587, 594, 595, 596, 597, 598, 600, 606, 614, 615, 626, 627, 629, 630, 631, 633, 638, 651, 652, 653, 654, 656, 657, 662, 663, 666, 667, 670, 671, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 701, 702, 703, 704, 708, 709, 713, 714, 716, 718, 719, 720, 723, 726, 728, 729, 730, 731, 732, 733, 735, 736, 741, 743, 744, 745, 746, 747, 748, 751, 752, 753, 754, 756, 758, 761, 762, 763, 764, 765, 768, 772, 779, 784, 785, 786, 788, 794, 795, 796, 797, 798, 799, 801, 802, 803, 805, 807, 808, 809, 810, 811, 812, 814, 815, 816, 822, 823, 824, 825, 826, 827, 828, 829, 830, 832, 834, 837, 842, 843, 844, 845, 851, 852, 853, 855, 856, 857, 859, 869, 889, 890, 892, 893, 896, 897, 900, 901, 903, 905, 906, 907, 911, 914, 915, 916, 919, 921, 926, 929, 934, 935, 938, 942, 944, 945, 946, 947, 948, 954, 955, 956, 957, 962, 965, 966, 969, 973, 974, 983, 984, 991, 996, 997, 999, 1000, 1004, 1005, 1007, 1014, 1015, 1019, 1020, 1027, 1028, 1041, 1044, 1052, 1057, 1060, 1064, 1067, 1068, 1069, 1075, 1076, 1081, 1082, 1088, 1089, 1091, 1092, 1093, 1101, 1109, 1110, 1111, 1115, 1124, 1125, 1131, 1145, 1147, 1150, 1151, 1152, 1153, 1157, 1158, 1159, 1161, 1164, 1170, 1172, 1174, 1176, 1177, 1178, 1179, 1185, 1190, 1191, 1194, 1195, 1196, 1198, 1200, 1201, 1204, 1208, 1215, 1217, 1219, 1226, 1227, 1228, 1229, 1230, 1232, 1238, 1246, 1247, 1248, 1249, 1250, 1258, 1261, 1266, 1267, 1268, 1269, 1274, 1275, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1301, 1302, 1303, 1304, 1307, 1310, 1311, 1314, 1315, 1318, 1319, 1320, 1322, 1324, 1325, 1326, 1329, 1332, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1347, 1349, 1350, 1351, 1352, 1353, 1354, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1367, 1370, 1374, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1386, 1393, 1394, 1404, 1413, 1415, 1416, 1417, 1419, 1422, 1424, 1427, 1428, 1432], "nonexist": [497, 1125], "nor": [156, 162, 293, 357, 859], "normal": [41, 147, 245, 357, 516, 563, 677, 681, 690, 694, 707, 779, 869, 911, 991, 997, 1145, 1195, 1280, 1314, 1393, 1404, 1425], "normalised_scor": 153, "norowsreturnederror": [290, 357], "north": 76, "not_": [331, 357, 859, 869, 960, 991, 997, 1404], "not_c": [331, 357, 960, 991], "notabl": 153, "notat": [13, 39, 42, 357], "note": [4, 12, 22, 41, 42, 48, 53, 54, 55, 57, 58, 65, 66, 72, 73, 75, 90, 98, 99, 132, 133, 134, 136, 138, 139, 147, 151, 152, 153, 154, 155, 156, 160, 161, 162, 166, 167, 168, 170, 172, 175, 177, 180, 182, 186, 188, 190, 207, 211, 219, 221, 223, 224, 227, 228, 231, 234, 235, 236, 245, 246, 255, 256, 257, 259, 260, 265, 273, 277, 280, 281, 285, 286, 289, 290, 291, 292, 297, 300, 304, 311, 314, 316, 319, 321, 322, 324, 326, 327, 331, 333, 334, 357, 367, 417, 430, 445, 447, 448, 449, 452, 460, 461, 465, 468, 469, 475, 490, 491, 493, 498, 503, 511, 520, 527, 528, 533, 535, 542, 550, 551, 558, 559, 568, 569, 577, 581, 599, 603, 614, 615, 629, 630, 638, 641, 643, 645, 662, 670, 671, 675, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 703, 707, 713, 714, 715, 721, 722, 723, 724, 725, 726, 727, 728, 732, 733, 737, 738, 739, 741, 746, 747, 748, 751, 752, 759, 761, 762, 768, 775, 784, 786, 793, 802, 807, 808, 810, 811, 812, 816, 826, 828, 829, 830, 840, 842, 843, 848, 852, 856, 857, 859, 860, 865, 869, 880, 884, 892, 897, 898, 900, 901, 905, 906, 907, 911, 916, 921, 927, 935, 936, 938, 942, 944, 945, 948, 949, 954, 956, 957, 960, 963, 964, 991, 995, 997, 1019, 1020, 1036, 1039, 1049, 1067, 1068, 1076, 1085, 1086, 1089, 1092, 1093, 1099, 1118, 1119, 1121, 1126, 1131, 1139, 1149, 1151, 1158, 1159, 1172, 1179, 1180, 1200, 1201, 1209, 1213, 1231, 1235, 1246, 1266, 1274, 1275, 1279, 1283, 1285, 1287, 1289, 1291, 1292, 1294, 1296, 1298, 1302, 1304, 1307, 1309, 1314, 1319, 1320, 1321, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1338, 1339, 1343, 1344, 1345, 1347, 1352, 1353, 1354, 1357, 1358, 1365, 1367, 1374, 1385, 1387, 1404, 1413, 1414, 1418, 1419, 1427, 1430, 1432], "noth": [22, 722, 731, 1328, 1337], "notic": [153, 236, 357, 907, 991, 1404], "notimplementederror": [11, 211], "now": [58, 70, 151, 156, 289, 315, 357, 470, 623, 755, 793, 938, 991, 1094, 1361, 1384, 1404], "np": [97, 136, 209, 213, 236, 285, 315, 357, 536, 614, 699, 869, 907, 935, 991, 999, 1165, 1183, 1186, 1188, 1189, 1302, 1303, 1404], "npt": [209, 999], "nr": [340, 351, 971, 982], "nth": [239, 357, 537, 744, 865, 869, 909, 991, 1166, 1350, 1404], "nthe": [722, 1328], "nthose": [722, 1328], "nu": 719, "null": [18, 39, 41, 48, 49, 52, 58, 66, 73, 134, 135, 138, 147, 151, 152, 161, 163, 166, 170, 171, 172, 179, 182, 186, 190, 211, 215, 216, 217, 222, 223, 227, 228, 230, 234, 235, 236, 238, 251, 259, 264, 266, 269, 270, 271, 278, 281, 283, 285, 300, 303, 305, 306, 307, 310, 312, 315, 316, 320, 323, 326, 328, 338, 357, 375, 383, 385, 386, 396, 399, 400, 403, 407, 408, 417, 418, 425, 427, 430, 442, 443, 444, 445, 447, 448, 449, 452, 456, 457, 458, 461, 466, 468, 469, 493, 496, 497, 504, 505, 506, 507, 508, 509, 510, 518, 519, 520, 521, 522, 523, 526, 527, 528, 529, 534, 541, 546, 548, 549, 555, 558, 559, 560, 561, 566, 568, 569, 573, 575, 576, 580, 581, 583, 585, 586, 587, 595, 596, 597, 598, 599, 601, 603, 615, 638, 651, 652, 653, 654, 656, 657, 662, 666, 667, 671, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 701, 702, 704, 709, 710, 713, 714, 716, 717, 718, 719, 720, 721, 722, 723, 724, 726, 728, 729, 730, 731, 732, 733, 735, 736, 741, 743, 744, 745, 751, 752, 754, 756, 761, 762, 763, 764, 765, 768, 772, 773, 774, 783, 784, 785, 786, 791, 794, 795, 796, 797, 799, 801, 805, 809, 814, 825, 828, 832, 834, 837, 844, 845, 851, 852, 853, 859, 869, 886, 889, 896, 897, 900, 901, 905, 906, 907, 914, 915, 922, 929, 935, 944, 948, 953, 955, 957, 962, 969, 991, 997, 1004, 1005, 1016, 1019, 1020, 1023, 1027, 1028, 1036, 1037, 1039, 1044, 1046, 1049, 1061, 1062, 1063, 1064, 1067, 1068, 1069, 1075, 1076, 1081, 1082, 1090, 1092, 1093, 1124, 1125, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1147, 1148, 1150, 1151, 1152, 1153, 1157, 1158, 1159, 1160, 1164, 1170, 1171, 1176, 1177, 1178, 1185, 1190, 1191, 1192, 1198, 1200, 1201, 1204, 1205, 1207, 1208, 1212, 1213, 1215, 1217, 1218, 1219, 1228, 1230, 1231, 1233, 1235, 1238, 1246, 1258, 1261, 1262, 1266, 1275, 1278, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1307, 1311, 1316, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1332, 1334, 1335, 1336, 1337, 1338, 1339, 1341, 1342, 1347, 1349, 1350, 1351, 1357, 1358, 1360, 1362, 1367, 1370, 1374, 1379, 1381, 1384, 1385, 1386, 1388, 1389, 1404, 1416, 1420, 1422, 1424, 1427, 1428, 1430, 1432, 1433, 1435], "null_behavior": [466, 575, 869, 1090, 1207, 1404], "null_count": [48, 52, 223, 228, 357, 462, 869, 897, 991, 1087, 1089, 1404], "null_equ": [230, 357, 1148, 1404], "null_on_oob": [407, 581, 583, 1027, 1213, 1215], "null_prob": [179, 182, 186], "null_valu": [39, 49, 151, 152, 166, 357, 991], "nullabl": [41, 357], "nullbehavior": [466, 575, 869, 1090, 1207, 1404], "nullif": 1425, "nulls_equ": [259, 357, 403, 555, 573, 869, 915, 991, 1023, 1185, 1205, 1404], "nulls_last": [303, 357, 396, 418, 601, 656, 709, 710, 791, 869, 948, 991, 1016, 1037, 1192, 1233, 1316, 1404], "num": [15, 42, 318, 357, 550, 869, 1179, 1404], "num_list_valu": 375, "num_row": 211, "num_sampl": [826, 827], "number": [12, 13, 14, 15, 16, 19, 27, 39, 40, 42, 44, 48, 49, 50, 51, 52, 57, 58, 72, 73, 74, 90, 99, 120, 132, 134, 135, 136, 138, 141, 147, 151, 152, 153, 154, 156, 160, 161, 162, 163, 164, 166, 169, 170, 171, 173, 180, 182, 185, 187, 188, 189, 197, 213, 215, 217, 222, 231, 232, 235, 243, 247, 248, 257, 258, 263, 276, 277, 289, 293, 300, 305, 308, 320, 325, 328, 330, 338, 340, 342, 351, 357, 375, 397, 410, 415, 417, 422, 425, 430, 434, 435, 436, 437, 439, 440, 442, 443, 448, 456, 462, 463, 466, 470, 473, 481, 484, 486, 488, 489, 499, 512, 513, 515, 519, 520, 521, 522, 526, 528, 534, 543, 558, 559, 566, 567, 575, 584, 587, 592, 594, 599, 602, 604, 606, 608, 656, 660, 663, 666, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 701, 703, 712, 728, 732, 733, 737, 741, 743, 744, 752, 755, 769, 773, 774, 780, 793, 798, 799, 800, 812, 820, 825, 826, 827, 844, 845, 850, 854, 858, 869, 886, 889, 893, 896, 904, 906, 912, 920, 932, 944, 946, 950, 952, 953, 958, 959, 969, 971, 973, 982, 991, 996, 1030, 1034, 1036, 1041, 1044, 1049, 1053, 1054, 1055, 1056, 1058, 1059, 1061, 1062, 1068, 1075, 1081, 1087, 1088, 1090, 1094, 1097, 1105, 1108, 1113, 1116, 1117, 1127, 1140, 1141, 1143, 1149, 1150, 1151, 1152, 1153, 1157, 1159, 1164, 1173, 1198, 1199, 1207, 1216, 1219, 1224, 1226, 1231, 1236, 1238, 1252, 1253, 1267, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1307, 1310, 1318, 1334, 1336, 1338, 1339, 1343, 1347, 1349, 1350, 1358, 1361, 1375, 1388, 1389, 1394, 1404, 1420, 1423, 1426, 1435], "number_of_two": [404, 574], "numbers_decim": 755, "numer": [12, 18, 39, 42, 49, 155, 167, 216, 225, 260, 315, 316, 324, 325, 357, 375, 380, 430, 444, 452, 533, 550, 611, 635, 637, 661, 669, 702, 704, 724, 761, 767, 775, 826, 869, 881, 888, 899, 916, 956, 991, 997, 1049, 1063, 1076, 1089, 1179, 1273, 1308, 1311, 1330, 1367, 1384, 1404, 1426, 1435], "numeric_dtyp": 1435, "numeric_to_on": 375, "numericliter": [452, 826, 827, 869, 1076, 1404], "numpi": [97, 105, 136, 174, 209, 213, 221, 257, 291, 292, 311, 315, 316, 357, 551, 614, 648, 649, 678, 869, 991, 999, 1180, 1183, 1186, 1188, 1189, 1255, 1256, 1281, 1384, 1385, 1404], "nworld": 746, "o": [157, 169, 431, 442, 443, 462, 721, 773, 774, 869, 1050, 1061, 1062, 1087, 1327, 1352, 1388, 1389, 1404, 1417], "oauth": 168, "obj": 997, "object": [11, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 66, 89, 108, 132, 133, 134, 139, 147, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 167, 168, 180, 182, 183, 190, 210, 211, 213, 219, 224, 231, 244, 245, 260, 262, 289, 292, 297, 304, 314, 315, 316, 357, 375, 465, 629, 807, 808, 810, 811, 828, 848, 856, 857, 869, 881, 891, 898, 903, 911, 916, 919, 932, 938, 945, 949, 988, 991, 996, 997, 1000, 1149, 1378, 1404, 1414, 1416, 1419, 1432, 1434], "observ": [259, 357, 463, 519, 520, 521, 522, 663, 869, 915, 991, 1088, 1150, 1151, 1152, 1153, 1267, 1404], "obvious": 764, "occur": [42, 64, 106, 115, 121, 261, 357, 404, 574, 636, 666, 869, 891, 903, 917, 932, 945, 991, 1024, 1206, 1251, 1269, 1384, 1404], "occurr": [146, 544, 546, 554, 557, 779, 869, 1174, 1176, 1184, 1187, 1393, 1404], "oct": 1427, "octet_length": 1425, "octob": [503, 1131, 1427], "od": [162, 881], "odbc": [40, 153, 357], "odd": 722, "odi": [725, 727, 1333], "off": [64, 65, 151, 152, 166, 259, 260, 357, 470, 482, 793, 891, 892, 903, 915, 916, 921, 932, 945, 991, 1094, 1106], "offer": [280, 357, 660, 869, 930, 991, 1428, 1432], "offic": [42, 357], "offset": [75, 151, 152, 157, 159, 161, 163, 166, 169, 170, 171, 239, 245, 289, 302, 333, 334, 357, 470, 471, 479, 490, 491, 493, 498, 511, 537, 582, 600, 676, 708, 726, 727, 741, 754, 846, 869, 909, 911, 938, 947, 963, 964, 991, 1094, 1095, 1103, 1118, 1119, 1121, 1126, 1139, 1166, 1214, 1232, 1315, 1332, 1333, 1347, 1360, 1404, 1431], "offset_bi": 812, "often": [154, 207, 245, 289, 357, 404, 574, 669, 676, 869, 911, 938, 991, 1024, 1206, 1273, 1404, 1419, 1432], "ok": 606, "old": [41, 286, 357, 670, 671, 869, 936, 991, 1274, 1275, 1404], "old_tabl": 1434, "older": [48, 52, 357, 991], "oldw": 747, "omit": [29, 42, 135, 139, 156, 162, 180, 207, 277, 292, 314, 319, 357, 807, 810, 822, 823, 856, 857, 997, 1433, 1434], "onc": [64, 131, 151, 152, 188, 213, 265, 291, 293, 336, 357, 594, 615, 698, 749, 750, 869, 887, 967, 991, 1226, 1246, 1301, 1355, 1356, 1404, 1417], "one": [22, 39, 40, 42, 49, 58, 66, 112, 132, 134, 135, 136, 137, 138, 151, 152, 156, 160, 161, 162, 163, 166, 170, 171, 185, 187, 190, 207, 216, 224, 227, 228, 235, 243, 244, 245, 257, 259, 261, 262, 272, 281, 289, 290, 291, 297, 300, 315, 318, 324, 337, 357, 381, 417, 463, 465, 528, 529, 533, 536, 539, 541, 599, 606, 611, 629, 656, 675, 676, 701, 709, 722, 723, 724, 739, 762, 794, 798, 800, 807, 810, 830, 846, 849, 859, 865, 869, 888, 898, 900, 901, 906, 907, 910, 911, 915, 917, 926, 934, 938, 942, 944, 956, 962, 968, 991, 1006, 1036, 1041, 1088, 1159, 1170, 1171, 1231, 1238, 1243, 1267, 1279, 1307, 1328, 1329, 1330, 1345, 1368, 1384, 1404, 1419, 1420, 1422, 1426, 1427, 1434], "oneormoredatatyp": [42, 180, 357], "ones": [680, 682, 684, 686, 688, 691, 693, 695, 869, 997, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "onf": [741, 1347], "onli": [1, 5, 12, 15, 22, 32, 39, 40, 42, 49, 57, 58, 63, 64, 66, 99, 131, 133, 146, 148, 151, 152, 153, 154, 156, 157, 159, 161, 163, 166, 169, 170, 171, 172, 175, 176, 177, 178, 182, 186, 190, 197, 207, 227, 228, 231, 233, 236, 245, 246, 257, 260, 261, 264, 265, 281, 289, 291, 292, 311, 313, 314, 315, 326, 327, 343, 357, 381, 383, 385, 397, 451, 452, 465, 470, 482, 493, 501, 503, 523, 532, 542, 615, 622, 623, 641, 643, 645, 656, 668, 672, 715, 725, 727, 739, 777, 793, 829, 830, 869, 893, 895, 898, 900, 901, 902, 911, 916, 917, 931, 938, 939, 945, 946, 957, 959, 974, 991, 997, 1004, 1005, 1006, 1073, 1076, 1094, 1106, 1121, 1131, 1149, 1156, 1163, 1172, 1246, 1271, 1321, 1331, 1333, 1345, 1378, 1381, 1384, 1404, 1413, 1416, 1432, 1433, 1435], "onlin": [233, 357, 1156, 1404], "ont": [725, 727, 1331, 1333], "onto": 182, "oof": [740, 1346, 1422, 1427], "op": [22, 151, 152, 186, 286, 357, 622, 669, 702, 869, 919, 936, 991, 1273, 1404], "opac": [357, 360, 1404, 1409], "opaqu": 974, "open": [42, 54, 149, 151, 152, 153, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 224, 357, 465, 869, 898, 991], "openoffic": 162, "openpyxl": [156, 174], "oper": [4, 42, 57, 66, 99, 108, 111, 118, 125, 132, 134, 135, 136, 137, 138, 148, 153, 190, 218, 233, 236, 238, 244, 250, 261, 262, 265, 273, 277, 279, 280, 281, 284, 285, 287, 289, 292, 293, 298, 300, 309, 315, 316, 321, 324, 325, 335, 336, 357, 380, 381, 384, 417, 457, 458, 459, 460, 461, 462, 517, 518, 533, 535, 538, 540, 565, 594, 595, 596, 597, 598, 599, 613, 614, 632, 635, 637, 638, 639, 650, 651, 652, 655, 656, 661, 668, 698, 701, 702, 767, 775, 782, 783, 785, 796, 797, 801, 813, 829, 830, 848, 869, 881, 890, 895, 897, 902, 907, 910, 915, 917, 926, 927, 935, 939, 943, 944, 949, 956, 959, 967, 991, 1036, 1077, 1082, 1083, 1084, 1085, 1086, 1087, 1146, 1147, 1156, 1167, 1169, 1197, 1226, 1227, 1228, 1229, 1230, 1231, 1245, 1257, 1258, 1271, 1301, 1307, 1343, 1378, 1383, 1384, 1385, 1404, 1423, 1431, 1432], "operand": [775, 869], "opp": 997, "oppos": 793, "opposit": [300, 357, 417, 599, 701, 869, 944, 991, 1036, 1231, 1307, 1404], "opt": [319, 357], "optim": [49, 50, 51, 52, 64, 65, 131, 146, 151, 157, 161, 163, 166, 168, 169, 170, 171, 257, 262, 280, 284, 291, 322, 357, 614, 829, 830, 869, 887, 891, 892, 893, 903, 921, 932, 945, 946, 954, 963, 964, 965, 974, 991, 1072, 1302, 1404], "optimis": [153, 265, 292, 343, 357, 991, 995, 1246, 1304, 1404, 1435], "optimist": 16, "option": [2, 3, 4, 5, 6, 7, 10, 32, 35, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 55, 56, 58, 64, 65, 74, 76, 142, 151, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 174, 179, 180, 181, 182, 185, 186, 187, 197, 198, 224, 240, 245, 255, 260, 266, 272, 297, 304, 310, 321, 324, 326, 357, 430, 465, 470, 563, 622, 623, 629, 656, 677, 678, 679, 681, 683, 685, 687, 690, 692, 694, 707, 715, 725, 727, 730, 739, 741, 755, 779, 851, 859, 869, 881, 891, 892, 893, 898, 903, 911, 915, 916, 922, 926, 932, 942, 945, 946, 949, 956, 957, 966, 991, 997, 1049, 1094, 1195, 1280, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1314, 1321, 1331, 1333, 1345, 1347, 1380, 1393, 1404, 1422, 1427, 1434], "optional_memb": [555, 869, 1185, 1404], "or_": 869, "oracl": 154, "orang": [220, 338, 339, 341, 342, 344, 345, 347, 349, 350, 357, 443, 774, 869, 969, 970, 972, 973, 975, 976, 978, 980, 981, 1427], "orc": 200, "order": [12, 42, 49, 50, 51, 52, 55, 58, 64, 70, 135, 151, 153, 166, 173, 175, 176, 177, 178, 190, 215, 219, 220, 227, 228, 229, 236, 244, 245, 259, 261, 273, 279, 280, 281, 285, 289, 291, 293, 294, 298, 303, 314, 315, 320, 322, 326, 327, 357, 396, 418, 423, 442, 443, 468, 469, 529, 576, 594, 601, 607, 656, 661, 666, 676, 698, 699, 700, 709, 710, 740, 747, 748, 749, 750, 764, 773, 774, 776, 777, 779, 791, 848, 859, 869, 880, 886, 893, 895, 900, 901, 902, 907, 910, 911, 915, 917, 926, 927, 935, 938, 939, 943, 946, 948, 949, 953, 954, 957, 991, 995, 996, 997, 1016, 1037, 1042, 1061, 1062, 1071, 1092, 1093, 1160, 1192, 1208, 1226, 1233, 1239, 1265, 1269, 1277, 1301, 1303, 1305, 1316, 1346, 1371, 1388, 1389, 1390, 1391, 1393, 1404, 1413, 1416, 1422, 1431, 1432, 1435], "order_bi": [656, 869], "ordin": [494, 666, 869, 1122, 1269, 1404, 1433], "ordinal_dai": [478, 513], "org": [22, 44, 45, 133, 153, 154, 157, 159, 209, 210, 211, 221, 357, 630, 734, 945, 991, 999, 1000, 1340], "orient": [59, 61, 106, 136, 138, 277, 357, 991, 1413], "origin": [58, 151, 152, 166, 227, 228, 236, 285, 322, 357, 468, 469, 497, 498, 511, 529, 576, 615, 639, 656, 668, 669, 670, 671, 672, 674, 716, 722, 731, 789, 790, 869, 900, 901, 907, 935, 954, 991, 1092, 1093, 1125, 1126, 1139, 1160, 1208, 1273, 1274, 1275, 1276, 1278, 1322, 1328, 1337, 1404], "orjson": 147, "orld": 1353, "orson": 147, "other": [1, 22, 38, 42, 48, 65, 66, 132, 150, 151, 152, 153, 156, 166, 171, 175, 176, 177, 178, 190, 228, 230, 233, 236, 259, 260, 261, 272, 273, 281, 285, 290, 292, 295, 296, 319, 324, 326, 329, 331, 332, 355, 357, 360, 380, 384, 386, 396, 397, 452, 467, 503, 511, 517, 518, 529, 533, 538, 540, 550, 551, 555, 565, 572, 595, 596, 597, 598, 613, 614, 615, 619, 625, 635, 637, 650, 651, 655, 670, 671, 703, 710, 739, 766, 767, 772, 775, 782, 784, 786, 791, 794, 795, 796, 797, 805, 812, 829, 830, 832, 834, 837, 847, 851, 853, 869, 881, 884, 892, 907, 915, 916, 917, 921, 926, 927, 934, 935, 940, 941, 945, 956, 957, 960, 961, 962, 991, 997, 1006, 1076, 1091, 1131, 1139, 1146, 1147, 1148, 1156, 1167, 1169, 1180, 1185, 1197, 1204, 1227, 1228, 1229, 1230, 1245, 1246, 1257, 1258, 1274, 1275, 1386, 1395, 1403, 1404, 1409, 1419, 1432], "other_df": [259, 357], "other_lf": [915, 991], "otherwis": [40, 151, 153, 156, 163, 169, 181, 184, 188, 240, 265, 273, 292, 295, 314, 319, 343, 357, 375, 422, 427, 448, 452, 463, 519, 520, 521, 522, 606, 615, 626, 656, 660, 661, 663, 668, 704, 714, 717, 721, 726, 728, 733, 737, 738, 741, 752, 779, 783, 812, 815, 824, 829, 830, 859, 869, 893, 927, 940, 946, 974, 991, 996, 1041, 1046, 1068, 1076, 1088, 1150, 1151, 1152, 1153, 1238, 1246, 1265, 1267, 1271, 1302, 1304, 1311, 1320, 1323, 1327, 1332, 1334, 1339, 1343, 1344, 1347, 1358, 1393, 1404, 1424], "our": 212, "out": [8, 16, 40, 49, 50, 51, 52, 53, 54, 55, 113, 139, 142, 171, 174, 182, 186, 236, 289, 292, 357, 407, 427, 581, 583, 714, 717, 726, 859, 907, 938, 991, 1027, 1046, 1213, 1215, 1320, 1323, 1332, 1430], "outcom": [656, 869], "outer": [58, 326, 357, 957, 991], "outermost": 57, "outlin": 7, "output": [0, 8, 32, 39, 42, 44, 45, 46, 47, 48, 49, 53, 54, 55, 132, 137, 215, 223, 257, 264, 265, 270, 273, 279, 281, 291, 297, 307, 320, 323, 327, 357, 375, 383, 385, 408, 430, 442, 443, 448, 463, 503, 568, 569, 585, 603, 606, 614, 615, 626, 629, 640, 662, 663, 670, 702, 713, 729, 730, 733, 768, 773, 774, 779, 783, 784, 785, 786, 796, 797, 798, 802, 803, 816, 826, 827, 829, 830, 834, 842, 852, 853, 859, 869, 881, 886, 897, 903, 921, 926, 927, 942, 953, 955, 974, 991, 1004, 1005, 1019, 1020, 1028, 1039, 1049, 1061, 1062, 1068, 1088, 1131, 1200, 1201, 1217, 1235, 1246, 1266, 1267, 1319, 1335, 1339, 1374, 1388, 1389, 1393, 1404], "output_path": [630, 945, 991], "outsid": [56, 168, 171, 452, 869, 1076, 1404], "over": [52, 53, 54, 55, 66, 141, 151, 152, 156, 162, 166, 171, 182, 183, 190, 215, 233, 256, 257, 258, 265, 273, 290, 291, 292, 304, 320, 321, 335, 343, 357, 361, 375, 442, 443, 462, 465, 520, 528, 614, 615, 626, 628, 629, 630, 631, 632, 640, 641, 666, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 773, 774, 802, 803, 816, 829, 830, 842, 848, 869, 886, 891, 903, 927, 932, 945, 949, 953, 966, 974, 988, 991, 997, 1061, 1062, 1087, 1151, 1156, 1246, 1282, 1283, 1284, 1285, 1287, 1288, 1289, 1291, 1294, 1295, 1296, 1298, 1388, 1389, 1404, 1432], "overflow": [444, 460, 461, 756, 768, 869, 888, 991, 1063, 1085, 1086, 1362, 1374, 1404], "overhead": [55, 57, 99, 166, 169, 170, 171], "overlap": [716, 723, 725, 727, 1322, 1329, 1331, 1333], "overrid": [1, 39, 42, 49, 132, 134, 135, 136, 137, 138, 151, 153, 154, 156, 160, 161, 162, 168, 170, 179, 180, 186, 188, 357, 991], "overridden": [42, 132, 134, 136, 138, 160, 161, 170, 188, 357, 991], "overview": [357, 375, 869, 881, 991, 1404, 1431, 1435], "overwrit": [16, 40, 41, 43, 52, 55, 132, 134, 135, 136, 138, 142, 147, 151, 152, 160, 161, 166, 170, 211, 326, 357, 382, 766, 869, 957, 991], "overwrite_schema": [41, 357], "ow": 746, "own": [859, 884, 1384, 1404, 1435], "p": [60, 264, 280, 357, 660, 851, 869, 930, 991, 997, 1332, 1334, 1417], "p13dt14h0": 503, "p1dt42": 503, "pa": [41, 132, 172, 357, 848, 996], "pa_tabl": 848, "pacif": [471, 1095], "pack": [277, 357], "packag": [34, 35, 36, 148, 153, 357, 361, 470, 482, 793, 1094, 1106], "pad": [735, 736, 761, 1341, 1342, 1367], "pad_end": [736, 1342], "pad_start": [735, 761, 1341, 1367], "page": [48, 52, 157, 163, 169, 171, 357, 375, 869, 881, 991, 1404, 1431], "pair": [132, 134, 135, 136, 138, 144, 160, 161, 170, 286, 357, 936, 991, 1435], "pairwis": [221, 357], "panda": [40, 133, 137, 147, 174, 236, 245, 285, 316, 322, 324, 357, 490, 491, 772, 848, 869, 907, 911, 935, 954, 956, 991, 1118, 1119, 1385, 1386, 1404, 1414, 1416, 1432], "pandas_df": 1432, "pane": [42, 357], "panic": 114, "pap": 1334, "papa": 728, "papai": [728, 1334], "papaya": [728, 741, 752, 1334, 1347, 1358], "parallel": [64, 66, 141, 154, 163, 171, 245, 260, 262, 280, 296, 332, 357, 577, 779, 859, 869, 911, 915, 916, 941, 961, 974, 991, 1087, 1209, 1393, 1404], "parallelis": [265, 343, 357, 1246, 1404], "parallelstrategi": [163, 171], "param": [42, 132, 134, 135, 136, 138, 151, 152, 160, 161, 166, 170, 181, 182, 186, 290, 357, 991], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 22, 27, 28, 29, 30, 32, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 58, 59, 60, 61, 62, 64, 65, 66, 67, 70, 73, 74, 75, 76, 77, 85, 89, 97, 100, 106, 115, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 190, 192, 193, 195, 196, 197, 211, 212, 213, 215, 216, 217, 221, 223, 224, 225, 226, 227, 228, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 243, 244, 245, 246, 247, 249, 250, 255, 257, 258, 259, 260, 261, 263, 264, 265, 266, 270, 272, 273, 276, 277, 279, 280, 281, 283, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 300, 302, 303, 304, 305, 307, 308, 309, 310, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 336, 340, 342, 343, 349, 351, 357, 375, 380, 382, 383, 384, 385, 386, 396, 403, 404, 407, 408, 417, 418, 422, 423, 425, 426, 427, 428, 429, 430, 431, 432, 442, 443, 444, 445, 449, 452, 457, 458, 459, 460, 461, 462, 463, 465, 466, 467, 470, 472, 474, 475, 480, 482, 493, 496, 497, 498, 499, 500, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 517, 518, 519, 520, 521, 522, 523, 526, 527, 528, 529, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 546, 548, 549, 550, 551, 555, 563, 565, 567, 572, 573, 574, 575, 577, 579, 581, 582, 583, 584, 585, 594, 595, 596, 597, 598, 599, 600, 601, 602, 604, 605, 606, 607, 608, 609, 613, 614, 615, 622, 623, 629, 630, 631, 635, 637, 640, 641, 642, 643, 644, 645, 650, 651, 655, 656, 657, 660, 661, 663, 664, 666, 668, 669, 670, 671, 672, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 703, 707, 708, 709, 710, 712, 713, 714, 715, 716, 717, 718, 719, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 734, 735, 736, 737, 738, 739, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 758, 761, 762, 764, 766, 767, 769, 773, 774, 775, 776, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 869, 886, 888, 889, 891, 892, 893, 897, 898, 899, 900, 903, 904, 905, 906, 907, 909, 910, 911, 912, 915, 916, 917, 920, 921, 922, 926, 927, 930, 931, 932, 933, 934, 935, 936, 938, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 952, 953, 954, 955, 956, 957, 958, 960, 961, 962, 963, 964, 966, 967, 971, 973, 974, 980, 982, 991, 996, 997, 1001, 1003, 1004, 1005, 1006, 1016, 1023, 1024, 1027, 1028, 1036, 1037, 1041, 1042, 1044, 1045, 1046, 1047, 1048, 1049, 1051, 1061, 1062, 1063, 1064, 1069, 1075, 1076, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1094, 1096, 1098, 1099, 1104, 1106, 1121, 1124, 1125, 1126, 1127, 1128, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1157, 1158, 1159, 1160, 1164, 1165, 1166, 1172, 1173, 1174, 1176, 1177, 1178, 1179, 1180, 1185, 1192, 1195, 1199, 1204, 1205, 1206, 1207, 1209, 1211, 1213, 1214, 1215, 1216, 1217, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1236, 1237, 1238, 1239, 1246, 1258, 1262, 1265, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1307, 1310, 1314, 1315, 1316, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1340, 1341, 1342, 1343, 1344, 1345, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1364, 1367, 1368, 1371, 1375, 1378, 1379, 1380, 1381, 1382, 1384, 1385, 1388, 1389, 1390, 1393, 1394, 1395, 1404, 1413, 1414, 1415, 1416, 1417, 1419, 1424, 1427, 1432], "parameter": 154, "parameteris": 153, "parametr": 881, "paramount": [921, 991], "parent": [42, 77, 238, 357], "parenthes": 20, "parquet": [48, 52, 53, 54, 55, 163, 164, 165, 171, 200, 357, 881, 991], "parquetcompress": [48, 357], "parquetfieldoverwrit": [52, 991], "parquetmetadata": [48, 52, 357, 991], "pars": [39, 49, 150, 151, 152, 154, 156, 161, 162, 163, 166, 169, 170, 171, 215, 244, 295, 296, 300, 303, 320, 331, 332, 336, 357, 443, 452, 550, 656, 670, 671, 710, 730, 739, 756, 766, 774, 784, 786, 791, 794, 795, 796, 797, 805, 818, 832, 834, 837, 847, 849, 851, 853, 859, 869, 886, 910, 940, 941, 944, 948, 953, 960, 961, 967, 991, 1062, 1076, 1179, 1274, 1275, 1307, 1336, 1361, 1362, 1389, 1404, 1413], "parseerror": [756, 1362], "parser": [151, 156], "part": [55, 132, 156, 207, 212, 314, 319, 357, 656, 723, 743, 744, 869, 962, 991, 1001, 1329, 1349, 1350, 1427, 1428], "part_idx": 145, "parti": [614, 869], "partial": [135, 151, 166, 357, 991], "particip": [42, 357], "particular": [41, 151, 156, 157, 159, 215, 231, 320, 357, 442, 443, 773, 774, 869, 886, 953, 991, 1061, 1062, 1149, 1388, 1389, 1404], "partit": [48, 53, 54, 55, 154, 163, 167, 169, 171, 172, 258, 279, 357, 656, 869, 881], "partition_bi": [48, 152, 258, 357, 656, 869], "partition_chunk_size_byt": [48, 357], "partition_col": [48, 154, 357], "partition_df": 152, "partition_index": 199, "partition_num": 154, "partition_on": 154, "partition_rang": 154, "partitionbykei": [54, 55, 144, 145], "partitioned_object": [48, 357], "partitioningschem": [49, 50, 51, 52, 991], "partitionmax": 54, "partitionmaxs": [53, 55, 143], "partitionpart": [53, 54, 144, 145], "pass": [34, 35, 36, 38, 40, 41, 42, 48, 49, 50, 51, 52, 58, 64, 65, 70, 106, 131, 132, 134, 147, 148, 150, 153, 154, 156, 163, 166, 169, 171, 172, 175, 177, 180, 182, 184, 186, 215, 221, 225, 244, 245, 247, 260, 263, 264, 279, 280, 281, 286, 289, 295, 300, 303, 308, 316, 319, 320, 327, 331, 336, 357, 417, 443, 470, 480, 482, 493, 497, 503, 526, 547, 599, 614, 615, 630, 656, 660, 670, 671, 676, 701, 710, 739, 746, 747, 748, 755, 774, 783, 791, 793, 818, 829, 830, 851, 859, 865, 869, 886, 891, 892, 893, 899, 903, 910, 911, 913, 916, 921, 930, 932, 936, 938, 940, 944, 945, 946, 948, 953, 960, 966, 967, 974, 991, 996, 1036, 1062, 1094, 1104, 1106, 1125, 1131, 1157, 1173, 1199, 1231, 1246, 1274, 1275, 1307, 1345, 1352, 1353, 1354, 1361, 1375, 1385, 1389, 1404, 1417, 1432], "pass_nam": [615, 869], "pass_name_to_appli": [148, 869], "password": [151, 154, 157, 159], "past": [38, 357, 921, 991], "pat": [726, 1332], "patch": 76, "path": [3, 6, 37, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 143, 145, 148, 149, 151, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 224, 297, 357, 465, 629, 630, 633, 700, 869, 893, 898, 942, 945, 946, 991, 995, 1305, 1337, 1404, 1435], "pathlib": [37, 39, 44, 45, 48, 166, 357], "pattern": [102, 151, 152, 156, 157, 161, 163, 166, 169, 170, 171, 257, 357, 445, 449, 624, 714, 715, 716, 719, 722, 723, 724, 725, 726, 727, 737, 738, 739, 745, 884, 974, 997, 1064, 1069, 1302, 1304, 1320, 1321, 1322, 1325, 1328, 1329, 1330, 1331, 1332, 1333, 1343, 1344, 1345, 1351, 1404, 1427], "paya": 752, "pc": [934, 991], "pct": [182, 666, 869], "pct_chang": [869, 1404], "pct_valid": [666, 869], "pd": [133, 137, 772, 848, 869, 1385, 1386, 1404, 1414, 1432], "pd_df": 137, "pd_frame": 848, "pd_seri": 137, "pdsh": [141, 152], "pea": 728, "peak": [291, 357, 658, 659, 869, 1263, 1264, 1404], "peak_max": [869, 1404], "peak_min": [869, 1404], "pear": [728, 741, 752, 1334, 1347, 1358], "pearson": [221, 357, 563, 677, 707, 798, 869, 1195, 1280, 1314, 1404, 1421], "penalti": [751, 753, 754, 1357, 1359, 1360], "per": [16, 39, 42, 49, 148, 156, 180, 182, 215, 243, 266, 277, 278, 281, 296, 303, 320, 332, 346, 348, 349, 357, 407, 443, 577, 579, 581, 583, 615, 710, 774, 779, 791, 869, 886, 922, 941, 948, 953, 961, 977, 979, 980, 991, 1027, 1062, 1209, 1213, 1215, 1389, 1393, 1404], "per_partition_sort_bi": [53, 54, 55], "percent": [657, 869, 1262, 1404], "percentag": [179, 182, 186, 657, 869, 1262, 1404], "percentil": [223, 357, 666, 869, 897, 991, 1089, 1404], "perform": [40, 48, 50, 52, 58, 104, 109, 111, 116, 118, 125, 133, 151, 152, 153, 157, 161, 163, 166, 168, 169, 170, 171, 211, 236, 244, 245, 259, 260, 261, 265, 284, 285, 289, 291, 292, 315, 343, 357, 433, 438, 441, 447, 448, 533, 614, 615, 656, 676, 715, 725, 727, 732, 733, 739, 751, 753, 754, 829, 830, 869, 907, 911, 915, 916, 917, 935, 938, 948, 963, 964, 991, 1052, 1057, 1060, 1067, 1068, 1246, 1321, 1331, 1333, 1338, 1339, 1345, 1357, 1359, 1360, 1384, 1404], "perhap": [321, 357], "period": [151, 152, 166, 245, 289, 357, 498, 519, 521, 522, 657, 676, 807, 808, 810, 811, 856, 857, 869, 911, 938, 991, 1126, 1150, 1152, 1153, 1262, 1404], "persist": 1419, "phase": [40, 325, 357], "philadelphia": [737, 738], "phone": [759, 1365], "physic": [57, 70, 99, 151, 152, 260, 281, 357, 375, 772, 869, 887, 915, 916, 945, 991, 1386, 1404], "pi": [12, 464, 869, 1078, 1080, 1312, 1376, 1404, 1425, 1429], "pick": [183, 859], "pickl": [465, 869, 898, 991], "pip": [470, 482, 793, 1094, 1106], "pipe": [357, 869, 931, 991], "pipe_with_schema": [930, 991], "pipelin": [156, 319, 357], "pitfal": 116, "pivot": [325, 357, 997], "pivot_long": [324, 357, 956, 991], "pivot_wid": [281, 357], "pivotagg": [281, 357], "pixel": [42, 357], "pk": [516, 869, 1145, 1404], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 66, 67, 76, 85, 89, 97, 98, 99, 103, 106, 107, 108, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 147, 151, 152, 153, 154, 155, 156, 157, 160, 161, 162, 166, 167, 168, 171, 172, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 188, 190, 207, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 297, 299, 300, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 362, 364, 365, 367, 368, 369, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 869, 884, 885, 886, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 942, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 991, 996, 997, 1001, 1002, 1003, 1004, 1005, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1165, 1166, 1168, 1170, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1404, 1409, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1432, 1433, 1435], "pl_frame": 848, "place": [12, 13, 39, 49, 137, 172, 207, 213, 226, 233, 249, 250, 281, 287, 292, 303, 329, 357, 361, 396, 408, 418, 585, 601, 709, 710, 791, 869, 948, 991, 1006, 1016, 1028, 1037, 1156, 1217, 1233, 1270, 1316, 1404], "placehold": 817, "plai": [14, 797], "plain": [903, 934, 991], "plan": [64, 131, 146, 260, 262, 357, 465, 869, 887, 891, 898, 903, 915, 916, 931, 934, 942, 945, 991, 1434], "plan_stag": [945, 991], "plan_typ": [934, 991], "plane": [789, 790], "planner": 730, "planstag": [945, 991], "plantypeprefer": [934, 991], "platform": 174, "ple": 1427, "pleas": [137, 153, 154, 236, 245, 285, 357, 361, 520, 799, 812, 869, 907, 911, 935, 991, 1151, 1404], "plenti": 997, "plot": [357, 932, 945, 991, 1404], "plu": [463, 611, 869, 1088, 1243, 1267, 1404, 1426], "plugin": [0, 869, 881], "plugin_path": 148, "point": [10, 12, 13, 33, 34, 35, 36, 39, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 78, 79, 80, 131, 142, 143, 144, 145, 146, 147, 154, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 203, 227, 234, 245, 261, 262, 266, 304, 314, 319, 326, 357, 360, 361, 369, 370, 375, 451, 462, 463, 468, 470, 482, 498, 499, 527, 532, 533, 544, 558, 559, 594, 615, 663, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 695, 696, 698, 755, 793, 795, 826, 827, 846, 869, 891, 892, 893, 900, 903, 905, 911, 917, 921, 922, 931, 932, 936, 946, 949, 957, 965, 991, 997, 1071, 1073, 1087, 1088, 1092, 1094, 1106, 1126, 1127, 1158, 1163, 1174, 1226, 1267, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1296, 1298, 1299, 1301, 1382, 1387, 1404, 1409, 1432], "pointer": [231, 357, 1149, 1404], "poison": [648, 649, 869, 1255, 1256, 1404], "pola": 357, "polar": [1, 205, 357, 360, 361, 375, 868, 869, 875, 881, 991, 995, 996, 997, 1404, 1408, 1409, 1431, 1432, 1434], "polars_df": 1432, "polars_engine_affin": [49, 50, 51, 52, 64, 65, 891, 892, 893, 903, 932, 945, 946, 991], "polars_file_cache_ttl": [161, 166, 169, 170], "polars_hypothesis_profil": [185, 187], "polars_max_thread": 188, "polars_seri": 1432, "polars_verbos": [891, 903, 932, 945, 991], "polarsdatafram": 211, "polarsdataset": [319, 357], "polarsdatatyp": [67, 77, 85, 151, 152, 166, 179, 180, 181, 182, 183, 186, 216, 265, 314, 319, 357, 430, 444, 523, 614, 615, 670, 671, 730, 802, 803, 814, 816, 828, 829, 830, 840, 842, 843, 860, 865, 869, 888, 991, 997, 1049, 1063, 1246, 1274, 1275, 1336, 1404], "polarsintegertyp": [140, 756, 788, 822, 823, 1362], "polarstemporaltyp": [751, 1357], "polarstyp": [66, 190], "pool": [16, 65, 188, 189, 892, 991], "poor": 153, "pop2": [260, 357, 916, 991], "popul": [260, 357, 916, 991], "port": [40, 151, 153, 154, 157, 159, 357], "pos_a": 1427, "posit": [42, 149, 151, 152, 154, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 199, 212, 225, 232, 244, 279, 295, 296, 300, 303, 323, 331, 332, 336, 357, 417, 519, 521, 522, 523, 599, 656, 661, 663, 701, 710, 724, 737, 738, 756, 766, 789, 790, 791, 794, 795, 796, 797, 814, 847, 851, 865, 869, 899, 904, 910, 940, 941, 944, 948, 955, 960, 961, 967, 991, 997, 1036, 1150, 1152, 1153, 1231, 1265, 1267, 1307, 1330, 1362, 1404, 1433], "position": 1404, "possibl": [42, 48, 52, 106, 108, 134, 135, 138, 151, 156, 172, 179, 182, 186, 244, 257, 264, 265, 291, 322, 343, 357, 612, 614, 615, 626, 672, 678, 744, 778, 829, 830, 869, 891, 903, 910, 932, 945, 948, 954, 991, 1246, 1281, 1350, 1404], "post": [58, 76, 934, 991], "postgr": 154, "postgresql": [40, 153, 154, 357, 656, 869, 1430], "potenti": [116, 118, 148, 166, 168, 169, 170, 257, 290, 292, 357, 639, 737, 738, 895, 897, 902, 939, 959, 991, 1343, 1344], "pow": [869, 1404, 1425], "pow_n": 60, "power": [849, 1265, 1404, 1426], "powersofn": 60, "pre": [55, 663, 840, 843, 860, 869, 1267, 1404], "pre_execution_queri": 154, "preced": [182, 997], "precis": [12, 13, 39, 42, 49, 56, 74, 153, 257, 291, 292, 311, 314, 319, 357, 472, 826, 991, 997, 1096, 1361], "pred1": 859, "pred2": 859, "predefin": [281, 357], "predic": [41, 64, 146, 166, 169, 170, 171, 172, 216, 236, 255, 260, 261, 285, 290, 357, 444, 529, 579, 781, 816, 859, 869, 891, 903, 907, 916, 917, 921, 932, 935, 936, 945, 963, 964, 991, 1160, 1211, 1302, 1304, 1404], "predicate_pushdown": [64, 891, 903, 921, 932, 945, 965, 991], "predict": [190, 284, 327, 357], "prefer": [151, 152, 156, 157, 161, 163, 166, 187, 215, 233, 257, 264, 265, 290, 291, 320, 343, 357, 442, 443, 523, 615, 662, 768, 773, 774, 852, 859, 869, 886, 953, 991, 995, 997, 1061, 1062, 1156, 1246, 1266, 1374, 1388, 1389, 1404, 1414, 1435], "prefilt": 171, "prefix": [41, 151, 152, 166, 171, 207, 357, 382, 432, 449, 503, 624, 640, 643, 644, 646, 647, 745, 748, 749, 761, 869, 997, 1051, 1069, 1351, 1355, 1367], "prefix_": 643, "prefix_a": 643, "prefix_b": 643, "prefix_field": [641, 645], "presenc": [815, 824, 997], "present": [135, 168, 182, 240, 357, 555, 630, 747, 748, 859, 869, 945, 991], "preserv": [42, 227, 228, 236, 244, 259, 261, 265, 285, 315, 316, 326, 357, 468, 469, 470, 490, 491, 529, 576, 656, 670, 704, 721, 869, 900, 901, 907, 915, 917, 935, 957, 991, 1092, 1093, 1094, 1160, 1208, 1274, 1311, 1327, 1385, 1404], "pressur": [52, 151, 152, 161, 163, 166, 170, 171, 702, 869, 991, 1308, 1404], "presum": [614, 869], "prev_pow2": 60, "prevent": [315, 357, 382, 460, 461, 639, 768, 869, 991, 1085, 1086, 1374, 1404], "preview": [243, 357], "previou": [55, 60, 207, 357, 360, 470, 657, 764, 869, 1094, 1262, 1404, 1409], "previous": [2, 3], "price": [357, 360, 1435], "primari": [156, 995, 1432, 1435], "primarili": [1, 884], "primit": [41, 357, 555, 869], "print": [9, 12, 13, 14, 15, 17, 18, 19, 21, 22, 27, 29, 30, 152, 174, 175, 177, 229, 243, 244, 258, 262, 313, 335, 357, 369, 547, 631, 807, 810, 869, 891, 893, 913, 946, 991, 997, 1185, 1381, 1404, 1435], "print_and_return": 369, "prior": [137, 357, 360, 1404, 1409], "prioriti": 183, "probabl": [516, 663, 869, 1145, 1267, 1404], "process": [16, 39, 49, 50, 51, 52, 64, 65, 151, 152, 153, 166, 188, 291, 357, 891, 892, 893, 903, 932, 945, 946, 991], "process_index": [314, 357], "produc": [2, 3, 97, 146, 182, 186, 216, 259, 357, 404, 444, 574, 626, 826, 829, 869, 915, 921, 991, 1024, 1206], "product": [58, 221, 259, 357, 460, 467, 869, 915, 991, 1085, 1091, 1404], "profil": [34, 185, 187, 891, 991], "profile_nam": 34, "programmat": [223, 357, 897, 991], "progress": [74, 80], "project": [64, 146, 166, 168, 169, 170, 171, 709, 710, 869, 891, 903, 921, 932, 936, 945, 991], "projection_pushdown": [64, 891, 903, 921, 932, 945, 965, 991], "prompt": 139, "propag": [403, 408, 518, 555, 573, 585, 648, 649, 651, 713, 729, 796, 797, 869, 1023, 1028, 1147, 1185, 1205, 1217, 1255, 1256, 1258, 1319, 1335, 1404], "propagate_nan": 798, "proper": [261, 357, 917, 991], "properti": [41, 42, 52, 198, 201, 202, 211, 219, 220, 229, 237, 248, 294, 299, 330, 334, 357, 360, 361, 894, 895, 902, 939, 959, 964, 991, 996, 997, 1144, 1162, 1254, 1306, 1404, 1409, 1435], "proport": [779, 869, 1393, 1404], "protocol": [41, 133, 153, 154, 211, 357], "prototyp": 865, "provid": [10, 33, 34, 35, 36, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 53, 54, 55, 151, 152, 154, 155, 156, 161, 163, 164, 166, 167, 168, 169, 170, 171, 182, 186, 197, 213, 236, 240, 255, 260, 285, 304, 314, 357, 360, 427, 428, 503, 523, 544, 606, 717, 718, 722, 730, 731, 747, 748, 749, 750, 818, 851, 869, 881, 891, 903, 907, 916, 932, 935, 945, 949, 966, 988, 991, 997, 1046, 1047, 1131, 1174, 1194, 1246, 1323, 1324, 1328, 1336, 1337, 1382, 1404, 1417, 1424, 1427, 1432, 1435], "provis": 882, "proxi": 997, "prune": [163, 169, 171, 921, 991], "psycopg2": 153, "pt0": 503, "public": [154, 357, 375, 869, 881, 991, 1404, 1431], "pulp": 1413, "pure": [42, 146, 357, 614, 615, 829, 830, 869, 921, 991, 1246, 1404], "purpos": [638, 869, 991], "push": [151, 157, 161, 163, 166, 169, 170, 171, 172, 216, 357, 444, 869], "pushdown": [64, 146, 891, 903, 921, 932, 936, 945, 963, 964, 991, 1302, 1304, 1404], "put": [39, 49, 76, 357, 361, 991], "pwd": 153, "py": 168, "pyarrow": [41, 48, 56, 132, 137, 151, 154, 155, 157, 159, 163, 167, 172, 174, 309, 315, 316, 357, 848, 881, 996, 1378, 1384, 1385, 1404, 1414, 1416, 1432], "pyarrow_opt": [48, 155, 163, 167, 357], "pyarrow_t": 1432, "pycapsul": [132, 133, 210, 996, 1000], "pycapsuleinterfac": [133, 210, 1000], "pydant": 174, "pyiceberg": [43, 168, 174, 357], "pyodbc": [40, 357], "pyodbc_uri": [40, 357], "pyspark": 188, "pytest": [175, 177], "python": [0, 34, 35, 36, 44, 45, 76, 87, 102, 133, 151, 152, 157, 159, 172, 174, 175, 177, 211, 257, 265, 291, 292, 311, 343, 357, 465, 470, 474, 482, 533, 614, 615, 724, 793, 807, 808, 810, 811, 856, 857, 869, 875, 898, 974, 991, 995, 996, 1094, 1098, 1106, 1109, 1110, 1111, 1115, 1246, 1330, 1383, 1404, 1408, 1431], "pythondatatyp": [67, 85, 216, 357, 865, 888, 991, 997], "pythonliter": [1007, 1052, 1057, 1060, 1161, 1196, 1247, 1248, 1249, 1250, 1302, 1404], "pytimezon": 997, "pytorch": [319, 357, 1387, 1404], "q": [292, 357, 851, 1404, 1409, 1417], "q1": [42, 357], "q2": [42, 357], "q3": [42, 357], "q4": [42, 357], "qcut": [463, 869, 1088, 1404], "qhoo": 1435, "qmark": [153, 154], "qqr": 997, "quad": [520, 869, 1151, 1404], "qualifi": [40, 357], "quantifi": [723, 1329], "quantil": [357, 663, 687, 688, 869, 991, 1267, 1290, 1291, 1404, 1421], "quantile_cont": 1425, "quantile_disc": 1425, "quantilemethod": [223, 283, 349, 357, 664, 687, 688, 841, 869, 897, 933, 980, 991, 1089, 1268, 1290, 1291, 1404], "quarter": [245, 260, 289, 327, 357, 493, 498, 511, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1121, 1126, 1139, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1428], "queri": [11, 49, 50, 51, 52, 53, 54, 55, 64, 65, 97, 131, 153, 154, 157, 166, 169, 170, 171, 233, 262, 280, 304, 357, 731, 848, 881, 891, 892, 893, 903, 932, 934, 945, 946, 949, 963, 964, 965, 966, 974, 983, 991, 1156, 1246, 1337, 1404, 1413, 1414, 1416, 1420, 1431, 1433, 1434], "queryoptflag": [49, 50, 51, 52, 64, 65, 131, 891, 892, 893, 903, 932, 945, 946, 991], "quick": [865, 1089, 1404, 1435], "quit": [260, 357, 916, 991], "quot": [39, 40, 49, 151, 152, 154, 166, 357, 759, 991, 1365], "quota_project_id": 36, "quote_char": [39, 49, 151, 152, 166, 357, 991], "quote_plu": 154, "quote_styl": [39, 49, 357, 991], "quotes_titl": 759, "quotient": 1426, "r": [151, 152, 166, 357, 621, 660, 716, 721, 722, 723, 724, 737, 738, 869, 997, 1322, 1327, 1328, 1329, 1330, 1343, 1344, 1358, 1417, 1427], "r1": [66, 190], "r2": [66, 190], "r3": [66, 190], "rab": [714, 740, 1320, 1346, 1422], "rad": 1429, "radian": [464, 789, 869, 1425], "radix": [756, 1362], "rai": [789, 790], "raini": [737, 738, 1343, 1344], "rais": [1, 11, 17, 18, 22, 41, 56, 66, 103, 104, 107, 108, 110, 111, 112, 113, 114, 115, 120, 121, 122, 123, 124, 125, 126, 127, 128, 130, 151, 152, 156, 162, 163, 166, 171, 175, 177, 190, 211, 213, 216, 240, 266, 281, 290, 315, 357, 407, 427, 444, 470, 496, 497, 581, 583, 626, 661, 663, 671, 714, 717, 726, 751, 753, 754, 756, 758, 809, 828, 869, 922, 931, 966, 991, 1027, 1046, 1094, 1124, 1125, 1213, 1215, 1265, 1267, 1275, 1320, 1323, 1332, 1357, 1359, 1360, 1362, 1364, 1384, 1404], "raise_if_empti": [151, 152, 156, 162, 166], "raise_if_undetermin": 626, "raise_on_fail": 966, "raker": 147, "ram": [49, 50, 51, 52, 893, 946, 991], "ran": [148, 614, 829, 830, 869], "randn": 97, "random": [42, 44, 97, 157, 173, 180, 246, 293, 357, 542, 594, 666, 698, 703, 869, 881, 1172, 1226, 1269, 1301, 1310, 1404], "randomli": 181, "rang": [19, 42, 153, 154, 223, 231, 245, 258, 357, 387, 464, 470, 478, 482, 489, 494, 495, 496, 498, 511, 512, 548, 788, 793, 796, 806, 807, 808, 809, 810, 811, 822, 823, 826, 827, 846, 855, 856, 857, 869, 897, 911, 991, 997, 1089, 1094, 1102, 1106, 1117, 1122, 1123, 1124, 1126, 1139, 1140, 1149, 1262, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1427], "rank": [396, 577, 791, 798, 813, 869, 1016, 1209, 1404], "rankmethod": [666, 869, 1269, 1404], "rare": [471, 1095], "rather": [260, 357, 535, 631, 663, 675, 761, 869, 916, 991, 1267, 1279, 1367, 1404], "raw": 154, "raw_output": [630, 945, 991], "raw_valu": 144, "re": [240, 245, 256, 322, 324, 357, 490, 491, 500, 503, 911, 954, 956, 991, 1118, 1119, 1128, 1131, 1432], "reach": [54, 735, 736, 761, 1341, 1342, 1367], "read": [10, 38, 56, 141, 146, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 197, 224, 233, 357, 360, 465, 535, 869, 898, 934, 991, 1156, 1404, 1409], "read_arrow_batches_from_odbc": 153, "read_clipboard": [38, 357], "read_csv": [150, 156, 166], "read_csv_batch": 141, "read_csv_opt": 156, "read_databas": [97, 154], "read_database_uri": 153, "read_excel": 162, "read_ndjson": 160, "read_od": 156, "read_opt": 156, "read_parquet": 171, "read_tabl": 163, "readabl": 865, "reader": [48, 52, 141, 146, 151, 152, 157, 159, 161, 163, 168, 357, 991], "reader_overrid": 168, "readi": [946, 984, 991], "readthedoc": [42, 357], "real": [723, 1329], "realli": [462, 715, 739, 869, 1087, 1321, 1345, 1404], "realloc": [161, 166, 169, 170, 233, 357, 1156, 1404], "rearrang": [265, 357], "reason": [188, 223, 357, 614, 869, 897, 991], "receiv": [58, 153, 166, 264, 265, 280, 343, 357, 615, 660, 869, 930, 931, 991, 1435], "recent": [175, 176, 177, 178, 315, 357, 657, 671, 869, 1262, 1275, 1384, 1404, 1416, 1432], "rechunk": [66, 132, 133, 137, 151, 152, 155, 157, 159, 161, 163, 166, 167, 169, 170, 171, 233, 357, 869, 1074, 1156, 1168, 1252, 1404], "recognis": [11, 17, 18, 22, 997], "recommend": [42, 165, 188, 223, 257, 262, 280, 357, 614, 615, 829, 830, 846, 869, 887, 897, 991, 997], "record": [39, 45, 49, 147, 159, 172, 357, 991], "record_batch": [258, 357], "recordbatch": [132, 258, 357, 848, 1414, 1416, 1432], "recurs": [48, 49, 50, 51, 52, 357, 519, 521, 522, 869, 991, 1150, 1152, 1153, 1404], "red": [57, 98, 99, 343, 779, 869, 974, 1393, 1404], "redempt": 1413, "redshift": 154, "redshift_format": 200, "reduc": [52, 151, 152, 161, 163, 166, 169, 170, 171, 291, 344, 345, 347, 350, 357, 702, 803, 816, 869, 975, 976, 978, 981, 991, 1248, 1266, 1308, 1374, 1404], "reduct": [238, 357], "ref": [722, 724, 1328, 1330], "refer": [0, 34, 42, 102, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 221, 224, 357, 361, 375, 465, 500, 503, 579, 666, 722, 737, 738, 751, 753, 754, 758, 869, 898, 991, 1128, 1131, 1211, 1269, 1343, 1344, 1357, 1359, 1360, 1364, 1404], "referenc": [42, 357, 614, 737, 738, 764, 869, 1343, 1344, 1414, 1432], "refin": 153, "reg": 147, "regard": [151, 606, 798], "regardless": [137, 215, 244, 260, 320, 357, 443, 475, 731, 774, 859, 869, 886, 916, 953, 991, 1062, 1099, 1337, 1389, 1404], "regex": [100, 523, 621, 622, 624, 714, 716, 722, 723, 724, 726, 737, 738, 762, 814, 869, 997, 1320, 1322, 1328, 1329, 1330, 1332, 1343, 1344], "regexp_lik": 1425, "region": [42, 168, 357], "region_nam": 34, "regist": [1, 53, 54, 55, 59, 60, 61, 62, 146, 148, 185, 187, 304, 357, 869, 949, 991, 995, 1413, 1414, 1416, 1417, 1418, 1419, 1432, 1434], "register_dataframe_namespac": [1, 60, 61, 62], "register_expr_namespac": [1, 59, 61, 62], "register_glob": [1415, 1417, 1419, 1432], "register_io_sourc": 995, "register_lazyframe_namespac": [1, 59, 60, 62], "register_mani": [1415, 1416, 1419], "register_plugin": 869, "register_plugin_funct": 869, "register_series_namespac": [1, 59, 60, 61], "registr": [304, 357, 848, 881, 949, 991, 1419, 1432], "regrid": [548, 869], "regular": [140, 257, 290, 291, 327, 334, 357, 523, 714, 715, 716, 720, 722, 723, 724, 725, 726, 727, 737, 738, 739, 793, 814, 859, 865, 869, 964, 991, 997, 1320, 1321, 1322, 1326, 1328, 1329, 1330, 1331, 1332, 1333, 1343, 1344, 1345, 1430], "reinterpret": [869, 1404], "rel": [42, 53, 54, 55, 148, 154, 155, 167, 168, 175, 176, 177, 178, 357, 493, 519, 521, 522, 551, 779, 869, 1121, 1150, 1152, 1153, 1180, 1393, 1404], "rel_tol": [175, 176, 177, 178, 551, 869, 1180, 1404], "relat": [139, 153, 207, 372, 737, 738, 997, 1343, 1344, 1420], "releas": [65, 259, 357, 615, 869, 892, 915, 991, 1435], "release_year": 1413, "relev": 66, "reli": [259, 357, 915, 991], "reliabl": [98, 99], "remain": [53, 151, 152, 166, 227, 228, 231, 236, 251, 281, 285, 357, 468, 469, 529, 548, 549, 576, 670, 743, 744, 869, 900, 901, 907, 914, 921, 935, 991, 1092, 1093, 1149, 1160, 1177, 1178, 1208, 1274, 1349, 1350, 1404, 1419], "remaind": [744, 1350, 1426], "remap": 101, "remot": [97, 151, 152, 157, 159, 991], "remov": [4, 48, 52, 151, 152, 164, 166, 211, 225, 236, 266, 312, 357, 523, 615, 640, 746, 747, 748, 749, 750, 755, 814, 869, 899, 907, 922, 991, 1352, 1353, 1354, 1355, 1356, 1379, 1404, 1434], "removes_pronoun": 739, "removesuffix": 640, "renam": [1, 44, 45, 135, 139, 151, 152, 156, 157, 159, 163, 166, 169, 170, 171, 175, 176, 177, 178, 189, 215, 244, 245, 259, 281, 289, 295, 296, 309, 320, 323, 327, 331, 332, 336, 338, 357, 382, 443, 462, 519, 521, 522, 535, 632, 633, 640, 641, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 764, 766, 774, 844, 845, 847, 851, 869, 886, 910, 911, 915, 938, 940, 941, 953, 955, 960, 961, 967, 969, 991, 1003, 1087, 1148, 1150, 1152, 1153, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1332, 1371, 1378, 1380, 1404, 1432], "rename_field": [743, 744, 1349, 1350], "render": [630, 945, 991], "render_as_str": 153, "reoconstruct": [292, 357], "reorder": [266, 357, 922, 991], "repeat": [55, 146, 157, 169, 375, 667, 669, 840, 860, 869, 1273, 1404], "repeat_bi": [869, 1404], "replac": [40, 41, 43, 151, 152, 166, 234, 235, 287, 321, 324, 331, 332, 357, 360, 474, 497, 614, 615, 671, 738, 739, 754, 869, 956, 960, 961, 991, 1098, 1125, 1275, 1302, 1304, 1344, 1345, 1360, 1404, 1409, 1425], "replace_al": [737, 1274, 1343, 1404], "replace_column": 357, "replace_strict": [670, 869, 1274, 1404], "replace_time_zon": [471, 477, 479, 1100, 1101, 1129], "replace_with": [739, 1345], "replic": [772, 869, 1386, 1404], "report": [153, 231, 357, 734, 1149, 1340, 1404], "repr": [139, 445, 449, 503, 1064, 1069, 1131], "repres": [39, 42, 43, 49, 72, 73, 75, 86, 90, 95, 132, 134, 136, 137, 138, 153, 281, 304, 305, 314, 315, 328, 335, 357, 375, 448, 533, 558, 559, 602, 608, 614, 712, 728, 733, 737, 738, 741, 752, 780, 783, 800, 812, 814, 828, 829, 830, 839, 844, 845, 850, 858, 865, 869, 949, 950, 958, 991, 997, 1068, 1302, 1318, 1334, 1339, 1343, 1344, 1347, 1358, 1384, 1394, 1404, 1432], "represent": [12, 46, 47, 72, 73, 75, 90, 139, 297, 313, 357, 445, 447, 448, 449, 473, 478, 481, 484, 485, 486, 487, 488, 489, 492, 494, 495, 499, 512, 513, 515, 629, 772, 869, 903, 919, 942, 991, 1064, 1067, 1068, 1069, 1070, 1097, 1102, 1105, 1107, 1108, 1112, 1113, 1114, 1116, 1117, 1120, 1122, 1123, 1127, 1140, 1141, 1143, 1381, 1386, 1404, 1423], "request": [36, 893, 991], "requested_schema": [210, 1000], "requir": [1, 34, 35, 36, 41, 42, 58, 66, 137, 142, 153, 154, 175, 176, 177, 178, 190, 192, 221, 227, 290, 314, 315, 316, 319, 357, 423, 445, 449, 519, 521, 522, 607, 656, 680, 682, 684, 686, 688, 691, 693, 695, 699, 702, 751, 753, 754, 776, 792, 794, 798, 800, 843, 869, 884, 895, 900, 901, 902, 948, 959, 991, 1042, 1148, 1150, 1152, 1153, 1239, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1303, 1308, 1343, 1357, 1359, 1360, 1384, 1385, 1390, 1404], "require_al": 997, "require_http": 192, "required_cast": [931, 991], "rerais": [65, 892, 991], "rerun": [233, 357, 1156, 1404], "resampl": [245, 357, 911, 991], "reset": [4, 207], "reset_index": [137, 245, 357, 911, 991], "reshap": [281, 315, 357, 578, 795, 869, 1210, 1404], "resolv": [148, 236, 357, 474, 894, 895, 902, 931, 939, 959, 991], "resourc": [966, 995], "respect": [42, 151, 152, 166, 175, 176, 177, 178, 266, 281, 357, 715, 725, 727, 739, 922, 991, 997, 1321, 1331, 1333, 1345, 1387, 1404], "respons": [154, 273, 357, 927, 991], "rest": [759, 1365, 1427], "restor": [207, 357, 360, 1404, 1409], "restore_default": 207, "restrict": [32, 744, 1350], "result": [15, 39, 46, 47, 48, 49, 50, 51, 52, 58, 66, 136, 137, 138, 153, 154, 156, 166, 169, 171, 172, 186, 190, 233, 236, 245, 246, 259, 260, 261, 277, 281, 285, 289, 292, 297, 298, 300, 314, 315, 316, 327, 334, 336, 342, 357, 470, 498, 500, 503, 509, 511, 519, 520, 521, 522, 526, 533, 542, 550, 563, 605, 614, 629, 656, 661, 663, 670, 671, 672, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 700, 701, 721, 738, 742, 743, 754, 775, 779, 802, 803, 807, 809, 810, 811, 812, 827, 828, 829, 830, 840, 843, 844, 845, 848, 859, 860, 869, 887, 891, 893, 897, 907, 911, 915, 916, 917, 921, 932, 935, 938, 942, 943, 944, 946, 964, 967, 973, 984, 985, 991, 997, 1006, 1126, 1128, 1131, 1137, 1139, 1150, 1152, 1153, 1156, 1157, 1172, 1179, 1195, 1237, 1246, 1265, 1267, 1274, 1275, 1276, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1305, 1307, 1327, 1348, 1349, 1360, 1384, 1385, 1393, 1404, 1414, 1420, 1427, 1432, 1433, 1435], "resultset": 153, "retain": [236, 285, 357, 907, 935, 991], "retri": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 169, 170, 171, 197, 357, 991], "retriev": [192, 193, 197, 240, 314, 357, 401, 402, 570, 571, 762, 839, 1021, 1022, 1202, 1203, 1368, 1382, 1404, 1420], "return": [1, 5, 6, 10, 32, 39, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 63, 64, 65, 97, 109, 112, 120, 128, 131, 132, 134, 135, 136, 137, 138, 140, 141, 146, 148, 149, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 188, 189, 197, 209, 212, 215, 217, 220, 221, 222, 226, 229, 231, 232, 233, 234, 235, 237, 238, 239, 240, 243, 244, 245, 247, 248, 249, 253, 255, 256, 257, 258, 259, 262, 263, 265, 266, 268, 270, 275, 276, 277, 279, 280, 281, 286, 289, 290, 291, 292, 293, 297, 304, 307, 308, 314, 315, 316, 319, 320, 321, 322, 327, 330, 331, 332, 338, 340, 342, 343, 346, 351, 357, 362, 369, 383, 385, 388, 389, 390, 391, 392, 393, 396, 397, 401, 402, 403, 405, 407, 408, 410, 421, 426, 427, 428, 429, 430, 431, 432, 442, 443, 447, 448, 453, 454, 455, 456, 457, 463, 464, 470, 471, 473, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 498, 499, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 515, 520, 525, 533, 536, 537, 539, 543, 544, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 566, 567, 570, 571, 573, 578, 581, 583, 584, 585, 587, 594, 604, 605, 612, 614, 627, 629, 630, 631, 636, 660, 662, 663, 665, 669, 670, 671, 672, 674, 675, 698, 699, 704, 705, 706, 713, 714, 716, 717, 718, 720, 721, 722, 723, 724, 726, 727, 728, 729, 731, 732, 733, 734, 735, 736, 740, 741, 742, 743, 744, 752, 756, 761, 768, 769, 770, 771, 773, 774, 775, 777, 778, 779, 782, 783, 788, 789, 790, 791, 792, 793, 794, 798, 799, 800, 801, 802, 806, 807, 808, 809, 810, 811, 812, 815, 816, 818, 820, 822, 823, 824, 825, 826, 827, 828, 829, 830, 840, 842, 843, 846, 847, 848, 851, 852, 854, 855, 856, 857, 859, 860, 869, 884, 886, 889, 891, 892, 893, 895, 896, 897, 902, 903, 909, 911, 912, 915, 919, 920, 921, 922, 930, 931, 932, 936, 938, 942, 945, 946, 952, 953, 954, 959, 960, 961, 969, 971, 973, 977, 982, 984, 991, 996, 997, 999, 1001, 1004, 1005, 1006, 1014, 1015, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1025, 1027, 1028, 1030, 1040, 1042, 1045, 1046, 1047, 1049, 1050, 1061, 1062, 1066, 1067, 1068, 1070, 1075, 1081, 1082, 1088, 1089, 1094, 1095, 1097, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1126, 1127, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1143, 1149, 1151, 1155, 1156, 1161, 1166, 1173, 1174, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1196, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1210, 1211, 1213, 1215, 1216, 1217, 1219, 1226, 1236, 1237, 1244, 1246, 1251, 1260, 1266, 1267, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1301, 1303, 1311, 1319, 1320, 1322, 1323, 1324, 1326, 1327, 1328, 1329, 1330, 1332, 1333, 1334, 1335, 1337, 1338, 1339, 1340, 1341, 1342, 1346, 1347, 1348, 1349, 1350, 1358, 1362, 1367, 1374, 1375, 1378, 1385, 1388, 1389, 1391, 1392, 1393, 1395, 1404, 1413, 1414, 1418, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1430, 1432, 1433, 1434, 1435], "return_as_str": [243, 357, 631], "return_dtyp": [42, 265, 357, 369, 375, 614, 615, 670, 671, 782, 802, 803, 816, 829, 830, 842, 869, 1246, 1274, 1275, 1404], "return_typ": [314, 319, 357], "returns_scalar": [148, 614, 615, 802, 803, 816, 829, 830, 842, 869], "reus": [64, 207, 891, 903, 932, 945, 991], "reusabl": 207, "rev": [261, 357, 917, 991], "revers": [215, 231, 320, 357, 443, 457, 458, 459, 460, 461, 640, 642, 644, 774, 795, 801, 869, 886, 953, 991, 1062, 1082, 1083, 1084, 1085, 1086, 1389, 1404, 1422, 1425], "reverse_": 642, "reverse_a": 642, "reverse_b": 642, "revert": [7, 9, 12], "rfc": 151, "rhap": [725, 727, 1333], "rhapsodi": [725, 727, 1333], "right": [9, 12, 17, 18, 20, 29, 42, 74, 151, 152, 175, 176, 177, 178, 245, 259, 260, 289, 326, 357, 463, 519, 520, 521, 522, 550, 595, 596, 597, 598, 663, 676, 680, 682, 684, 686, 688, 691, 693, 695, 699, 707, 794, 807, 808, 810, 811, 826, 827, 856, 857, 859, 869, 911, 915, 916, 938, 957, 991, 1088, 1150, 1151, 1152, 1153, 1179, 1227, 1228, 1229, 1230, 1267, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1303, 1314, 1404, 1420, 1425], "right_left": [259, 326, 357, 915, 957, 991], "right_on": [259, 260, 326, 357, 915, 916, 957, 991], "rightmost": [699, 869, 1303, 1404, 1427], "rld": [746, 748, 1354], "rle": [675, 869, 1279, 1404], "rle_id": [674, 869, 1404], "rle_id_a": [675, 869], "rle_id_ab": [675, 869], "rmm": 966, "rn": [151, 152, 166], "role": [34, 154], "rolearn": 10, "rolesessionnam": 10, "roll": [245, 357, 470, 490, 491, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 796, 844, 845, 869, 911, 991, 1094, 1118, 1119, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1404], "rollback": [491, 1119], "rolled_forward": 470, "rollforward": [490, 1118], "rolling_kurtosi": [869, 1404], "rolling_map": [869, 1404], "rolling_max": [869, 1404], "rolling_max_bi": [869, 1404], "rolling_mean": [869, 1404], "rolling_mean_bi": [869, 1404], "rolling_median": [869, 1404], "rolling_median_bi": [869, 1404], "rolling_min": [869, 1404], "rolling_min_bi": [869, 1404], "rolling_quantil": [869, 1404], "rolling_quantile_bi": [869, 1404], "rolling_row_max": [680, 869], "rolling_row_mean": [682, 869], "rolling_row_median": [684, 869], "rolling_row_min": [686, 869], "rolling_row_quantil": [688, 869], "rolling_row_std": [691, 869], "rolling_row_sum": [693, 869], "rolling_row_var": [695, 869], "rolling_skew": [869, 1404], "rolling_std": [869, 1404], "rolling_std_bi": [869, 1298, 1404], "rolling_sum": [678, 869, 1281, 1404], "rolling_sum_bi": [869, 1404], "rolling_var": [869, 1404], "rolling_var_bi": [869, 1404], "rollinggroupbi": [289, 357], "ronaldo": [722, 1328], "root": [155, 167, 450, 628, 639, 640, 642, 644, 646, 647, 711, 868, 869, 1072, 1317, 1404, 1426], "rotat": [357, 360, 1404, 1409], "round": [22, 42, 60, 139, 153, 357, 451, 455, 532, 697, 770, 869, 1073, 1163, 1300, 1404, 1425], "round_sig_fig": [869, 1404], "round_str": 1126, "round_td": 1126, "rounded_corn": 22, "roundmod": [696, 869, 1299, 1404], "row": [16, 22, 27, 39, 40, 42, 48, 49, 52, 54, 58, 59, 61, 66, 106, 112, 120, 128, 135, 136, 137, 138, 139, 146, 147, 151, 152, 153, 156, 157, 159, 160, 161, 162, 163, 166, 169, 170, 171, 172, 175, 176, 182, 190, 212, 213, 215, 216, 217, 227, 228, 233, 236, 238, 239, 243, 244, 245, 246, 247, 248, 252, 253, 254, 255, 257, 258, 259, 260, 261, 263, 265, 272, 273, 277, 281, 285, 289, 292, 293, 302, 308, 311, 313, 314, 319, 320, 322, 324, 325, 326, 333, 334, 338, 340, 342, 343, 351, 357, 361, 396, 397, 405, 422, 430, 443, 444, 525, 533, 537, 543, 567, 568, 569, 578, 603, 606, 656, 657, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 703, 708, 710, 721, 769, 774, 788, 791, 797, 799, 816, 820, 822, 823, 825, 827, 842, 844, 845, 854, 869, 886, 889, 893, 900, 901, 907, 908, 909, 911, 912, 915, 916, 917, 918, 920, 921, 926, 927, 935, 946, 947, 952, 953, 954, 956, 957, 963, 964, 969, 971, 973, 974, 982, 991, 1001, 1016, 1019, 1020, 1025, 1039, 1049, 1155, 1156, 1166, 1173, 1199, 1200, 1201, 1210, 1235, 1262, 1280, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1315, 1327, 1336, 1375, 1404, 1413, 1420, 1422, 1433, 1434, 1435], "row_count_nam": [151, 152, 157, 159, 163, 166, 169, 170, 171], "row_count_offset": [151, 152, 157, 159, 163, 166, 169, 170, 171], "row_group": [163, 171], "row_group_s": [48, 52, 357, 991], "row_height": [42, 357], "row_idx": 213, "row_index": [42, 357], "row_index_nam": [151, 152, 157, 159, 161, 163, 166, 169, 170, 171], "row_index_offset": [151, 152, 157, 159, 161, 163, 166, 169, 170, 171], "row_nr": [333, 357, 963, 991], "row_tot": [42, 357], "rowname_col": [357, 361], "rows_by_kei": [257, 291, 310, 357], "rowserror": [290, 357], "rowtotalsdefinit": [42, 357], "rt64": [334, 357, 964, 991], "rtol": [175, 176, 177, 178], "rtrim": 1425, "ru": 1427, "rule": [151, 163, 166, 171, 238, 266, 357, 715, 739, 754, 922, 991, 1321, 1345, 1360], "run": [49, 50, 51, 52, 64, 65, 73, 97, 131, 153, 182, 185, 186, 187, 244, 259, 262, 265, 296, 322, 332, 343, 357, 448, 462, 577, 615, 674, 675, 733, 847, 869, 891, 892, 893, 903, 910, 915, 921, 926, 932, 934, 941, 945, 946, 954, 961, 966, 991, 995, 997, 1068, 1087, 1209, 1246, 1278, 1279, 1339, 1404, 1432, 1435], "runtim": [154, 995], "runtimeerror": [315, 357, 1384, 1404], "rust": [39, 48, 49, 102, 114, 148, 156, 157, 159, 163, 265, 343, 357, 724, 991, 995, 1246, 1330, 1404], "s1": [57, 98, 99, 177, 178, 238, 357, 794, 798, 800, 1041, 1147, 1148, 1168, 1194, 1204, 1238, 1258, 1270, 1395, 1404], "s2": [1, 57, 98, 99, 177, 178, 238, 357, 794, 798, 800, 1041, 1074, 1091, 1147, 1148, 1168, 1185, 1194, 1204, 1238, 1252, 1258, 1270, 1395, 1404], "s3": [1, 41, 155, 167, 168, 171, 172, 357, 934, 991, 1041, 1238, 1404], "s_": 503, "s_bar": 1422, "s_dt": [503, 1427, 1428], "s_dt1": 1427, "s_dt2": 1427, "s_dtm": 503, "s_foo": 1422, "s_from_str_repr": [1381, 1404], "s_head_5": 728, "s_head_n": 728, "s_tail_5": 752, "s_tail_n": 752, "s_td": 503, "s_tm": [503, 1427, 1428], "safe": [668, 869, 1271, 1404], "sale": [656, 869], "salesforce_format": 200, "sam": 14, "same": [22, 41, 42, 55, 57, 58, 64, 65, 66, 98, 99, 115, 146, 157, 166, 175, 176, 177, 178, 180, 190, 207, 213, 227, 228, 234, 235, 236, 244, 260, 265, 281, 285, 291, 292, 303, 322, 331, 332, 336, 343, 357, 369, 375, 379, 386, 421, 447, 468, 469, 503, 527, 528, 529, 533, 535, 536, 539, 605, 619, 625, 656, 670, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 703, 710, 721, 732, 764, 859, 865, 869, 891, 892, 900, 901, 905, 906, 907, 910, 916, 919, 921, 935, 945, 948, 954, 960, 961, 967, 991, 997, 1002, 1040, 1067, 1092, 1093, 1098, 1131, 1158, 1159, 1237, 1246, 1274, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1293, 1294, 1295, 1296, 1297, 1298, 1327, 1338, 1395, 1404, 1418, 1420, 1428], "samoa": [471, 1095], "sampl": [151, 152, 343, 357, 703, 707, 826, 827, 869, 974, 1314, 1404, 1421], "sample_s": [151, 152], "sampled_from": 1435, "sandwich": [241, 357], "sanit": 172, "sat": [357, 360], "satisfi": [550, 869, 1179, 1404], "saturdai": [245, 357, 911, 991], "save": [2, 3, 6, 245, 260, 289, 327, 357, 471, 479, 493, 498, 511, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 812, 856, 857, 865, 869, 881, 911, 916, 938, 991, 1103, 1121, 1126, 1139, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [148, 212, 213, 255, 265, 290, 300, 357, 448, 614, 699, 701, 728, 733, 741, 752, 802, 816, 828, 829, 830, 842, 869, 944, 991, 1001, 1068, 1194, 1303, 1307, 1334, 1339, 1347, 1358, 1404], "scale": [30, 74, 231, 357, 431, 615, 660, 696, 755, 869, 997, 1149, 1361, 1404], "scale_negative_even": [660, 869], "scan": [56, 135, 138, 151, 152, 153, 156, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 197, 357, 881, 991, 1336], "scan_csv": [49, 50, 51, 52, 151, 152, 893, 946, 991], "scan_ipc": 157, "scan_ndjson": 161, "scan_parquet": [53, 54, 55, 163, 165, 172, 934, 991], "scan_pyarrow_dataset": [163, 171], "scan_tabl": 205, "scancastopt": 171, "scatter": [357, 360, 1404, 1409], "scenario": 1404, "schedul": [65, 892, 991], "schema": [0, 1, 16, 30, 37, 40, 41, 56, 59, 60, 61, 66, 97, 106, 123, 124, 132, 134, 135, 136, 138, 146, 147, 151, 152, 153, 154, 156, 158, 160, 161, 162, 163, 165, 166, 169, 170, 171, 190, 193, 195, 196, 197, 201, 203, 217, 218, 219, 225, 229, 231, 258, 262, 265, 266, 273, 277, 286, 315, 319, 357, 375, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 477, 605, 626, 627, 630, 631, 641, 643, 645, 782, 851, 869, 881, 889, 890, 894, 895, 899, 902, 921, 922, 927, 931, 936, 959, 974, 991, 997, 1077, 1336, 1404, 1413], "schema_mod": [41, 357], "schema_overrid": [132, 134, 135, 136, 137, 138, 151, 152, 153, 154, 156, 160, 161, 162, 166, 170, 258, 315, 357, 696, 869, 991, 997], "schemadefinit": [132, 134, 135, 136, 138, 160, 161, 170, 357, 991], "schemadict": [89, 97, 132, 134, 135, 136, 137, 138, 146, 151, 153, 154, 156, 162, 163, 166, 169, 171, 266, 357, 375, 627, 630, 631, 851, 921, 922, 974, 991], "schemaerror": [266, 357, 922, 991], "schemainitdatatyp": 996, "scheme": [53, 54, 55], "schindler": 1413, "scientif": [13, 39, 49, 357, 991], "scikit": [319, 357], "scipi": [563, 707, 869, 1195, 1314, 1404], "scope": [35, 36, 207, 880, 997, 1416, 1419, 1432], "score": [42, 281, 357], "script": [357, 360, 1404, 1409], "scroll": [42, 357], "sdiff": 597, "sdk": 192, "search": [260, 357, 715, 725, 727, 739, 916, 948, 991, 1176, 1321, 1331, 1333, 1345, 1404], "search_sort": [869, 1404], "searchsortedsid": [699, 869, 1303, 1404], "searchstrategi": [179, 181, 182, 183, 184, 186], "season": [737, 738], "sec": [1428, 1435], "second": [39, 49, 161, 166, 169, 170, 175, 176, 177, 178, 245, 260, 289, 327, 357, 481, 485, 487, 488, 492, 493, 496, 498, 503, 510, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 737, 738, 751, 754, 809, 810, 811, 812, 855, 856, 857, 869, 911, 916, 931, 938, 991, 997, 1121, 1124, 1126, 1138, 1139, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1343, 1344, 1357, 1360, 1404, 1427, 1428, 1433, 1435], "second_part": [743, 744, 1349, 1350], "seconds_diff": 510, "secret": [168, 171], "section": [281, 357, 714, 722, 723, 726, 737, 738, 807, 808, 810, 811, 856, 857, 995, 1320, 1328, 1329, 1332, 1343, 1344], "secur": [465, 869, 898, 991], "see": [39, 41, 42, 44, 45, 48, 49, 50, 51, 52, 73, 146, 148, 153, 154, 155, 156, 157, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 175, 176, 177, 178, 182, 186, 197, 209, 221, 236, 245, 259, 280, 281, 285, 326, 357, 361, 436, 437, 439, 440, 452, 503, 528, 563, 614, 707, 714, 722, 723, 726, 728, 737, 738, 752, 807, 808, 810, 811, 842, 856, 857, 865, 869, 907, 911, 935, 957, 966, 991, 995, 997, 999, 1055, 1056, 1058, 1059, 1076, 1131, 1195, 1314, 1320, 1328, 1329, 1332, 1334, 1343, 1344, 1358, 1404, 1435], "seed": [97, 173, 246, 293, 357, 542, 594, 666, 698, 703, 869, 1172, 1226, 1269, 1301, 1310, 1404], "seed_1": [246, 357, 542, 869, 1172, 1404], "seed_2": [246, 357, 542, 869, 1172, 1404], "seed_3": [246, 357, 542, 869, 1172, 1404], "seen": [503, 893, 991, 1131], "seen_group": 152, "select": [1, 8, 40, 49, 50, 51, 52, 58, 59, 60, 61, 64, 65, 97, 103, 149, 151, 152, 153, 154, 155, 157, 159, 163, 166, 168, 172, 181, 212, 214, 255, 256, 260, 264, 265, 277, 280, 290, 296, 302, 304, 317, 323, 327, 334, 357, 364, 365, 368, 369, 375, 379, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 405, 410, 411, 412, 413, 414, 419, 420, 421, 422, 423, 424, 426, 429, 432, 433, 438, 441, 442, 443, 446, 450, 451, 453, 454, 455, 456, 462, 464, 466, 467, 468, 469, 472, 474, 475, 484, 490, 491, 493, 497, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 516, 519, 521, 522, 523, 524, 525, 526, 530, 532, 537, 541, 542, 543, 544, 545, 546, 547, 548, 552, 553, 556, 562, 563, 564, 566, 567, 577, 578, 606, 609, 610, 611, 612, 614, 616, 617, 618, 622, 634, 636, 638, 639, 641, 643, 645, 648, 649, 653, 654, 655, 656, 658, 659, 662, 664, 665, 666, 667, 668, 669, 672, 673, 674, 677, 678, 689, 696, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 721, 722, 723, 724, 725, 726, 727, 729, 734, 751, 762, 764, 765, 768, 769, 770, 771, 773, 774, 776, 777, 778, 779, 780, 783, 785, 787, 790, 791, 792, 795, 796, 798, 799, 800, 804, 811, 812, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 831, 833, 835, 836, 838, 839, 842, 843, 846, 848, 849, 850, 851, 852, 854, 858, 865, 869, 884, 885, 891, 892, 893, 895, 903, 916, 930, 932, 941, 945, 946, 947, 949, 955, 962, 964, 966, 991, 997, 1001, 1125, 1165, 1209, 1302, 1304, 1315, 1333, 1337, 1357, 1404, 1413, 1414, 1415, 1416, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1431, 1432, 1433, 1434], "select_from": [181, 184, 186], "select_seq": [357, 991], "selector": [0, 42, 216, 225, 227, 228, 232, 264, 272, 279, 281, 303, 312, 314, 319, 322, 324, 325, 357, 361, 375, 503, 523, 622, 869, 881, 888, 899, 900, 901, 904, 926, 948, 954, 956, 991], "selectortyp": [42, 357], "self": [1, 59, 60, 61, 62, 64, 304, 335, 357, 370, 848, 869, 891, 903, 932, 945, 949, 962, 991, 1006, 1053, 1054, 1055, 1056, 1058, 1059, 1063, 1077, 1082, 1156, 1160, 1175, 1244, 1246, 1259, 1263, 1264, 1270, 1273, 1274, 1275, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1302, 1304, 1305, 1316, 1392, 1395, 1404, 1415, 1416, 1417, 1419, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1432], "self_dtyp": [614, 615, 869], "semi": [147, 259, 357, 915, 991, 1420], "semigraph": 22, "sens": [151, 157, 159, 273, 327, 357, 656, 869, 927, 991], "sensit": [714, 723, 726, 737, 738, 1320, 1329, 1332, 1343, 1344], "sep": 147, "separ": [9, 12, 26, 29, 38, 39, 49, 141, 147, 150, 151, 152, 156, 166, 279, 281, 312, 321, 323, 357, 405, 408, 503, 578, 585, 615, 721, 797, 802, 803, 869, 945, 955, 991, 1025, 1028, 1131, 1210, 1217, 1327, 1373, 1379, 1404, 1427], "seq": 28, "seq1": 28, "seq2": 28, "sequenc": [42, 48, 52, 53, 55, 58, 89, 132, 134, 135, 136, 138, 142, 147, 151, 152, 153, 156, 160, 161, 162, 166, 170, 171, 180, 181, 182, 183, 184, 213, 215, 223, 233, 259, 260, 264, 272, 277, 279, 280, 281, 292, 303, 312, 314, 319, 320, 324, 325, 326, 327, 357, 422, 443, 463, 536, 555, 606, 614, 660, 663, 670, 671, 710, 739, 749, 750, 764, 774, 791, 802, 803, 816, 818, 826, 827, 829, 830, 839, 842, 846, 849, 869, 886, 897, 915, 916, 926, 930, 948, 953, 956, 957, 991, 997, 1041, 1062, 1088, 1089, 1156, 1238, 1267, 1274, 1275, 1345, 1371, 1389, 1404], "sequenti": [64, 296, 332, 357, 614, 829, 830, 869, 891, 903, 932, 941, 945, 961, 991], "ser": [1100, 1101, 1129], "seri": [0, 1, 13, 27, 42, 57, 59, 60, 61, 62, 66, 67, 76, 89, 98, 99, 108, 132, 134, 137, 139, 148, 175, 177, 178, 182, 190, 212, 213, 226, 236, 238, 240, 242, 245, 246, 249, 250, 251, 252, 254, 256, 264, 268, 270, 275, 285, 287, 289, 293, 307, 310, 312, 313, 315, 317, 318, 337, 357, 369, 386, 397, 422, 426, 445, 446, 447, 448, 449, 451, 497, 526, 529, 532, 536, 537, 547, 548, 549, 553, 555, 556, 558, 559, 560, 561, 572, 578, 581, 606, 612, 614, 615, 666, 667, 668, 669, 670, 671, 676, 678, 689, 700, 702, 728, 739, 751, 752, 753, 754, 758, 762, 773, 778, 788, 792, 794, 795, 798, 800, 802, 803, 807, 808, 810, 811, 816, 818, 822, 823, 826, 827, 828, 829, 830, 840, 842, 843, 847, 848, 851, 856, 857, 860, 869, 881, 907, 911, 914, 935, 938, 968, 991, 1396, 1398, 1400, 1403, 1405, 1408, 1409, 1410, 1411, 1412, 1414, 1416, 1427, 1432, 1435], "serial": [46, 47, 224, 357, 465, 633, 869, 898, 991], "serializ": [148, 869], "serializationformat": [224, 297, 357, 465, 629, 869, 898, 942, 991], "seriesplot": [1404, 1409], "server": [40, 153, 154, 357], "servic": 34, "service_account": [155, 167], "service_account_json_absolute_path": [155, 167], "session": 153, "set": [2, 3, 4, 5, 6, 7, 9, 10, 11, 12, 14, 15, 17, 18, 19, 22, 27, 28, 29, 32, 39, 40, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 58, 59, 64, 65, 70, 73, 74, 76, 133, 134, 135, 138, 148, 151, 152, 153, 154, 156, 157, 159, 160, 161, 162, 163, 164, 166, 169, 170, 171, 172, 173, 175, 176, 177, 178, 180, 181, 182, 183, 184, 185, 186, 187, 188, 192, 197, 207, 211, 220, 227, 228, 237, 240, 244, 246, 257, 259, 260, 270, 272, 291, 293, 297, 302, 307, 312, 314, 315, 319, 321, 322, 324, 325, 326, 357, 360, 383, 385, 407, 408, 422, 434, 436, 437, 439, 440, 452, 463, 496, 497, 504, 505, 506, 507, 508, 509, 510, 514, 542, 555, 581, 583, 585, 594, 595, 596, 597, 598, 600, 606, 614, 615, 622, 623, 629, 660, 663, 670, 671, 677, 678, 679, 681, 683, 685, 687, 689, 690, 692, 694, 698, 703, 707, 708, 713, 729, 737, 738, 741, 746, 747, 748, 749, 750, 751, 753, 754, 758, 779, 783, 785, 788, 792, 794, 797, 798, 800, 802, 803, 807, 808, 809, 810, 811, 812, 816, 822, 823, 826, 827, 828, 829, 830, 834, 840, 842, 843, 844, 845, 847, 851, 853, 856, 857, 859, 860, 869, 881, 891, 892, 893, 900, 903, 910, 915, 916, 921, 926, 932, 942, 945, 946, 947, 954, 956, 957, 965, 974, 991, 1004, 1005, 1027, 1028, 1041, 1046, 1053, 1055, 1056, 1058, 1059, 1076, 1088, 1124, 1125, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1142, 1162, 1172, 1185, 1192, 1213, 1215, 1217, 1226, 1227, 1228, 1229, 1230, 1232, 1238, 1246, 1267, 1274, 1275, 1280, 1281, 1282, 1284, 1286, 1288, 1290, 1292, 1293, 1295, 1297, 1301, 1302, 1303, 1310, 1314, 1315, 1319, 1335, 1336, 1343, 1344, 1347, 1352, 1353, 1354, 1357, 1359, 1360, 1364, 1384, 1393, 1404, 1423, 1431, 1435], "set_": 207, "set_decimal_separ": 29, "set_environ": 185, "set_except": [65, 892, 991], "set_fmt_float": 32, "set_fmt_str_length": [715, 725, 727, 739, 1321, 1333, 1345], "set_index": [245, 357, 911, 991], "set_legend": [42, 357], "set_sort": [289, 327, 357, 676, 869, 938, 991, 1404], "set_stat": 32, "set_streaming_chunk_s": [891, 991], "set_styl": [42, 357], "set_tbl_column_data_type_inlin": 26, "set_tbl_format": [7, 58], "set_tbl_row": 207, "set_tbl_width_char": 739, "set_thousands_separ": 9, "set_titl": [42, 357], "set_verbos": 207, "setosa": [357, 360], "setup": 1435, "seventeen": [546, 869], "sever": [132, 134, 135, 136, 138, 160, 161, 170, 357, 934, 991, 1435], "sfu": 154, "shape": [1, 7, 8, 9, 11, 12, 13, 14, 15, 17, 18, 19, 20, 21, 23, 24, 25, 26, 27, 28, 29, 30, 57, 58, 59, 60, 61, 62, 66, 67, 85, 89, 97, 98, 99, 106, 125, 132, 133, 134, 135, 136, 137, 138, 139, 147, 151, 160, 161, 166, 172, 175, 177, 179, 182, 186, 190, 212, 213, 214, 215, 216, 217, 218, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 232, 233, 234, 235, 236, 238, 239, 240, 242, 244, 245, 246, 247, 249, 250, 251, 252, 254, 255, 256, 259, 260, 261, 263, 264, 265, 266, 267, 268, 269, 270, 271, 273, 274, 275, 278, 279, 280, 281, 282, 283, 285, 286, 287, 288, 289, 293, 295, 297, 300, 302, 303, 304, 305, 306, 307, 308, 310, 312, 313, 317, 318, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 331, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 365, 368, 369, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 426, 427, 428, 429, 430, 431, 432, 433, 438, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 634, 635, 636, 637, 638, 639, 640, 642, 644, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 820, 821, 822, 823, 824, 825, 826, 827, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 842, 843, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 869, 884, 885, 886, 888, 889, 891, 892, 896, 897, 898, 899, 900, 901, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 917, 918, 920, 921, 922, 923, 924, 925, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 940, 942, 944, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 960, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 991, 996, 997, 1001, 1002, 1003, 1006, 1008, 1009, 1010, 1011, 1012, 1013, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1061, 1062, 1063, 1064, 1065, 1067, 1068, 1069, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1111, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1147, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1163, 1165, 1166, 1168, 1172, 1173, 1174, 1175, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1194, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1246, 1251, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1267, 1269, 1270, 1271, 1272, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1307, 1308, 1310, 1311, 1312, 1313, 1315, 1316, 1317, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1373, 1375, 1376, 1377, 1379, 1380, 1381, 1386, 1388, 1389, 1390, 1391, 1392, 1393, 1395, 1404, 1413, 1414, 1415, 1416, 1418, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1432, 1433], "share": [175, 176, 177, 178, 231, 357, 1149, 1404], "shawshank": 1413, "sheet": [42, 156, 162, 357], "sheet1": [42, 357], "sheet_id": [156, 162], "sheet_nam": [156, 162], "sheet_zoom": [42, 357], "sheetnam": [156, 162], "shift": [245, 357, 425, 466, 534, 575, 657, 796, 869, 911, 991, 1044, 1090, 1164, 1207, 1262, 1404], "short": [175, 177], "shorten": [175, 177], "shorter": [151, 152, 166, 822, 823], "shorthand": [357, 360, 859, 1404, 1409], "should": [12, 40, 42, 48, 49, 50, 51, 52, 66, 97, 132, 134, 136, 138, 146, 147, 156, 160, 161, 166, 168, 170, 172, 179, 180, 182, 186, 190, 213, 225, 257, 259, 260, 264, 265, 290, 291, 292, 303, 311, 312, 323, 343, 357, 381, 462, 465, 470, 514, 520, 523, 551, 558, 559, 577, 615, 629, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 699, 707, 710, 737, 738, 755, 779, 791, 793, 812, 814, 828, 830, 844, 845, 865, 869, 891, 893, 898, 899, 903, 915, 916, 921, 932, 942, 945, 948, 955, 991, 997, 1087, 1094, 1142, 1151, 1180, 1209, 1246, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1303, 1314, 1343, 1344, 1361, 1393, 1404, 1414], "show": [32, 42, 223, 228, 243, 262, 278, 357, 544, 630, 869, 897, 932, 945, 991, 1174, 1404, 1418, 1431], "show_graph": [262, 357, 991], "show_plot": [932, 991], "shrink": [301, 357, 702, 869, 1308, 1309, 1404], "shrink_dtyp": [264, 357, 869, 1404], "shrink_to_fit": [357, 1404], "shuffl": [173, 293, 319, 343, 357, 594, 698, 869, 974, 1226, 1301, 1404], "side": [42, 148, 153, 245, 289, 357, 550, 595, 596, 597, 598, 676, 680, 682, 684, 686, 688, 691, 693, 695, 699, 807, 808, 810, 811, 826, 827, 856, 857, 869, 911, 938, 991, 1179, 1227, 1228, 1229, 1230, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1303, 1404], "sign": [72, 73, 75, 80, 81, 82, 83, 84, 90, 375, 493, 668, 737, 738, 761, 869, 997, 1121, 1271, 1343, 1344, 1367, 1404, 1425], "sign_x": 1426, "signal": [946, 991], "signed_integ": 997, "signific": [171, 257, 265, 357, 436, 437, 439, 440, 615, 697, 869, 1055, 1056, 1058, 1059, 1246, 1300, 1404], "significantli": [156, 265, 343, 357, 1246, 1404, 1435], "silenc": 106, "silent": [56, 171, 756, 1362], "similar": [38, 48, 56, 150, 188, 213, 238, 260, 300, 322, 324, 357, 417, 500, 503, 599, 656, 701, 766, 825, 859, 869, 907, 916, 944, 954, 956, 991, 1036, 1128, 1131, 1231, 1307, 1404], "similarli": [42, 135, 245, 260, 289, 327, 357, 493, 498, 511, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 856, 857, 869, 911, 916, 938, 991, 1121, 1126, 1139, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "simpl": [42, 277, 357], "simpler": [997, 1343], "simpli": [166, 802, 816, 1070], "simplifi": [64, 891, 903, 932, 945, 991], "simplify_express": [64, 891, 903, 932, 945, 965, 991], "sin": [869, 1404, 1425], "sinc": [8, 41, 64, 67, 70, 72, 73, 90, 151, 152, 153, 155, 161, 163, 166, 167, 169, 170, 171, 179, 180, 181, 182, 186, 189, 214, 272, 315, 333, 338, 357, 477, 480, 514, 535, 614, 615, 633, 670, 702, 713, 721, 781, 790, 798, 818, 829, 869, 885, 891, 903, 926, 932, 945, 948, 962, 963, 969, 991, 1101, 1104, 1110, 1111, 1142, 1171, 1274, 1319, 1327, 1384, 1404], "sind": 1425, "sine": [390, 391, 614, 705, 706, 869, 1010, 1011, 1312, 1313, 1404, 1429], "singl": [42, 48, 58, 65, 66, 77, 150, 151, 152, 153, 154, 155, 156, 163, 166, 167, 169, 180, 190, 213, 216, 225, 226, 227, 228, 233, 240, 246, 255, 261, 265, 279, 290, 292, 303, 314, 315, 357, 404, 448, 452, 470, 493, 536, 539, 542, 574, 581, 614, 615, 667, 670, 672, 674, 710, 713, 728, 729, 733, 741, 752, 781, 791, 795, 796, 797, 823, 827, 829, 830, 849, 857, 859, 865, 869, 888, 899, 900, 901, 917, 948, 991, 997, 1024, 1068, 1076, 1094, 1121, 1156, 1172, 1206, 1213, 1270, 1274, 1276, 1278, 1319, 1334, 1335, 1339, 1347, 1358, 1378, 1384, 1404, 1415], "singlecolselector": 212, "singleindexselector": [212, 1001], "sinh": [869, 1404], "sink": [882, 893, 946, 991], "sink_": [53, 55], "sink_batch": 991, "sink_csv": [53, 54, 55, 991], "sink_ipc": 991, "sink_ndjson": 991, "sink_parquet": [53, 142, 991], "site_id": [357, 361], "six": [699, 869], "size": [16, 48, 52, 54, 146, 151, 152, 153, 179, 180, 181, 182, 186, 188, 231, 325, 357, 430, 511, 672, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 788, 822, 823, 844, 845, 846, 869, 891, 991, 1049, 1139, 1149, 1276, 1280, 1283, 1285, 1287, 1289, 1291, 1292, 1294, 1296, 1298, 1404, 1435], "sizeunit": [231, 357, 431, 1050, 1149, 1404], "skew": [689, 869, 1292, 1404], "skewtest": [707, 869, 1314, 1404], "skip": [151, 152, 156, 163, 166, 168, 171, 260, 325, 357, 916, 991, 1246, 1404, 1420], "skip_empty_lin": 156, "skip_lin": [151, 152, 166], "skip_nul": [615, 869, 1246, 1404], "skip_row": [151, 152, 166], "skip_rows_after_head": [151, 152, 166], "sklearn": [319, 357], "slice": [59, 64, 148, 231, 247, 258, 308, 357, 584, 604, 614, 626, 628, 678, 679, 681, 683, 685, 687, 690, 692, 694, 728, 752, 829, 830, 869, 884, 891, 903, 921, 932, 945, 991, 1149, 1173, 1216, 1236, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1334, 1358, 1375, 1404, 1427], "slice_pushdown": [64, 891, 903, 921, 932, 945, 965, 991], "slide": [462, 869, 1087, 1404], "slightli": [49, 50, 51, 52, 102, 533, 869, 893, 946, 991, 1428], "slot": [462, 466, 575, 869, 1087, 1090, 1207, 1404], "slow": [118, 135, 138, 151, 152, 153, 156, 160, 161, 162, 166, 170, 171, 357, 462, 615, 678, 869, 974, 991, 1087, 1281, 1336, 1404], "slower": [136, 138, 156, 244, 265, 279, 327, 343, 357, 615, 829, 830, 869, 893, 910, 946, 974, 991, 1246, 1404], "small": [13, 154, 498, 991, 1435], "smaller": [48, 52, 54, 231, 357, 991, 1149, 1404], "smallest": [215, 320, 357, 442, 443, 509, 774, 869, 886, 953, 991, 1061, 1062, 1137, 1389, 1404, 1421, 1424], "smooth": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "snappi": [37, 48, 52, 357, 991], "snapshot": 168, "snapshot_id": 168, "snowflak": [153, 154], "snowflake_format": 200, "snowi": [737, 738], "so": [1, 42, 153, 154, 156, 166, 188, 207, 243, 245, 261, 281, 289, 357, 367, 397, 407, 465, 533, 550, 583, 606, 615, 676, 737, 738, 739, 746, 747, 748, 762, 869, 884, 893, 898, 911, 917, 938, 991, 997, 1027, 1215, 1343, 1344, 1345, 1352, 1353, 1354], "softwar": [38, 150, 357], "solut": [40, 357], "solv": [97, 146], "some": [16, 32, 42, 48, 52, 57, 66, 99, 135, 151, 152, 153, 166, 190, 211, 228, 281, 292, 315, 357, 361, 737, 738, 865, 934, 991, 1185, 1343, 1344, 1404, 1435], "some_account": [723, 1329], "some_t": 1434, "someth": [614, 829, 869], "sometim": [812, 868], "somewher": [723, 1329], "sort": [53, 54, 55, 58, 59, 215, 245, 260, 273, 280, 281, 289, 298, 320, 327, 340, 351, 357, 396, 442, 443, 520, 529, 615, 656, 676, 699, 700, 710, 773, 774, 779, 781, 791, 807, 810, 830, 846, 869, 886, 903, 911, 916, 927, 930, 932, 938, 943, 945, 953, 971, 982, 991, 997, 1016, 1061, 1062, 1151, 1192, 1303, 1305, 1388, 1389, 1390, 1393, 1404, 1420, 1433, 1435], "sort_bi": 869, "sort_column": [281, 357], "sorted": [260, 357, 916, 991], "sorted_asc": [1162, 1404], "sorted_desc": [1162, 1404], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 183, 184, 185, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 201, 202, 203, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 375, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 869, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 991, 995, 996, 997, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1370, 1371, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1404, 1409, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1432], "source_ac": 139, "source_actor_id": 139, "source_alia": [41, 357], "source_cha": 139, "source_channel_id": 139, "south": 76, "space": [22, 245, 357, 503, 826, 827, 911, 991, 997, 1131], "spam": [269, 357, 723, 1329], "span": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "spanner": [357, 361], "spark": [48, 357], "sparklin": [42, 357], "speak": [707, 869, 1314, 1404], "spearman": 798, "speci": [357, 360], "special": [40, 55, 151, 152, 154, 166, 319, 334, 357, 678, 723, 737, 738, 869, 964, 991, 1246, 1281, 1329, 1343, 1344, 1404], "specif": [1, 32, 41, 42, 44, 45, 50, 102, 132, 134, 136, 138, 147, 151, 154, 155, 156, 160, 161, 162, 167, 168, 170, 190, 213, 216, 257, 259, 266, 309, 314, 357, 367, 375, 500, 503, 551, 751, 753, 754, 758, 779, 869, 888, 915, 922, 991, 996, 997, 1128, 1131, 1180, 1357, 1359, 1360, 1364, 1378, 1382, 1393, 1404, 1420, 1432, 1434, 1435], "specifi": [11, 39, 40, 41, 42, 48, 49, 58, 103, 106, 109, 124, 127, 151, 156, 162, 163, 166, 171, 183, 193, 195, 196, 197, 213, 215, 216, 231, 232, 235, 240, 244, 245, 259, 260, 279, 281, 289, 290, 292, 295, 296, 300, 303, 314, 320, 323, 331, 332, 336, 357, 375, 443, 452, 496, 503, 519, 521, 522, 523, 528, 656, 669, 671, 679, 681, 683, 685, 687, 690, 692, 694, 701, 710, 766, 774, 791, 794, 795, 796, 797, 807, 808, 810, 811, 812, 814, 847, 851, 856, 857, 865, 869, 886, 888, 904, 906, 910, 911, 915, 916, 938, 940, 941, 944, 948, 953, 955, 960, 961, 967, 991, 997, 1062, 1076, 1124, 1131, 1149, 1150, 1152, 1153, 1159, 1273, 1275, 1307, 1382, 1389, 1404, 1420, 1427, 1434], "speed": [52, 298, 357, 615, 869, 943, 991, 995, 1435], "speedup": [58, 171, 257, 265, 357, 615, 869, 1246, 1404], "split": [1, 42, 48, 53, 54, 55, 59, 258, 357, 721, 743, 744, 1327, 1349, 1350, 1427], "split_by_column_dtyp": 61, "split_inclus": 742, "split_part": 1425, "splitfram": [1, 59], "spreadsheet": [38, 150, 156, 162, 281, 357], "spring": [737, 738], "sql": [0, 40, 121, 122, 130, 153, 154, 259, 300, 357, 417, 599, 701, 825, 849, 869, 881, 944, 991, 1036, 1231, 1307, 1404, 1413, 1414, 1416, 1418, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1429, 1430, 1433, 1434], "sql_expr": 1432, "sqlalchemi": [40, 153, 174, 357], "sqlcontext": [304, 357, 848, 949, 991, 1431], "sqldw_format": 200, "sqlite": [40, 153, 154, 357], "sqrt": [615, 707, 766, 869, 1246, 1314, 1404, 1425], "sqrt_x": 1426, "squar": [1, 62, 343, 563, 672, 711, 869, 974, 1195, 1276, 1317, 1404, 1426], "st": [34, 1435], "stabil": [246, 357, 542, 869, 1172, 1404], "stabl": [163, 209, 221, 223, 224, 246, 293, 297, 304, 357, 465, 542, 611, 629, 772, 869, 897, 898, 926, 942, 948, 949, 991, 999, 1172, 1386, 1404], "stack": [66, 190, 249, 329, 357, 360, 1414], "stage": [931, 945, 991], "stai": [614, 703, 869], "standalon": [180, 997], "standard": [7, 12, 39, 42, 153, 305, 314, 319, 357, 484, 521, 690, 691, 707, 712, 731, 734, 850, 865, 869, 884, 950, 991, 997, 1108, 1147, 1152, 1258, 1294, 1314, 1318, 1337, 1340, 1404, 1421, 1435], "standardis": [42, 357], "start": [42, 49, 50, 51, 52, 55, 149, 151, 152, 154, 156, 157, 159, 161, 162, 163, 166, 169, 170, 171, 188, 239, 244, 245, 262, 302, 327, 333, 334, 357, 426, 429, 432, 445, 449, 470, 478, 482, 489, 494, 498, 511, 512, 523, 537, 582, 600, 675, 680, 682, 684, 686, 688, 691, 693, 695, 708, 714, 719, 723, 727, 736, 741, 745, 746, 748, 749, 752, 761, 788, 793, 802, 806, 807, 808, 809, 810, 811, 814, 816, 822, 823, 826, 827, 856, 857, 859, 865, 869, 893, 909, 910, 911, 932, 946, 947, 963, 964, 991, 997, 1051, 1064, 1069, 1094, 1096, 1099, 1102, 1104, 1105, 1112, 1114, 1116, 1117, 1120, 1122, 1126, 1130, 1139, 1140, 1166, 1214, 1232, 1279, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1315, 1325, 1329, 1333, 1342, 1347, 1351, 1352, 1354, 1358, 1367, 1404, 1420, 1427, 1435], "start_bi": [245, 357, 911, 991], "startbi": [245, 357, 911, 991], "starts_a": 1427, "starts_with": [59, 281, 357, 361, 426, 429, 445, 622, 714, 719, 848, 949, 991, 997, 1064, 1325, 1425], "starts_with_expr": 432, "starts_with_lit": 432, "startup": [314, 357], "stat": [563, 707, 869, 1195, 1314, 1404], "state": [4, 5, 114, 614, 615, 802, 803, 829, 830, 869, 881, 921, 991, 1246, 1404, 1432], "statement": [154, 656, 859, 869, 1418, 1433], "static": [95, 362, 974], "statist": [48, 52, 151, 152, 163, 168, 169, 171, 223, 357, 521, 522, 563, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 707, 869, 897, 991, 1089, 1152, 1153, 1195, 1280, 1283, 1285, 1287, 1289, 1291, 1292, 1294, 1296, 1298, 1314, 1404], "std": [223, 357, 690, 691, 869, 897, 991, 1089, 1293, 1294, 1298, 1404], "std_dev": [42, 357], "stddev": 1425, "stddev_samp": 1421, "stdev": [42, 357, 1421], "stdev_samp": 1421, "stdout": [207, 243, 357, 631], "step": [325, 357, 533, 788, 822, 823, 846, 869, 884], "steve": [273, 357, 927, 991], "still": [153, 154], "stock": [357, 360], "stop": [146, 149, 151, 152, 157, 159, 161, 163, 166, 169, 170, 171, 680, 682, 684, 686, 688, 691, 693, 695, 869, 884, 893, 946, 991, 1096, 1099, 1104, 1105, 1112, 1114, 1116, 1120, 1126, 1130, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "storag": [10, 39, 41, 44, 48, 49, 50, 51, 52, 151, 155, 157, 159, 161, 163, 164, 166, 167, 168, 169, 170, 171, 197, 357, 991], "storage_loc": [198, 201, 202], "storage_opt": [39, 41, 44, 48, 49, 50, 51, 52, 151, 155, 157, 159, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 197, 357, 991], "store": [41, 168, 233, 257, 291, 357, 446, 674, 869, 1065, 1156, 1278, 1404], "store_id": [656, 869], "str": [1, 2, 3, 5, 6, 9, 12, 14, 17, 18, 19, 22, 23, 28, 29, 32, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 59, 60, 61, 62, 63, 73, 76, 77, 100, 131, 132, 133, 134, 135, 136, 138, 139, 142, 144, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 179, 180, 182, 185, 186, 187, 192, 193, 195, 196, 197, 198, 199, 201, 202, 207, 213, 215, 216, 220, 223, 224, 225, 226, 227, 228, 229, 231, 232, 236, 237, 238, 240, 241, 243, 244, 245, 247, 249, 250, 252, 254, 255, 257, 259, 260, 261, 263, 264, 266, 267, 269, 271, 272, 273, 274, 277, 279, 281, 283, 285, 286, 287, 288, 289, 290, 291, 293, 297, 298, 302, 303, 304, 305, 306, 308, 310, 311, 312, 313, 314, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357, 367, 368, 369, 375, 380, 381, 382, 403, 408, 422, 426, 427, 428, 429, 432, 433, 438, 441, 443, 445, 446, 449, 457, 463, 465, 467, 475, 493, 497, 498, 500, 503, 511, 520, 523, 529, 531, 535, 536, 539, 547, 550, 572, 583, 584, 585, 600, 604, 606, 615, 626, 628, 629, 630, 631, 633, 640, 641, 642, 643, 644, 645, 646, 647, 653, 656, 660, 663, 669, 670, 671, 673, 675, 676, 680, 682, 684, 686, 688, 691, 693, 695, 702, 709, 710, 762, 763, 764, 765, 774, 779, 781, 782, 783, 784, 785, 786, 787, 789, 790, 796, 797, 799, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 814, 815, 816, 817, 818, 819, 820, 821, 824, 825, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 841, 842, 843, 844, 845, 846, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 865, 869, 876, 886, 888, 891, 892, 895, 897, 898, 899, 900, 901, 903, 904, 907, 910, 911, 913, 915, 916, 917, 922, 926, 927, 930, 932, 935, 936, 937, 938, 942, 943, 945, 947, 948, 949, 953, 954, 955, 956, 957, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 991, 996, 997, 1003, 1028, 1041, 1047, 1063, 1064, 1065, 1069, 1088, 1089, 1099, 1121, 1125, 1126, 1128, 1131, 1139, 1151, 1159, 1162, 1204, 1217, 1238, 1254, 1255, 1256, 1267, 1272, 1274, 1275, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1304, 1368, 1370, 1371, 1379, 1380, 1381, 1382, 1393, 1404, 1410, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1420, 1421, 1422, 1424, 1427, 1428, 1432, 1433, 1435], "str_date": 1427, "str_timestamp": 1427, "str_valu": [53, 144], "strategi": [39, 49, 58, 66, 151, 171, 179, 180, 181, 182, 183, 184, 186, 190, 235, 245, 259, 260, 276, 326, 327, 357, 425, 458, 461, 528, 534, 615, 869, 882, 906, 911, 915, 916, 934, 957, 991, 1044, 1159, 1164, 1238, 1404], "stream": [11, 16, 44, 45, 49, 50, 51, 52, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 244, 259, 322, 357, 891, 893, 903, 910, 915, 921, 926, 932, 945, 946, 948, 954, 991], "stream_result": 153, "streamabl": [921, 926, 956, 991], "streaming_t": 204, "strftime": [102, 503, 1131, 1425, 1427], "strict": [134, 135, 138, 147, 216, 225, 286, 357, 427, 444, 503, 714, 717, 726, 751, 753, 754, 756, 758, 839, 869, 888, 899, 936, 991, 997, 1046, 1063, 1131, 1148, 1320, 1323, 1332, 1357, 1359, 1360, 1362, 1364, 1404], "strictli": [39, 49, 57, 99, 151, 260, 357, 916, 991], "string": [1, 2, 3, 5, 6, 14, 16, 17, 18, 22, 37, 39, 40, 41, 42, 46, 47, 49, 56, 57, 70, 73, 76, 89, 96, 98, 99, 100, 102, 108, 126, 135, 139, 147, 151, 152, 153, 154, 166, 175, 176, 177, 178, 179, 186, 191, 215, 216, 219, 224, 229, 231, 238, 240, 243, 244, 245, 260, 266, 279, 281, 289, 292, 294, 295, 296, 297, 303, 313, 314, 320, 321, 325, 327, 331, 332, 336, 357, 367, 368, 375, 380, 403, 408, 429, 443, 445, 447, 448, 449, 452, 465, 493, 498, 500, 503, 511, 520, 523, 531, 535, 550, 585, 629, 631, 656, 660, 670, 671, 676, 680, 682, 684, 686, 688, 691, 693, 695, 710, 713, 714, 715, 716, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 763, 766, 774, 782, 784, 786, 791, 794, 795, 796, 797, 805, 807, 808, 810, 811, 817, 832, 834, 837, 847, 851, 853, 856, 857, 859, 865, 869, 881, 886, 888, 894, 898, 902, 903, 910, 911, 916, 922, 931, 938, 939, 940, 941, 942, 948, 953, 960, 961, 967, 991, 996, 997, 1028, 1046, 1047, 1048, 1062, 1064, 1067, 1068, 1069, 1121, 1126, 1128, 1131, 1139, 1151, 1179, 1217, 1274, 1275, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1319, 1320, 1321, 1322, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1370, 1381, 1382, 1389, 1404, 1413, 1414, 1422, 1425, 1428, 1431, 1435], "string_to_arrai": 1425, "stringcach": [98, 99, 259, 357, 881], "stringio": [160, 161, 535, 869], "strings_hex": 718, "strip": [30, 746, 747, 748, 749, 750, 1352, 1353, 1354, 1427], "strip_chars_end": [748, 750], "strip_chars_start": [747, 749], "strip_prefix": [748, 750], "strip_suffix": [747, 749], "strongli": [42, 188, 265, 290, 343, 357, 615, 869, 1246, 1404], "strpo": 1425, "strptime": [289, 357, 497, 676, 869, 938, 991, 1125, 1425], "struct": [8, 56, 77, 127, 139, 142, 264, 266, 277, 318, 323, 357, 375, 422, 463, 544, 606, 614, 615, 641, 643, 645, 663, 674, 675, 724, 730, 743, 744, 772, 779, 802, 803, 805, 829, 859, 869, 922, 955, 974, 991, 997, 1041, 1088, 1238, 1246, 1267, 1278, 1330, 1336, 1349, 1350, 1384, 1386, 1404], "struct_col": [762, 764, 765], "struct_seri": 974, "structarrai": [231, 357, 1149, 1404], "structfieldnotfounderror": 764, "structur": [42, 44, 45, 50, 108, 111, 125, 147, 213, 233, 280, 292, 309, 315, 357, 660, 869, 930, 991, 1156, 1378, 1404, 1432], "student": [281, 357], "style": [7, 22, 42, 53, 153, 154, 281, 357], "sub": [343, 401, 402, 403, 406, 407, 408, 409, 411, 412, 413, 414, 415, 419, 420, 424, 585, 592, 869, 1021, 1022, 1023, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1038, 1039, 1043, 1217, 1224], "subarrai": [399, 400, 1019, 1020], "subclass": [1, 357], "subexpress": [64, 891, 903, 932, 945, 991], "subinterv": 1421, "subject": [48, 281, 357], "sublist": [407, 570, 571, 573, 575, 580, 581, 582, 583, 584, 585, 586, 595, 600, 604, 1027, 1185, 1202, 1203, 1205, 1207, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1227, 1232, 1236, 1238, 1404], "subplan": [64, 131, 891, 903, 932, 945, 991], "subscript": 884, "subsequ": [42, 163, 171, 284, 316, 357, 848, 859, 903, 991, 1385, 1404, 1419], "subset": [227, 228, 277, 322, 357, 900, 901, 954, 991], "substr": [426, 429, 432, 445, 449, 714, 719, 726, 737, 738, 741, 742, 743, 744, 745, 997, 1045, 1048, 1051, 1064, 1069, 1320, 1325, 1332, 1343, 1344, 1347, 1348, 1349, 1350, 1351, 1425], "subtl": [42, 357], "subtli": [533, 869], "subtract": [563, 767, 869, 1195, 1404], "succe": [151, 152, 166], "success": [716, 723, 1322, 1329], "successfulli": [53, 54, 55, 891, 903, 932, 945, 991], "suffer": 55, "suffix": [259, 260, 261, 336, 357, 382, 429, 443, 445, 558, 559, 560, 561, 620, 640, 642, 645, 646, 647, 673, 696, 719, 747, 750, 774, 869, 915, 916, 917, 962, 967, 991, 997, 1048, 1064, 1325, 1356], "suffix_field": [641, 643], "sugar": [326, 357, 670, 671, 739, 783, 785, 787, 799, 801, 804, 814, 819, 820, 821, 831, 833, 835, 836, 838, 840, 841, 847, 850, 852, 854, 858, 860, 869, 957, 991, 1274, 1275, 1317, 1345, 1404], "suggest": [357, 360, 1404, 1409], "suitabl": [58, 66, 153, 180, 190, 265, 357, 615, 699, 869, 1246, 1303, 1404], "sum": [42, 97, 148, 231, 238, 244, 245, 255, 281, 289, 307, 336, 357, 460, 461, 465, 516, 529, 615, 626, 628, 629, 630, 631, 632, 670, 671, 676, 681, 690, 692, 693, 694, 781, 783, 795, 802, 804, 805, 816, 830, 842, 853, 869, 891, 892, 898, 903, 910, 911, 929, 932, 934, 938, 942, 945, 967, 991, 997, 1085, 1086, 1145, 1149, 1295, 1296, 1404, 1413, 1420, 1422, 1425, 1432], "sum_": [707, 869, 1314, 1404], "sum_a": [289, 357, 676, 869, 938, 991], "sum_horizont": [58, 357, 852], "summari": [223, 357, 897, 991, 1089, 1404, 1420], "summer": [737, 738], "sun": [357, 360, 751, 1357], "sundai": [245, 357, 470, 482, 500, 503, 513, 793, 911, 991, 1094, 1106, 1128, 1131, 1141], "sunni": [737, 738, 1343, 1344], "supercast": [238, 357], "supertyp": [66, 148, 190, 235, 315, 319, 357, 386, 796, 869, 906, 991, 1404], "suppli": [40, 42, 132, 134, 135, 136, 138, 153, 160, 161, 170, 236, 285, 290, 314, 357, 529, 660, 869, 907, 935, 991, 1382, 1404], "support": [1, 39, 40, 41, 42, 44, 48, 49, 50, 51, 52, 64, 65, 66, 74, 132, 133, 134, 135, 136, 137, 138, 139, 153, 154, 155, 156, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 179, 183, 186, 190, 197, 207, 213, 257, 258, 259, 260, 291, 292, 302, 303, 311, 316, 319, 357, 430, 503, 520, 600, 656, 670, 671, 708, 710, 715, 725, 727, 728, 737, 738, 739, 741, 752, 865, 869, 875, 884, 891, 892, 903, 915, 916, 932, 945, 947, 948, 991, 997, 1049, 1131, 1151, 1232, 1274, 1275, 1315, 1321, 1331, 1333, 1334, 1343, 1344, 1345, 1347, 1358, 1385, 1387, 1404, 1408, 1422, 1427, 1428, 1430, 1431, 1432], "supportsinterchang": 133, "suppos": [212, 281, 357, 615, 869, 1246, 1404], "sure": [66, 132, 133, 137, 148, 151, 152, 155, 157, 159, 163, 167, 284, 357, 869], "surreal_query_to_fram": 153, "surrealdb": 153, "surrealql": 153, "suscept": 991, "swap": [859, 936, 991], "swim": 797, "switch": [64, 65, 471, 891, 892, 903, 932, 945, 991, 1095], "sy": 207, "sydnei": 809, "symbol": [38, 39, 49, 357, 869, 991], "symmetr": [551, 597, 869, 997, 1180, 1229, 1404], "symmetri": [895, 902, 939, 959, 991], "sync": [49, 50, 51, 52, 991], "sync_on_clos": [49, 50, 51, 52, 991], "synchron": [153, 985], "synconclosemethod": [49, 50, 51, 52, 991], "syntact": [326, 357, 670, 671, 739, 783, 785, 787, 799, 801, 804, 814, 819, 820, 821, 831, 833, 835, 836, 838, 840, 841, 847, 850, 852, 854, 858, 860, 869, 957, 991, 1274, 1275, 1317, 1345, 1404], "syntax": [42, 122, 213, 236, 265, 277, 285, 357, 630, 714, 722, 723, 726, 737, 738, 822, 823, 865, 884, 907, 935, 945, 991, 1320, 1328, 1329, 1332, 1343, 1344, 1404, 1428, 1430], "system": [38, 151, 152, 357, 475, 891, 903, 932, 945, 991, 1099], "t": [38, 39, 41, 49, 66, 97, 137, 146, 150, 151, 156, 162, 166, 172, 190, 245, 260, 265, 280, 322, 323, 325, 357, 462, 471, 479, 497, 503, 516, 519, 521, 522, 577, 615, 656, 660, 722, 726, 737, 738, 748, 751, 754, 759, 859, 869, 911, 916, 930, 954, 955, 991, 997, 1087, 1125, 1131, 1145, 1150, 1152, 1153, 1209, 1246, 1328, 1332, 1343, 1344, 1353, 1354, 1357, 1360, 1365, 1404, 1416, 1417, 1427], "t_": [323, 357, 520, 869, 955, 991, 1151, 1404], "t_0": [289, 357, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 869, 938, 991, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "t_1": [289, 357, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 869, 938, 991, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "t_a": [323, 357, 955, 991], "t_b": [323, 357, 955, 991], "t_c": [323, 357, 955, 991], "t_d": [323, 357, 955, 991], "t_i": [520, 869, 1151, 1404], "t_id": [261, 357, 917, 991], "t_n": [289, 357, 676, 680, 682, 684, 686, 688, 691, 693, 695, 869, 938, 991, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404], "t_struct": [323, 357, 955, 991], "tab_spann": [357, 361], "tab_stub": [357, 361], "tab_styl": [357, 361], "tabl": [7, 17, 18, 19, 21, 22, 23, 24, 25, 27, 28, 40, 41, 42, 43, 132, 139, 147, 155, 156, 162, 167, 168, 193, 196, 197, 199, 202, 203, 259, 261, 281, 304, 309, 316, 325, 326, 357, 361, 848, 881, 915, 917, 949, 957, 991, 1414, 1415, 1416, 1417, 1419, 1420, 1431, 1432], "table_id": 202, "table_nam": [40, 42, 156, 193, 197, 304, 357, 949, 991], "table_path": [41, 155, 167, 168, 357], "table_styl": [42, 357], "table_typ": 202, "tableinfo": [193, 196, 205], "tablemerg": [41, 357], "tablenotfounderror": [41, 357], "tables_scale_100": [141, 152], "tabletyp": [202, 205], "tail": [243, 247, 357, 386, 707, 869, 991, 1173, 1314, 1404], "take": [42, 97, 147, 156, 162, 182, 183, 207, 238, 239, 245, 270, 273, 280, 281, 286, 357, 396, 470, 482, 493, 529, 536, 537, 581, 582, 614, 641, 643, 645, 710, 791, 793, 813, 815, 824, 869, 909, 911, 927, 934, 936, 991, 1016, 1094, 1106, 1121, 1165, 1166, 1213, 1214, 1395, 1404, 1422], "taken": [600, 741, 859, 1232, 1347], "talkin": [759, 1365], "tan": [869, 1404, 1425], "tand": 1425, "tangent": [392, 393, 770, 771, 869, 1012, 1013, 1376, 1377, 1404, 1429], "tanh": [281, 357, 869, 1404], "target": [1, 40, 41, 42, 43, 63, 156, 266, 319, 357, 722, 737, 738, 751, 753, 754, 859, 922, 991, 997, 1328, 1343, 1344, 1357, 1359, 1360, 1427], "target_alia": [41, 357], "target_t": [40, 357], "task": [65, 892, 991], "tau": [519, 520, 869, 1150, 1151, 1404], "tb": [175, 177, 231, 357, 431, 1149, 1404], "tbl": [97, 139, 141, 152, 1434], "tbl0": 1419, "tbl1": [1417, 1419], "tbl2": [1417, 1419], "tbl3": 1417, "tbl4": 1417, "tbl_cell_numeric_align": [9, 12, 29], "tbl_col": 19, "tbl_format": [22, 207], "tbl_hide_column_data_typ": 22, "tbl_hide_dataframe_shap": 22, "tbl_row": [27, 223, 357, 897, 991], "tbl_width_char": 812, "td": 503, "td1": 997, "td2": 997, "td3": 997, "tdf": [280, 357], "technic": 865, "tell": [715, 739, 1321, 1345], "tempor": [42, 102, 216, 245, 257, 289, 291, 292, 311, 357, 375, 430, 452, 503, 550, 676, 680, 682, 684, 686, 688, 691, 693, 695, 826, 869, 881, 888, 911, 938, 991, 997, 1049, 1076, 1131, 1179, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1425, 1431], "temporalliter": [452, 826, 827, 869, 1076, 1110, 1111, 1404], "temporari": [40, 357], "temporarili": [188, 207, 245, 289, 357, 676, 869, 911, 938, 991], "tenant": 35, "tenant_id": 35, "tend": [175, 177], "tensor": [319, 357, 1387, 1404], "tensordataset": [319, 357], "term": [519, 521, 522, 728, 741, 752, 869, 1150, 1152, 1153, 1334, 1347, 1358, 1404], "termin": [39, 49, 357, 991], "terminologi": 201, "test": [0, 40, 153, 154, 156, 162, 168, 230, 281, 357, 881, 1148, 1404, 1427], "test1": 1419, "test2": 1419, "test3": 1419, "test_1": [281, 357], "test_1_math": [281, 357], "test_1_phys": [281, 357], "test_2": [281, 357], "test_2_math": [281, 357], "test_2_phys": [281, 357], "test_data": 153, "test_df_height": 182, "test_func": 829, "test_lf": [962, 991], "test_miscellan": 1435, "test_numer": 1435, "test_price_calcul": 1435, "test_series_len": 186, "test_tabl": 154, "test_unique_xyz": 180, "testdb": 154, "testing1234": 1419, "text": [150, 153, 200, 447, 448, 551, 720, 728, 732, 733, 734, 737, 738, 740, 741, 752, 849, 869, 934, 991, 1067, 1068, 1180, 1334, 1338, 1339, 1346, 1347, 1358, 1404, 1419, 1435], "text1": 738, "text2": 738, "textclaus": 153, "texttt": [707, 869, 1314, 1404], "th": [239, 357, 537, 582, 595, 707, 728, 752, 869, 909, 991, 1166, 1214, 1227, 1314, 1334, 1358, 1404, 1427], "than": [42, 49, 50, 51, 52, 55, 105, 128, 136, 138, 151, 152, 153, 156, 162, 166, 172, 217, 244, 257, 259, 260, 265, 279, 290, 291, 293, 325, 343, 357, 447, 533, 535, 538, 540, 550, 565, 594, 613, 614, 615, 631, 663, 675, 698, 707, 728, 732, 735, 736, 744, 752, 761, 798, 829, 830, 859, 869, 893, 910, 915, 916, 921, 946, 974, 991, 1067, 1179, 1226, 1246, 1267, 1279, 1301, 1314, 1334, 1338, 1341, 1342, 1350, 1358, 1367, 1384, 1404, 1435], "the_aws_access_key_id": [41, 155, 167, 168, 357], "the_aws_region": [41, 357], "the_aws_secret_access_kei": [41, 155, 167, 168, 357], "thei": [39, 42, 49, 57, 65, 66, 98, 99, 135, 146, 148, 153, 166, 190, 207, 260, 262, 264, 292, 357, 656, 699, 739, 747, 748, 869, 891, 903, 916, 932, 945, 991, 995, 997, 1303, 1345, 1404], "them": [65, 132, 134, 135, 136, 138, 153, 154, 156, 160, 161, 162, 163, 166, 169, 170, 171, 207, 232, 233, 245, 260, 261, 273, 281, 289, 319, 327, 357, 408, 520, 550, 585, 648, 649, 656, 676, 796, 807, 808, 810, 811, 856, 857, 869, 892, 904, 911, 916, 917, 927, 938, 991, 997, 1028, 1151, 1156, 1217, 1255, 1256, 1404, 1422, 1432], "then1": 859, "then2": 859, "therebi": [166, 169, 170], "therefor": [55, 151, 157, 161, 163, 231, 357, 1149, 1404], "theta": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "thi": [1, 4, 5, 10, 12, 14, 16, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 64, 65, 66, 72, 73, 74, 75, 80, 90, 97, 99, 106, 131, 132, 134, 135, 136, 137, 138, 139, 141, 142, 143, 144, 145, 146, 147, 148, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 192, 193, 194, 195, 196, 197, 201, 203, 207, 209, 211, 212, 214, 215, 218, 219, 221, 223, 224, 227, 228, 231, 233, 237, 238, 243, 244, 245, 246, 250, 252, 254, 255, 256, 257, 259, 260, 261, 262, 264, 265, 266, 267, 269, 271, 272, 273, 274, 276, 277, 279, 281, 282, 283, 284, 285, 286, 287, 289, 290, 291, 292, 293, 295, 296, 297, 298, 300, 302, 304, 305, 306, 309, 311, 314, 315, 316, 319, 320, 321, 322, 324, 325, 326, 327, 328, 329, 331, 332, 333, 334, 338, 343, 356, 357, 360, 361, 369, 370, 375, 383, 386, 387, 396, 408, 416, 417, 418, 423, 425, 442, 443, 446, 452, 462, 463, 465, 470, 471, 472, 482, 484, 490, 491, 493, 497, 500, 503, 514, 518, 525, 534, 535, 542, 544, 547, 548, 550, 551, 555, 577, 578, 585, 594, 595, 596, 597, 598, 599, 601, 607, 611, 612, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 629, 630, 633, 638, 641, 643, 645, 648, 649, 651, 656, 663, 666, 667, 668, 669, 670, 671, 672, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 700, 701, 702, 703, 708, 709, 710, 713, 715, 722, 725, 727, 729, 734, 735, 736, 739, 746, 747, 748, 749, 750, 755, 759, 761, 763, 766, 773, 774, 776, 777, 778, 779, 783, 787, 792, 793, 794, 795, 796, 798, 799, 800, 801, 802, 815, 816, 818, 820, 821, 824, 825, 826, 827, 829, 830, 833, 835, 838, 840, 842, 846, 847, 850, 854, 858, 859, 860, 865, 869, 881, 885, 886, 887, 890, 891, 892, 893, 894, 895, 897, 898, 900, 901, 902, 903, 907, 910, 911, 913, 915, 916, 917, 919, 921, 922, 926, 927, 931, 932, 934, 935, 936, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 953, 954, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 969, 974, 988, 989, 990, 991, 995, 996, 997, 999, 1006, 1007, 1016, 1028, 1035, 1036, 1037, 1042, 1044, 1061, 1062, 1065, 1071, 1076, 1077, 1087, 1088, 1094, 1095, 1096, 1098, 1106, 1108, 1118, 1119, 1121, 1125, 1128, 1131, 1142, 1144, 1147, 1149, 1155, 1156, 1164, 1166, 1168, 1172, 1174, 1180, 1185, 1194, 1209, 1210, 1217, 1226, 1227, 1228, 1229, 1230, 1231, 1233, 1239, 1244, 1246, 1247, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1258, 1261, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1301, 1302, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1315, 1316, 1318, 1319, 1321, 1328, 1331, 1333, 1335, 1336, 1340, 1341, 1342, 1345, 1352, 1353, 1354, 1361, 1365, 1367, 1368, 1370, 1373, 1374, 1378, 1380, 1382, 1383, 1384, 1385, 1387, 1388, 1389, 1390, 1392, 1393, 1394, 1404, 1409, 1413, 1414, 1415, 1419, 1427, 1430, 1431, 1432, 1433, 1435], "thing": [166, 173], "think": [490, 491, 1118, 1119], "third": [614, 869], "thoma": [273, 357, 927, 991], "those": [5, 32, 42, 151, 156, 236, 285, 292, 316, 326, 357, 533, 666, 722, 830, 869, 884, 935, 957, 991, 997, 1269, 1328, 1385, 1404], "though": [40, 151, 153, 245, 357, 865, 911, 991], "thought": 859, "thousand": [9, 29], "thousands_separ": [9, 12, 29], "thread": [16, 39, 49, 65, 141, 151, 152, 154, 188, 189, 303, 357, 577, 615, 710, 791, 869, 892, 948, 991, 1037, 1209, 1233, 1316, 1404], "thread_loc": [615, 869], "thread_pool_s": 189, "three": [42, 212, 289, 318, 357, 463, 663, 676, 699, 728, 737, 752, 869, 938, 991, 1041, 1088, 1238, 1267, 1334, 1344, 1358, 1404], "threshold": [295, 357, 940, 991], "through": [153, 266, 281, 357, 865, 922, 991, 997, 1404, 1419], "throughout": 207, "throw": [41, 134, 135, 138, 225, 286, 357, 730, 731, 888, 899, 936, 991, 1336, 1337, 1404], "thu": [42, 233, 357, 360, 798, 995, 1156, 1404], "thursdai": [245, 357, 470, 482, 793, 911, 991, 1094, 1106], "ti": [666, 869, 1269, 1404], "time": [10, 14, 39, 41, 44, 48, 49, 50, 51, 52, 55, 63, 64, 65, 73, 75, 115, 155, 161, 163, 164, 166, 167, 169, 170, 171, 182, 183, 186, 197, 223, 233, 245, 260, 261, 289, 327, 357, 442, 443, 471, 472, 474, 475, 476, 479, 480, 490, 491, 493, 496, 497, 498, 500, 502, 503, 511, 514, 520, 572, 606, 675, 676, 680, 682, 684, 686, 688, 691, 693, 695, 703, 751, 754, 758, 772, 773, 774, 796, 797, 807, 808, 809, 810, 811, 812, 818, 826, 856, 857, 869, 891, 892, 897, 911, 916, 917, 932, 938, 991, 997, 1061, 1062, 1095, 1096, 1098, 1099, 1103, 1104, 1121, 1124, 1125, 1126, 1128, 1130, 1131, 1139, 1142, 1151, 1156, 1204, 1279, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1310, 1357, 1360, 1364, 1386, 1388, 1389, 1404, 1413, 1419, 1428, 1435], "time_column": [327, 357], "time_format": [39, 49, 357, 991], "time_unit": [73, 75, 472, 474, 480, 502, 514, 754, 809, 810, 811, 812, 818, 996, 997, 1096, 1098, 1104, 1130, 1142, 1360], "time_unit_m": [472, 1096], "time_unit_n": [472, 1096], "time_unit_u": 514, "time_zon": [73, 475, 477, 497, 754, 809, 810, 811, 996, 997, 1095, 1099, 1103, 1125, 1360], "timedelta": [245, 260, 289, 327, 357, 493, 498, 503, 511, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 807, 808, 810, 811, 856, 857, 869, 911, 916, 938, 991, 996, 997, 1109, 1115, 1121, 1126, 1139, 1151, 1255, 1256, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1318, 1394, 1404], "timeout": [65, 892, 991], "timestamp": [139, 155, 167, 245, 357, 497, 498, 511, 818, 911, 991, 1125, 1126, 1139, 1425], "timestamp_m": 502, "timestamp_n": 1130, "timestamp_u": [502, 1130], "timestep": 818, "timeunit": [39, 49, 73, 75, 357, 472, 474, 502, 509, 514, 754, 809, 810, 811, 812, 991, 997, 1096, 1098, 1130, 1137, 1142, 1360], "timezon": [56, 73, 155, 167, 477, 997, 1428], "tip": [615, 869], "titl": [42, 357, 360, 1404, 1409, 1413], "titlecas": [759, 1365], "tm": [474, 503, 997, 1428], "to_arrow": [258, 357, 1384, 1404, 1432], "to_batch": [258, 357], "to_dict": [216, 292, 357, 888, 991, 997], "to_dtype_expr": [364, 365, 367, 368, 375], "to_dummi": [314, 319, 357, 1404], "to_fram": [446, 480, 498, 502, 511, 751, 996, 1088, 1267, 1302, 1304, 1349, 1350, 1357, 1404, 1409], "to_init_repr": [139, 357, 1404], "to_jax": [319, 357, 1404], "to_list": [139, 289, 357, 1320, 1332, 1404], "to_lowercas": 647, "to_numpi": [314, 319, 357, 614, 869, 1404], "to_panda": [357, 1404], "to_phys": [869, 1404], "to_python": 996, "to_seri": [59, 240, 357, 751, 792, 843, 1357, 1427], "to_signed_integ": 375, "to_sql": [40, 357], "to_str": [500, 1128], "to_struct": [357, 723], "to_torch": [314, 357, 1404], "to_unsigned_integ": 375, "to_uppercas": [382, 646, 724, 869], "togeth": [261, 357, 917, 991, 1427], "token": [39, 44, 48, 49, 50, 51, 52, 161, 163, 164, 166, 168, 169, 170, 171, 192, 197, 357, 991], "tokyo": [139, 997], "tokyo_tz": 997, "toler": [175, 176, 177, 178, 260, 357, 551, 869, 916, 991, 1180, 1404], "tone": [42, 357], "tonight": [715, 739, 1321, 1345], "too": [16, 281, 357, 656, 869, 991], "tooltip": [357, 360, 1404, 1409], "toomanyrowsreturnederror": [290, 357], "top": [42, 304, 320, 357, 360, 774, 869, 949, 953, 991, 1404, 1409, 1432], "top_col": [42, 357], "top_k": [215, 357, 442, 443, 774, 869, 886, 991, 1061, 1062, 1389, 1404], "top_k_bi": [442, 443, 773, 869, 1061, 1062, 1388, 1404], "top_row": [42, 357], "tor_id": 139, "torch": [174, 319, 357, 1387, 1404], "torchexporttyp": [319, 357], "total": [42, 231, 338, 357, 504, 505, 506, 507, 508, 509, 510, 566, 587, 869, 969, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1149, 1198, 1219, 1404], "total_gross": 1413, "toward": [338, 566, 587, 869, 969, 1198, 1219, 1404], "tp": [1, 61], "tpu": [314, 357, 1382, 1404], "tr15": [734, 1340], "trace": 76, "traceback": [175, 176, 177, 178, 315, 357, 671, 869, 1275, 1384, 1404], "tracebacktyp": 1432, "track": [155, 167, 168, 265, 357, 1432], "trail": [30, 243, 357, 746, 747, 1352, 1353], "train": [319, 357], "train_lf": [962, 991], "transfer": 154, "transferencod": [427, 428, 717, 718, 1046, 1047, 1323, 1324], "transform": [265, 304, 357, 614, 759, 848, 869, 949, 991, 1365], "transform_dens": [1404, 1409], "transit": [236, 285, 357, 907, 935, 991], "translat": 153, "transpar": [891, 903, 932, 945, 991], "transpos": [281, 357, 375], "travel": [155, 167], "travers": [679, 681, 683, 685, 687, 690, 692, 694, 869, 1282, 1284, 1288, 1293, 1295, 1297, 1404], "treat": [151, 152, 166, 209, 403, 520, 555, 573, 714, 716, 726, 737, 738, 859, 869, 999, 1023, 1151, 1185, 1205, 1320, 1322, 1332, 1343, 1344, 1404], "tree": [631, 903, 991], "tree_format": [903, 991], "trend": [42, 357], "tri": [265, 357, 614, 615, 829, 830, 869], "triangl": [343, 974], "trigger": [41, 148, 262, 316, 357, 869, 1385, 1404], "trigonometri": [1425, 1431], "trim": [139, 1427], "trim_decimal_zero": 30, "trip": 153, "true": [7, 8, 17, 18, 20, 21, 22, 23, 24, 25, 26, 27, 29, 30, 31, 32, 39, 40, 41, 42, 48, 49, 50, 51, 52, 53, 55, 64, 65, 66, 97, 132, 133, 134, 135, 137, 138, 139, 141, 142, 147, 148, 151, 152, 153, 155, 156, 157, 159, 162, 163, 166, 167, 168, 169, 171, 172, 175, 176, 177, 178, 179, 180, 182, 183, 185, 186, 192, 207, 211, 216, 217, 218, 223, 225, 230, 235, 236, 238, 240, 242, 243, 244, 245, 252, 253, 254, 257, 259, 260, 261, 262, 264, 269, 270, 276, 277, 279, 281, 282, 285, 286, 290, 291, 292, 293, 303, 304, 307, 310, 312, 314, 315, 316, 319, 321, 322, 323, 325, 326, 327, 331, 337, 339, 341, 344, 345, 346, 347, 348, 349, 350, 357, 360, 375, 381, 382, 383, 384, 385, 386, 397, 399, 400, 403, 407, 408, 418, 422, 426, 427, 429, 432, 433, 438, 441, 443, 444, 445, 449, 457, 458, 459, 460, 461, 463, 470, 472, 475, 478, 480, 482, 483, 490, 491, 493, 494, 497, 498, 499, 502, 504, 505, 506, 507, 508, 509, 510, 511, 513, 514, 516, 517, 518, 519, 521, 522, 529, 536, 538, 539, 540, 541, 544, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 568, 569, 573, 581, 583, 585, 601, 606, 613, 614, 615, 619, 620, 621, 622, 623, 624, 625, 626, 627, 630, 631, 632, 650, 651, 653, 655, 658, 659, 663, 668, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 702, 703, 707, 709, 710, 713, 714, 715, 716, 717, 719, 725, 726, 727, 729, 730, 731, 737, 738, 742, 743, 745, 751, 753, 754, 756, 758, 762, 764, 765, 774, 776, 779, 782, 783, 784, 785, 786, 788, 791, 792, 793, 794, 798, 800, 807, 810, 816, 822, 826, 827, 829, 830, 834, 839, 840, 843, 847, 848, 851, 853, 856, 859, 860, 869, 888, 889, 890, 891, 892, 893, 897, 899, 903, 906, 907, 910, 911, 915, 916, 917, 919, 921, 926, 932, 935, 936, 945, 946, 948, 949, 954, 955, 956, 957, 960, 966, 968, 970, 972, 975, 976, 977, 978, 979, 980, 981, 990, 991, 996, 997, 1004, 1005, 1017, 1019, 1020, 1023, 1027, 1028, 1037, 1045, 1046, 1048, 1051, 1063, 1064, 1069, 1071, 1074, 1075, 1088, 1094, 1095, 1096, 1099, 1102, 1103, 1104, 1105, 1106, 1107, 1111, 1112, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1125, 1126, 1127, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1145, 1147, 1148, 1150, 1152, 1153, 1160, 1170, 1174, 1176, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1195, 1200, 1201, 1205, 1213, 1215, 1217, 1233, 1246, 1252, 1258, 1260, 1263, 1264, 1267, 1270, 1271, 1280, 1283, 1285, 1287, 1289, 1291, 1292, 1294, 1296, 1298, 1314, 1316, 1319, 1320, 1321, 1322, 1323, 1325, 1331, 1332, 1333, 1335, 1336, 1337, 1343, 1344, 1348, 1349, 1351, 1357, 1359, 1360, 1362, 1364, 1379, 1384, 1385, 1393, 1395, 1404, 1409, 1413, 1414, 1416, 1418, 1422, 1424, 1427, 1432, 1435], "truediv": [533, 869], "truncat": [22, 139, 151, 152, 166, 243, 245, 257, 291, 292, 311, 357, 911, 932, 991, 1431], "truncate_nod": [932, 991], "truncate_ragged_lin": [151, 152, 166], "truncate_str": 511, "truncate_td": 511, "trust": [465, 869, 898, 991], "truth": 606, "try": [39, 44, 48, 49, 50, 51, 52, 64, 125, 151, 152, 157, 161, 163, 164, 166, 169, 170, 171, 197, 357, 859, 891, 903, 932, 945, 991], "try_cast": 1425, "try_parse_d": [141, 151, 152, 166], "try_parse_hive_d": [163, 169, 171], "ts_local": [497, 1125], "tseri": [490, 491, 1118, 1119], "tstamp": 997, "tstamp_tokyo": 997, "tstamp_utc": 997, "tue": [357, 360], "tuesdai": [245, 357, 911, 991], "tupl": [42, 67, 154, 156, 162, 212, 213, 257, 265, 279, 290, 291, 292, 299, 319, 335, 357, 630, 672, 869, 932, 945, 991, 996, 997, 1276, 1306, 1404], "turn": [8, 64, 151, 152, 166, 259, 260, 357, 702, 869, 891, 903, 915, 916, 921, 932, 991], "twice": [42, 357], "two": [42, 57, 98, 99, 134, 136, 138, 154, 212, 236, 238, 260, 261, 272, 273, 285, 291, 318, 324, 337, 343, 357, 361, 381, 467, 474, 533, 536, 539, 551, 606, 663, 709, 789, 790, 796, 798, 800, 807, 810, 844, 845, 848, 869, 907, 916, 917, 926, 927, 935, 956, 968, 974, 991, 997, 1041, 1091, 1098, 1180, 1238, 1267, 1404, 1419, 1420, 1421, 1424, 1433], "two_a": 1432, "tworld": [748, 1352, 1354], "txt": [1, 14, 166, 714, 726, 1332, 1427], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 41, 42, 56, 59, 60, 61, 62, 64, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 132, 134, 135, 136, 137, 138, 140, 151, 152, 153, 155, 156, 160, 161, 162, 163, 166, 167, 168, 169, 170, 171, 174, 175, 176, 177, 178, 179, 181, 182, 183, 184, 186, 190, 209, 212, 213, 219, 229, 232, 238, 243, 245, 246, 258, 259, 265, 289, 294, 297, 309, 314, 315, 318, 319, 322, 334, 357, 375, 383, 385, 388, 389, 390, 391, 392, 393, 396, 401, 402, 403, 405, 408, 421, 422, 426, 427, 428, 429, 430, 431, 432, 444, 446, 447, 448, 452, 453, 454, 455, 456, 463, 464, 470, 471, 473, 475, 476, 477, 478, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 520, 523, 525, 536, 539, 542, 550, 551, 552, 553, 554, 555, 556, 557, 566, 570, 571, 573, 578, 585, 587, 605, 606, 629, 663, 665, 669, 670, 671, 672, 674, 675, 676, 680, 682, 684, 686, 688, 691, 693, 695, 704, 705, 706, 713, 716, 717, 718, 721, 722, 723, 724, 727, 728, 729, 731, 732, 733, 741, 742, 743, 744, 751, 752, 756, 770, 771, 772, 779, 788, 796, 799, 806, 807, 808, 809, 810, 811, 812, 814, 822, 823, 825, 826, 827, 828, 829, 830, 840, 843, 855, 856, 857, 860, 865, 869, 881, 882, 891, 902, 903, 904, 911, 915, 932, 938, 939, 945, 954, 964, 991, 996, 997, 999, 1004, 1005, 1017, 1019, 1020, 1021, 1022, 1023, 1025, 1027, 1028, 1030, 1040, 1041, 1042, 1045, 1046, 1047, 1049, 1050, 1063, 1065, 1067, 1068, 1076, 1088, 1089, 1094, 1095, 1097, 1099, 1100, 1101, 1102, 1103, 1105, 1106, 1107, 1108, 1112, 1113, 1114, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1148, 1151, 1155, 1172, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1200, 1201, 1202, 1203, 1205, 1210, 1217, 1219, 1237, 1238, 1260, 1267, 1273, 1274, 1275, 1276, 1278, 1279, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1309, 1311, 1319, 1320, 1322, 1323, 1324, 1326, 1327, 1328, 1329, 1330, 1333, 1334, 1335, 1337, 1338, 1339, 1347, 1348, 1349, 1350, 1357, 1358, 1362, 1383, 1384, 1386, 1395, 1404, 1413, 1420, 1425, 1427, 1431, 1432], "type_coercion": [64, 891, 903, 932, 945, 991], "type_json": 199, "type_nam": 199, "type_text": 199, "typeerror": [41, 213, 357], "typenam": [42, 357], "typic": [135, 153, 171, 265, 357, 479, 704, 869, 997, 1103, 1246, 1311, 1404], "tz": [754, 1360], "tzinfo": [73, 155, 167, 997], "u": [42, 73, 75, 171, 184, 260, 357, 472, 474, 480, 502, 514, 751, 754, 784, 786, 809, 810, 811, 812, 818, 916, 991, 996, 997, 1096, 1098, 1104, 1130, 1142, 1357, 1360, 1417, 1428], "u1": [315, 357], "u16": [166, 1430, 1435], "u32": [14, 153, 214, 216, 222, 278, 333, 334, 338, 342, 348, 350, 357, 364, 365, 375, 381, 387, 394, 395, 396, 397, 398, 401, 402, 404, 410, 415, 431, 447, 448, 456, 457, 544, 546, 566, 570, 571, 574, 587, 592, 638, 654, 666, 674, 675, 680, 682, 684, 686, 688, 691, 693, 695, 699, 716, 726, 727, 732, 733, 734, 772, 777, 779, 783, 787, 791, 792, 799, 801, 822, 825, 838, 846, 869, 885, 888, 896, 929, 963, 964, 969, 973, 979, 981, 991, 997, 1016, 1017, 1018, 1021, 1022, 1024, 1030, 1034, 1063, 1067, 1068, 1082, 1174, 1202, 1203, 1206, 1219, 1224, 1269, 1278, 1279, 1303, 1322, 1332, 1333, 1338, 1339, 1386, 1391, 1393, 1404, 1413, 1421, 1422, 1423, 1427, 1432], "u64": [246, 357, 542, 668, 869, 932, 991, 997, 1172, 1271, 1404], "u8": [216, 312, 313, 325, 357, 671, 782, 869, 888, 991, 997, 1275, 1379, 1404, 1435], "udf": [188, 264, 265, 280, 343, 357, 465, 614, 615, 660, 829, 830, 869, 898, 921, 930, 974, 991, 1246, 1404], "ufunc": 105, "uid": 153, "uint": 1435, "uint16": [166, 460, 461, 768, 869, 997, 1085, 1086, 1374, 1384, 1387, 1404], "uint2": 1430, "uint32": [140, 174, 216, 231, 289, 334, 357, 375, 396, 401, 402, 431, 447, 448, 456, 520, 536, 539, 566, 570, 571, 587, 669, 674, 675, 676, 680, 682, 684, 686, 688, 691, 693, 695, 716, 727, 732, 733, 772, 799, 822, 825, 869, 888, 938, 964, 991, 997, 1017, 1021, 1022, 1030, 1050, 1063, 1067, 1068, 1149, 1151, 1202, 1203, 1219, 1273, 1278, 1279, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1322, 1333, 1338, 1339, 1386, 1387, 1404], "uint4": 1432, "uint64": [140, 246, 289, 334, 357, 401, 402, 520, 542, 570, 571, 668, 676, 680, 682, 684, 686, 688, 691, 693, 695, 869, 938, 964, 991, 997, 1021, 1022, 1151, 1172, 1202, 1203, 1271, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1387, 1404], "uint8": [153, 216, 313, 314, 315, 325, 357, 460, 461, 671, 768, 782, 869, 888, 991, 996, 997, 1085, 1086, 1275, 1374, 1387, 1404, 1435], "uint8_pair": 1435, "uit": [741, 1347], "uk": [723, 1329], "unabl": [107, 156], "unalias": 621, "unari": [652, 869], "unbias": [521, 522, 869, 1152, 1153, 1404], "unchang": [231, 357, 670, 772, 869, 921, 974, 991, 1149, 1274, 1386, 1404], "uncompress": [37, 44, 45, 48, 50, 52, 157, 169, 357, 991], "undefin": [151, 775, 869], "under": [39, 44, 48, 49, 50, 51, 52, 57, 59, 60, 61, 62, 98, 99, 161, 163, 164, 166, 169, 170, 171, 195, 196, 197, 281, 304, 357, 371, 373, 374, 861, 862, 864, 865, 870, 871, 874, 876, 877, 878, 949, 991, 1396, 1398, 1400, 1405, 1410, 1411, 1412], "underestim": [231, 357, 1149, 1404], "underli": [1, 57, 72, 73, 75, 90, 99, 104, 114, 132, 134, 135, 136, 138, 153, 154, 156, 160, 161, 162, 163, 168, 170, 179, 182, 186, 232, 233, 257, 258, 291, 309, 315, 357, 427, 472, 473, 474, 478, 481, 483, 484, 485, 486, 487, 488, 489, 492, 494, 495, 497, 499, 503, 512, 513, 514, 515, 668, 696, 714, 717, 726, 869, 904, 991, 997, 1046, 1096, 1097, 1098, 1102, 1105, 1107, 1108, 1112, 1113, 1114, 1116, 1117, 1120, 1122, 1123, 1125, 1127, 1131, 1140, 1141, 1142, 1143, 1156, 1271, 1299, 1309, 1320, 1323, 1332, 1378, 1384, 1404, 1432], "understood": 830, "undo": [632, 639], "unexpect": [114, 123, 153, 236, 285, 357, 907, 935, 991, 1246, 1404], "unformat": [42, 357], "unhelpfulli": [175, 177], "unicod": [22, 448, 728, 733, 734, 741, 752, 997, 1068, 1334, 1339, 1340, 1347, 1358, 1427], "unicodeform": [734, 1340], "unifi": [42, 314, 319, 357, 997], "uniform": [42, 357, 544, 663, 869, 1174, 1267, 1404], "unimod": [707, 869, 1314, 1404], "union": [64, 66, 598, 891, 903, 932, 945, 991, 997, 1230, 1431, 1432], "uniqu": [48, 52, 58, 76, 148, 156, 179, 180, 181, 184, 186, 214, 254, 259, 277, 281, 292, 348, 357, 387, 398, 415, 463, 562, 592, 638, 663, 751, 753, 754, 758, 777, 779, 787, 838, 869, 885, 915, 979, 991, 1007, 1018, 1034, 1088, 1193, 1224, 1253, 1267, 1357, 1359, 1360, 1364, 1391, 1393, 1404, 1420, 1422], "unique_column_valu": [281, 357], "unique_count": [869, 1404], "uniquekeepstrategi": [322, 357, 954, 991], "unit": [42, 73, 75, 148, 175, 176, 177, 178, 182, 186, 231, 357, 431, 472, 474, 480, 496, 502, 514, 520, 526, 612, 614, 627, 751, 754, 778, 795, 809, 810, 811, 812, 818, 829, 830, 869, 932, 991, 997, 1050, 1096, 1098, 1104, 1124, 1130, 1142, 1149, 1151, 1157, 1244, 1357, 1360, 1392, 1404, 1435], "uniti": [192, 193, 195, 196, 197, 205, 881], "unity_catalog": 200, "univers": [209, 999], "unix": [72, 73, 480, 511, 818, 1104, 1139], "unknown": [722, 828, 1328], "unless": [42, 58, 134, 151, 259, 264, 314, 319, 357, 375, 746, 747, 843, 893, 915, 991, 1352, 1427], "unlik": [147, 245, 326, 357, 884, 911, 957, 991], "unnam": [724, 1330], "unnest": [147, 357, 463, 663, 674, 723, 724, 743, 744, 764, 766, 779, 859, 869, 991, 1041, 1088, 1238, 1267, 1278, 1349, 1350, 1404, 1425, 1431], "unpivot": [272, 357, 926, 991], "unregist": [1415, 1416, 1417, 1432, 1434], "unsaf": [148, 869], "unset": [40, 163, 169, 181, 342, 357, 435, 436, 437, 439, 440, 497, 869, 973, 1054, 1055, 1056, 1058, 1059, 1125, 1404, 1413], "unsign": [91, 92, 93, 94, 375, 668, 869, 997, 1271, 1404], "unsigned_integ": 997, "unstabl": [10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 64, 65, 74, 80, 129, 131, 142, 143, 144, 145, 146, 147, 153, 154, 155, 161, 163, 164, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 203, 266, 304, 314, 319, 326, 357, 360, 361, 369, 370, 375, 462, 463, 470, 482, 544, 615, 663, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 695, 755, 793, 795, 846, 869, 891, 892, 893, 903, 922, 931, 932, 945, 946, 949, 957, 965, 991, 997, 1071, 1087, 1088, 1094, 1106, 1174, 1267, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1296, 1298, 1382, 1387, 1404, 1409], "unstack": 357, "unstackdirect": [325, 357], "unsuit": 130, "unsupport": [41, 213, 357, 884], "until": [49, 50, 51, 52, 97, 98, 245, 262, 357, 735, 736, 761, 893, 911, 946, 991, 1341, 1342, 1367], "untrust": 172, "up": [12, 42, 89, 154, 257, 260, 281, 291, 292, 298, 311, 357, 451, 452, 615, 728, 737, 738, 752, 869, 915, 916, 921, 943, 991, 997, 1073, 1334, 1343, 1344, 1358, 1404], "upcast": [56, 266, 357, 386, 869, 922, 991], "upcast_integer_typ": [1, 61], "updat": [41, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 207, 223, 357, 897, 991], "updated_at": [198, 201, 202], "updated_bi": [198, 201, 202], "upgrad": 110, "upheld": [921, 991], "upon": 152, "upper": [151, 152, 153, 231, 245, 357, 452, 544, 550, 606, 641, 778, 788, 807, 808, 810, 811, 826, 827, 856, 857, 869, 911, 991, 1076, 1149, 1174, 1179, 1244, 1392, 1404, 1422, 1425], "upper_bound": [245, 357, 452, 550, 606, 869, 911, 991, 1076, 1179, 1244, 1404], "uppercas": [647, 760, 1366, 1427], "upsampl": [245, 357, 911, 991], "urandom": [431, 1050], "uri": [40, 41, 153, 154, 155, 167, 168, 357], "url": [153, 154, 163, 169, 171, 192, 722, 724, 1328, 1330], "urllib": 154, "us": [1, 7, 9, 10, 11, 13, 14, 16, 22, 27, 29, 34, 35, 36, 38, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 55, 57, 58, 64, 65, 66, 67, 73, 89, 98, 99, 102, 106, 129, 133, 135, 136, 138, 140, 145, 147, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 166, 167, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 188, 190, 192, 213, 214, 215, 216, 219, 223, 225, 227, 228, 234, 235, 236, 238, 244, 245, 252, 254, 256, 257, 258, 260, 261, 264, 265, 272, 276, 277, 279, 280, 281, 285, 289, 290, 291, 292, 293, 295, 296, 298, 303, 304, 305, 309, 311, 312, 313, 314, 315, 316, 319, 320, 321, 322, 324, 325, 326, 327, 328, 331, 332, 333, 334, 336, 343, 357, 360, 375, 381, 383, 385, 387, 396, 397, 422, 427, 428, 430, 443, 445, 447, 448, 449, 452, 462, 465, 468, 469, 477, 496, 497, 498, 500, 503, 511, 514, 516, 519, 520, 521, 522, 523, 527, 528, 529, 533, 548, 549, 550, 563, 577, 594, 602, 606, 608, 614, 615, 618, 656, 662, 663, 666, 668, 670, 672, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 698, 700, 702, 703, 707, 709, 710, 712, 713, 714, 715, 717, 718, 719, 721, 722, 723, 725, 726, 727, 730, 731, 732, 733, 734, 737, 738, 739, 741, 743, 745, 747, 748, 749, 750, 751, 753, 754, 755, 758, 761, 762, 766, 768, 774, 780, 781, 783, 784, 785, 786, 787, 790, 791, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 816, 818, 822, 823, 825, 826, 828, 829, 830, 831, 832, 834, 836, 837, 840, 843, 844, 845, 846, 847, 848, 850, 851, 852, 853, 856, 857, 858, 859, 860, 865, 868, 869, 880, 881, 884, 885, 886, 887, 888, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 905, 906, 907, 910, 911, 916, 917, 919, 926, 931, 932, 935, 938, 939, 940, 941, 943, 945, 946, 948, 949, 950, 953, 954, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 974, 991, 995, 996, 997, 1004, 1005, 1007, 1037, 1041, 1046, 1047, 1049, 1062, 1067, 1068, 1071, 1087, 1089, 1092, 1093, 1101, 1110, 1111, 1124, 1125, 1126, 1128, 1131, 1139, 1142, 1145, 1150, 1151, 1152, 1153, 1158, 1159, 1165, 1171, 1178, 1179, 1195, 1209, 1211, 1226, 1233, 1238, 1246, 1266, 1267, 1269, 1271, 1274, 1276, 1278, 1279, 1280, 1281, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1301, 1302, 1304, 1305, 1308, 1314, 1316, 1318, 1319, 1320, 1321, 1323, 1324, 1327, 1328, 1329, 1331, 1332, 1333, 1338, 1339, 1340, 1343, 1344, 1345, 1347, 1349, 1357, 1359, 1360, 1361, 1364, 1367, 1374, 1378, 1379, 1381, 1384, 1385, 1389, 1394, 1404, 1413, 1414, 1415, 1416, 1417, 1419, 1420, 1427, 1428, 1432, 1434, 1435], "usag": [182, 186, 301, 357, 859, 997, 1309, 1404], "usd": [243, 357, 1435], "use_abs_path": 148, "use_metadata_statist": 168, "use_pyarrow": [48, 52, 151, 155, 157, 159, 163, 167, 315, 357, 991, 1384, 1404], "use_pyarrow_extension_arrai": [316, 357, 1385, 1404], "use_pyarrow_write_to_dataset": [48, 357], "use_statist": [163, 171], "user": [40, 146, 148, 153, 154, 172, 209, 264, 265, 280, 343, 357, 615, 660, 700, 802, 816, 830, 842, 869, 930, 946, 974, 991, 995, 999, 1246, 1305, 1404], "user_conn": 153, "userid": 369, "usernam": [151, 154, 157, 159], "userwarn": 1, "usr": 153, "usual": [106, 154, 207, 319, 357, 471, 1095], "utc": [155, 167, 471, 475, 477, 479, 497, 751, 754, 996, 997, 1095, 1099, 1103, 1125, 1357, 1360], "utc_tz": 997, "utf": [39, 49, 88, 357, 991], "utf8": [22, 151, 152, 166, 728, 741, 752, 1334, 1347, 1358], "utf8_borders_onli": 22, "utf8_ful": [22, 58, 139], "utf8_full_condens": [7, 22, 139], "utf8_horizontal_onli": 22, "utf8_no_bord": 22, "util": [319, 357, 818, 991], "uvloop": 153, "uvw": [723, 1329], "v": [8, 9, 11, 48, 231, 357, 699, 784, 786, 869, 1303, 1404, 1416, 1417], "v1": 34, "v2": [8, 11, 157, 169], "val": [42, 288, 357, 615, 660, 772, 859, 869, 937, 991], "valid": [39, 42, 49, 73, 97, 146, 151, 152, 153, 157, 159, 163, 166, 186, 207, 225, 231, 259, 260, 286, 357, 462, 714, 716, 722, 723, 724, 726, 731, 737, 738, 859, 869, 899, 915, 916, 936, 966, 991, 997, 1087, 1149, 1320, 1322, 1328, 1329, 1330, 1332, 1337, 1343, 1344, 1404, 1413, 1414], "validate_output_schema": [921, 991], "validate_schema": [97, 146], "vals_phys": [772, 869], "valu": [4, 5, 12, 13, 14, 15, 19, 22, 30, 32, 38, 39, 42, 48, 49, 52, 53, 55, 57, 58, 66, 67, 70, 76, 77, 85, 86, 95, 99, 108, 134, 135, 137, 138, 144, 151, 152, 153, 154, 163, 166, 169, 171, 172, 175, 176, 177, 178, 179, 180, 181, 182, 184, 185, 186, 187, 188, 190, 207, 211, 213, 214, 215, 216, 223, 227, 228, 230, 233, 234, 235, 236, 240, 243, 245, 246, 247, 251, 255, 257, 259, 260, 263, 265, 267, 268, 269, 270, 271, 272, 274, 275, 277, 279, 281, 282, 283, 285, 286, 289, 290, 291, 292, 293, 300, 303, 305, 306, 307, 308, 310, 311, 312, 315, 316, 320, 321, 324, 325, 326, 327, 328, 335, 338, 339, 341, 344, 345, 347, 348, 357, 360, 361, 375, 379, 380, 381, 383, 385, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 411, 412, 413, 414, 415, 417, 418, 419, 420, 423, 424, 425, 427, 428, 429, 431, 432, 442, 443, 444, 445, 447, 448, 449, 450, 451, 452, 453, 454, 455, 457, 458, 461, 462, 463, 466, 468, 469, 474, 478, 489, 494, 503, 512, 517, 518, 519, 520, 521, 522, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 564, 565, 566, 568, 569, 570, 571, 573, 574, 575, 576, 580, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 594, 599, 601, 602, 603, 604, 606, 607, 608, 610, 612, 613, 614, 615, 616, 617, 618, 623, 634, 635, 636, 637, 638, 648, 649, 650, 651, 654, 656, 657, 660, 661, 662, 663, 664, 666, 669, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 698, 699, 700, 701, 704, 705, 706, 707, 709, 710, 711, 713, 714, 716, 717, 718, 719, 720, 722, 725, 726, 727, 728, 729, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 741, 743, 744, 745, 752, 761, 763, 767, 768, 770, 771, 773, 774, 775, 776, 777, 778, 779, 782, 783, 784, 785, 786, 787, 791, 794, 796, 797, 799, 801, 802, 803, 804, 805, 815, 816, 821, 822, 823, 824, 826, 827, 828, 831, 832, 833, 834, 835, 836, 837, 838, 842, 843, 844, 845, 852, 853, 859, 869, 885, 886, 897, 900, 901, 905, 906, 907, 911, 913, 914, 915, 916, 923, 924, 925, 926, 928, 929, 933, 934, 935, 936, 938, 944, 948, 950, 951, 953, 956, 957, 958, 969, 970, 972, 975, 976, 978, 979, 991, 997, 1002, 1004, 1005, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1019, 1020, 1021, 1022, 1023, 1024, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1036, 1037, 1038, 1039, 1042, 1043, 1044, 1046, 1047, 1048, 1050, 1051, 1062, 1063, 1064, 1067, 1068, 1069, 1073, 1076, 1078, 1079, 1080, 1082, 1087, 1088, 1089, 1090, 1092, 1093, 1098, 1102, 1117, 1122, 1131, 1140, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1156, 1157, 1158, 1159, 1163, 1164, 1165, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1193, 1198, 1199, 1200, 1201, 1202, 1203, 1205, 1206, 1207, 1208, 1212, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1226, 1231, 1233, 1234, 1235, 1236, 1239, 1240, 1246, 1247, 1248, 1250, 1251, 1253, 1255, 1256, 1258, 1259, 1261, 1262, 1266, 1267, 1268, 1269, 1273, 1274, 1275, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1301, 1302, 1303, 1304, 1307, 1311, 1312, 1313, 1314, 1316, 1319, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1349, 1350, 1351, 1358, 1367, 1370, 1374, 1375, 1376, 1377, 1379, 1384, 1385, 1386, 1389, 1391, 1393, 1395, 1404, 1413, 1418, 1420, 1421, 1422, 1423, 1424, 1426, 1427, 1428, 1430, 1432, 1434, 1435], "value1": [710, 869], "value2": [710, 869], "value_a": 1432, "value_b": 1432, "value_count": [777, 869, 1404], "value_cum_sum": [461, 869], "value_cum_sum_all_fil": [461, 869], "value_nam": [272, 324, 357, 926, 956, 991], "value_var": [272, 324, 357, 926, 956, 991], "valueerror": [11, 17, 22, 213], "valueexcept": 828, "var": [42, 187, 357, 694, 695, 869, 991, 1404, 1421], "var_samp": 1421, "vari": [156, 162, 213, 471, 1095, 1435], "variabl": [32, 39, 44, 48, 49, 50, 51, 52, 64, 65, 85, 161, 163, 164, 166, 169, 170, 171, 185, 188, 197, 272, 312, 324, 357, 891, 892, 893, 903, 926, 932, 945, 946, 956, 991, 1379, 1404, 1414, 1416, 1432], "variable_nam": [272, 324, 357, 926, 956, 991], "variad": 153, "varianc": [328, 357, 522, 563, 694, 695, 780, 858, 869, 958, 991, 1153, 1195, 1297, 1298, 1394, 1404, 1425], "variou": [153, 212, 219, 357, 869, 894, 991, 996, 997, 1404], "vector": [172, 679, 681, 683, 685, 687, 690, 692, 694, 869, 1282, 1284, 1288, 1293, 1295, 1297, 1404], "vector_index_format": 200, "vectoris": [490, 491, 1118, 1119], "vein": 207, "verbos": [31, 175, 177, 207, 723, 1329], "veri": [257, 264, 321, 357, 615, 869, 974, 1426], "verifi": [260, 357, 916, 991], "versicolor": [357, 360], "version": [40, 41, 44, 45, 55, 63, 64, 67, 70, 133, 139, 151, 152, 155, 156, 157, 159, 163, 166, 167, 169, 170, 171, 174, 175, 176, 177, 178, 179, 180, 181, 182, 186, 189, 197, 211, 214, 215, 224, 245, 246, 259, 272, 281, 289, 297, 304, 309, 314, 315, 319, 320, 327, 333, 338, 357, 360, 375, 443, 462, 465, 470, 477, 490, 491, 503, 514, 519, 521, 522, 535, 542, 614, 615, 622, 623, 629, 633, 670, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 702, 713, 721, 755, 766, 774, 781, 790, 793, 798, 842, 844, 845, 848, 869, 885, 886, 891, 898, 903, 911, 915, 926, 932, 934, 938, 942, 945, 949, 953, 962, 963, 969, 991, 997, 1087, 1094, 1101, 1110, 1111, 1118, 1119, 1131, 1142, 1148, 1150, 1152, 1153, 1171, 1172, 1274, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1319, 1327, 1361, 1378, 1382, 1384, 1387, 1404, 1409, 1432], "versionchang": [606, 730], "versu": [223, 357, 897, 991], "vertic": [66, 190, 233, 325, 329, 357, 713, 729, 1319, 1335], "vertical_relax": [66, 190], "via": [32, 151, 152, 153, 154, 157, 161, 163, 166, 169, 170, 171, 210, 212, 224, 257, 291, 357, 465, 615, 724, 869, 898, 934, 991, 1000, 1330], "view": 204, "virtual": 148, "visibl": [19, 231, 357, 1149, 1404], "visit": [462, 869, 1087, 1404], "visual": [252, 254, 357, 630, 945, 991], "volk": 147, "vote": [722, 724, 1328, 1330], "vowel": [737, 738, 1343, 1344], "vstack": [66, 190, 233, 357], "w": [42, 153, 245, 292, 357, 716, 720, 722, 724, 784, 786, 911, 991, 997, 1322, 1326, 1328, 1330, 1353, 1416, 1417, 1420], "w_i": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "wa": [40, 44, 45, 63, 70, 106, 139, 151, 152, 156, 157, 159, 163, 166, 169, 170, 171, 175, 176, 177, 178, 215, 224, 245, 259, 281, 289, 309, 314, 315, 320, 327, 357, 360, 443, 462, 465, 519, 521, 522, 671, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 739, 755, 774, 812, 844, 845, 869, 886, 898, 911, 915, 938, 953, 991, 997, 1087, 1148, 1150, 1152, 1153, 1275, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1345, 1378, 1384, 1404, 1409, 1427, 1432], "wai": [98, 99, 132, 134, 135, 136, 138, 160, 161, 170, 244, 258, 280, 303, 336, 357, 498, 660, 699, 710, 722, 799, 859, 865, 869, 895, 902, 910, 930, 939, 948, 959, 967, 974, 991, 995, 1126, 1303, 1328, 1404], "wait": [49, 50, 51, 52, 946, 991], "walk": 797, "want": [42, 65, 135, 137, 151, 152, 153, 156, 157, 161, 163, 166, 207, 233, 265, 277, 289, 304, 357, 375, 447, 470, 482, 529, 614, 615, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 703, 715, 732, 737, 738, 739, 793, 802, 807, 810, 816, 829, 840, 843, 860, 869, 892, 949, 966, 991, 997, 1067, 1094, 1106, 1156, 1246, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1321, 1338, 1343, 1344, 1345, 1404, 1419], "warehous": 154, "warn": [101, 102, 105, 106, 109, 116, 118, 119, 129, 656, 826, 827, 869, 1404], "watermark": [48, 357], "wb": [42, 357], "we": [48, 149, 151, 152, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 212, 223, 224, 245, 260, 281, 289, 327, 357, 360, 465, 493, 498, 511, 544, 577, 614, 676, 680, 682, 684, 686, 688, 691, 693, 695, 724, 737, 738, 756, 806, 807, 808, 809, 810, 811, 828, 829, 856, 857, 859, 869, 897, 898, 907, 911, 916, 921, 935, 938, 991, 997, 1121, 1126, 1139, 1174, 1209, 1246, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1330, 1344, 1362, 1404, 1409, 1416], "weather": [737, 738, 1343, 1344], "wed": [357, 360], "wednesdai": [245, 357, 500, 503, 911, 991, 1128, 1131], "week": [245, 260, 289, 327, 357, 470, 482, 493, 498, 511, 513, 520, 676, 680, 682, 684, 686, 688, 691, 693, 695, 793, 807, 808, 810, 811, 812, 856, 857, 869, 911, 916, 938, 991, 997, 1094, 1106, 1121, 1126, 1139, 1141, 1151, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1428], "week_mask": [470, 482, 793, 1094, 1106], "weekdai": [478, 494], "weekend": [470, 482, 793, 1094, 1106], "weekli": [245, 357, 511, 911, 991, 1139], "weghorst": [724, 1330], "weight": [147, 519, 520, 521, 522, 678, 679, 681, 683, 685, 687, 690, 692, 694, 707, 869, 1150, 1151, 1152, 1153, 1281, 1282, 1284, 1286, 1288, 1290, 1293, 1295, 1297, 1314, 1404], "wei\u00df": 1427, "well": [42, 151, 152, 153, 166, 357, 550, 848, 869, 1179, 1404, 1432], "were": [175, 176, 177, 178, 207, 670, 671, 865, 869, 1274, 1275, 1404], "west": [76, 261, 357, 917, 991], "what": [53, 212, 266, 277, 357, 470, 715, 739, 922, 991, 1094, 1321, 1345], "whatev": 207, "when": [11, 12, 16, 19, 21, 25, 39, 40, 41, 42, 44, 45, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 73, 89, 98, 99, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 118, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 146, 147, 151, 152, 153, 154, 156, 157, 159, 161, 162, 163, 166, 167, 168, 169, 170, 171, 172, 175, 176, 177, 178, 182, 186, 207, 215, 223, 229, 231, 233, 235, 236, 238, 245, 259, 261, 265, 273, 280, 286, 290, 292, 295, 296, 300, 303, 309, 312, 314, 315, 319, 320, 322, 326, 332, 357, 375, 417, 430, 447, 448, 452, 470, 482, 519, 521, 522, 528, 599, 614, 627, 660, 662, 670, 671, 701, 709, 710, 715, 721, 725, 727, 728, 732, 733, 739, 741, 746, 747, 748, 751, 752, 768, 791, 793, 802, 816, 826, 852, 869, 886, 893, 897, 906, 911, 915, 917, 921, 927, 936, 940, 941, 944, 948, 953, 954, 957, 961, 988, 991, 1036, 1049, 1067, 1068, 1076, 1089, 1094, 1106, 1149, 1150, 1152, 1153, 1156, 1159, 1185, 1231, 1274, 1275, 1302, 1304, 1307, 1321, 1327, 1331, 1333, 1334, 1338, 1339, 1345, 1347, 1352, 1353, 1354, 1357, 1358, 1378, 1379, 1384, 1404, 1419, 1432], "when1": 859, "when2": 859, "when_matched_update_al": [41, 357], "when_not_matched_insert_al": [41, 357], "whenev": [614, 615, 829, 830, 869], "where": [42, 55, 58, 106, 153, 154, 156, 213, 227, 228, 233, 236, 245, 257, 261, 272, 281, 285, 291, 304, 305, 314, 319, 324, 326, 328, 357, 397, 430, 503, 513, 516, 518, 520, 529, 602, 608, 614, 651, 669, 699, 707, 710, 712, 739, 759, 780, 792, 798, 800, 844, 845, 848, 850, 858, 859, 869, 900, 901, 907, 911, 917, 926, 935, 949, 950, 956, 957, 958, 991, 1017, 1049, 1131, 1141, 1145, 1147, 1151, 1156, 1160, 1258, 1273, 1303, 1314, 1318, 1345, 1365, 1394, 1395, 1404, 1413, 1421, 1431, 1432, 1434], "wherea": [151, 166, 289, 357, 445, 449, 498, 511, 648, 649, 676, 869, 938, 991, 1126, 1139, 1255, 1256, 1404], "wherev": [42, 265, 343, 357, 615, 869, 1246, 1404], "whether": [39, 49, 53, 55, 97, 136, 138, 146, 147, 156, 162, 163, 169, 171, 186, 191, 230, 256, 260, 298, 303, 357, 375, 383, 385, 399, 400, 482, 483, 499, 504, 505, 506, 507, 508, 509, 510, 541, 551, 568, 569, 656, 699, 700, 710, 725, 727, 791, 802, 816, 842, 869, 916, 921, 934, 943, 948, 991, 997, 1004, 1005, 1019, 1020, 1066, 1071, 1106, 1107, 1127, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1148, 1170, 1171, 1180, 1200, 1201, 1303, 1331, 1333, 1404, 1416, 1432], "which": [1, 6, 10, 11, 12, 22, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 57, 58, 59, 60, 61, 62, 66, 135, 137, 151, 152, 153, 154, 155, 156, 161, 162, 163, 166, 167, 168, 169, 170, 171, 182, 185, 187, 190, 207, 215, 216, 223, 224, 227, 228, 231, 233, 244, 245, 250, 259, 260, 261, 281, 289, 297, 314, 315, 320, 322, 326, 327, 357, 383, 422, 430, 465, 470, 482, 493, 498, 500, 511, 520, 526, 550, 553, 556, 558, 559, 560, 561, 606, 614, 615, 627, 629, 676, 680, 682, 684, 686, 688, 691, 693, 695, 738, 756, 793, 807, 808, 810, 811, 812, 826, 827, 856, 857, 859, 869, 886, 888, 891, 893, 895, 897, 898, 900, 902, 903, 911, 915, 916, 917, 932, 934, 938, 942, 945, 946, 953, 954, 957, 959, 991, 997, 1041, 1049, 1094, 1106, 1121, 1126, 1128, 1139, 1149, 1151, 1156, 1157, 1179, 1183, 1186, 1188, 1189, 1190, 1191, 1238, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1304, 1362, 1382, 1384, 1404, 1414, 1420, 1432, 1435], "while": [41, 65, 152, 155, 156, 167, 171, 182, 186, 197, 207, 257, 272, 321, 324, 326, 357, 448, 670, 733, 869, 892, 926, 956, 957, 991, 1068, 1274, 1339, 1404], "white": [42, 357], "whitespac": [139, 746, 747, 748, 1352, 1353, 1354, 1427], "whole": [614, 709, 710, 722, 869, 974, 991, 1328], "whose": [56, 58, 100, 171, 260, 281, 357, 523, 814, 869, 916, 991, 997], "why": [891, 903, 932, 945, 991], "wide": [153, 243, 272, 281, 324, 325, 357, 926, 956, 991], "wider": 56, "width": [28, 42, 67, 151, 152, 166, 357, 360, 375, 605, 795, 991, 997, 1237, 1404, 1409], "wiki": 22, "wikipedia": 22, "wildcard": [148, 523, 762, 802, 803, 816, 842, 865, 869, 997], "win_loss": [42, 357], "window": [151, 152, 166, 245, 289, 357, 462, 519, 521, 522, 615, 656, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 796, 844, 845, 869, 911, 938, 991, 1087, 1150, 1152, 1153, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1404], "window_s": [677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 844, 845, 869, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1404], "windowmappingstrategi": [656, 869], "winter": [725, 727, 737, 738, 1331, 1333], "wise": [42, 58, 153, 238, 357, 388, 389, 390, 391, 392, 393, 453, 454, 455, 524, 610, 704, 705, 706, 770, 771, 816, 842, 869, 1008, 1009, 1010, 1011, 1012, 1013, 1078, 1079, 1080, 1154, 1242, 1243, 1311, 1312, 1313, 1376, 1377, 1404], "wish": [215, 320, 357, 442, 443, 773, 774, 869, 886, 953, 991, 1061, 1062, 1388, 1389, 1404], "with_column": [1, 14, 61, 64, 146, 213, 245, 264, 280, 289, 319, 325, 332, 357, 375, 380, 382, 397, 399, 400, 401, 402, 403, 404, 406, 407, 408, 409, 415, 416, 417, 418, 422, 427, 428, 430, 431, 444, 445, 447, 448, 449, 452, 457, 458, 459, 460, 461, 463, 466, 470, 471, 473, 476, 477, 478, 479, 480, 481, 482, 483, 485, 486, 487, 488, 489, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 512, 513, 515, 517, 518, 520, 527, 528, 533, 538, 540, 542, 548, 549, 550, 551, 554, 555, 557, 558, 559, 560, 561, 565, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 613, 614, 615, 635, 637, 639, 640, 642, 644, 646, 647, 650, 651, 652, 656, 657, 660, 661, 663, 666, 670, 671, 675, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 696, 697, 701, 714, 715, 716, 717, 718, 719, 720, 722, 723, 724, 725, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 752, 755, 756, 757, 759, 760, 761, 763, 766, 767, 772, 775, 782, 784, 786, 789, 793, 794, 795, 796, 797, 801, 802, 803, 805, 806, 808, 809, 813, 823, 826, 827, 829, 832, 834, 837, 846, 849, 853, 855, 857, 859, 865, 869, 891, 903, 911, 913, 930, 931, 932, 938, 945, 961, 991, 997, 1088, 1125, 1267, 1333, 1404, 1432], "with_column_nam": 166, "with_columns_seq": [357, 991], "with_context": 991, "with_field": [615, 869], "with_replac": [293, 357, 594, 698, 869, 1226, 1301, 1404], "with_row_count": [357, 991], "with_row_index": [1, 289, 333, 357, 680, 682, 684, 686, 688, 691, 693, 695, 869, 963, 991, 1302, 1404, 1409], "within": [48, 53, 54, 55, 67, 77, 85, 175, 176, 177, 178, 198, 199, 201, 213, 244, 245, 246, 260, 289, 327, 357, 542, 666, 710, 869, 911, 916, 938, 991, 1172, 1404, 1432], "without": [1, 10, 33, 34, 35, 36, 39, 41, 43, 44, 48, 49, 50, 51, 52, 53, 54, 55, 56, 63, 64, 65, 74, 80, 106, 109, 131, 139, 142, 143, 144, 145, 146, 147, 153, 154, 155, 158, 161, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 179, 180, 182, 183, 184, 185, 186, 187, 192, 193, 194, 195, 196, 197, 203, 259, 261, 264, 266, 304, 314, 315, 319, 325, 326, 357, 360, 361, 369, 370, 375, 462, 463, 470, 482, 544, 614, 615, 663, 677, 678, 680, 682, 684, 686, 688, 689, 691, 693, 695, 702, 715, 725, 727, 739, 755, 793, 795, 799, 826, 827, 829, 830, 846, 847, 869, 891, 892, 893, 903, 915, 917, 922, 931, 932, 946, 949, 957, 965, 991, 995, 997, 1071, 1087, 1088, 1094, 1106, 1174, 1267, 1280, 1281, 1283, 1285, 1286, 1287, 1289, 1290, 1291, 1292, 1294, 1296, 1298, 1321, 1331, 1333, 1345, 1382, 1384, 1387, 1404, 1409, 1434], "without_fil": [155, 167, 168], "wod": [748, 1354], "womp": [323, 357, 955, 991], "word": [154, 737, 738, 747, 748, 759, 1365, 1427], "work": [42, 74, 80, 151, 152, 157, 161, 163, 172, 296, 332, 357, 383, 385, 423, 447, 448, 451, 452, 523, 532, 577, 607, 615, 656, 728, 732, 733, 741, 752, 776, 826, 869, 934, 941, 961, 991, 995, 997, 1004, 1005, 1042, 1067, 1068, 1073, 1076, 1163, 1209, 1239, 1334, 1338, 1339, 1347, 1358, 1390, 1404], "workaround": 357, "workbook": [42, 156, 162, 357], "workday_raas_format": 200, "worker": [934, 991], "working_with_conditional_format": [42, 357], "working_with_sparklin": [42, 357], "worksheet": [42, 156, 162, 357], "workspac": 192, "workspace_url": 192, "world": [1, 22, 715, 739, 746, 747, 748, 997, 1217, 1321, 1345, 1352, 1353, 1354, 1415, 1418, 1427], "wors": [948, 991], "worth": [577, 1209], "worthwhil": [175, 177], "would": [105, 151, 152, 165, 166, 212, 315, 319, 357, 360, 396, 407, 470, 482, 583, 615, 626, 656, 662, 666, 768, 791, 793, 846, 852, 869, 1016, 1027, 1094, 1106, 1215, 1266, 1269, 1374, 1384, 1404, 1409, 1430], "wow": 997, "wrap": [87, 139, 375, 444, 550, 614, 829, 869, 1063, 1404], "wrap_in_arrai": 375, "wrap_in_list": 375, "wrap_numer": [444, 869, 1063, 1404], "wrapper": [65, 892, 991], "writabl": [37, 39, 44, 45, 46, 47, 48, 297, 315, 357, 1384, 1404], "write": [10, 37, 38, 39, 40, 41, 42, 43, 44, 45, 48, 49, 50, 51, 52, 53, 54, 137, 142, 150, 152, 157, 207, 219, 357, 452, 630, 633, 869, 919, 945, 991, 997, 1076, 1404], "write_avro": 357, "write_clipboard": [150, 357], "write_csv": [38, 152, 166, 357], "write_databas": 357, "write_delta": 357, "write_excel": 357, "write_iceberg": 357, "write_ipc": [157, 357], "write_ipc_stream": 357, "write_json": 357, "write_markdown_frame_to_stdout": 207, "write_ndjson": [46, 357], "write_parquet": 357, "write_t": [48, 357], "write_to_dataset": [48, 357], "writeabl": [315, 357, 1384, 1404], "writer": [41, 357], "writer_properti": [41, 357], "writerproperti": [41, 357], "written": [6, 37, 39, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 297, 357, 629, 893, 942, 991], "ww": [1427, 1434], "www": [734, 764, 1340], "x": [29, 58, 66, 89, 108, 133, 139, 142, 151, 152, 154, 156, 162, 166, 179, 180, 182, 190, 211, 231, 249, 252, 254, 259, 264, 281, 291, 292, 321, 324, 325, 357, 360, 367, 368, 375, 380, 382, 384, 403, 408, 431, 457, 464, 517, 518, 533, 538, 540, 542, 565, 572, 585, 611, 613, 614, 615, 635, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 650, 651, 655, 661, 669, 670, 671, 675, 704, 707, 743, 766, 767, 772, 775, 782, 784, 786, 789, 790, 796, 800, 802, 803, 805, 816, 828, 829, 832, 834, 837, 842, 846, 848, 853, 859, 869, 915, 921, 947, 949, 956, 991, 996, 997, 1028, 1082, 1159, 1178, 1246, 1274, 1275, 1311, 1314, 1349, 1382, 1386, 1387, 1404, 1409, 1416, 1417, 1420, 1426, 1427, 1432, 1434], "x00": [426, 427, 428, 429, 430, 432, 717, 1045, 1046, 1047, 1048, 1049, 1051, 1323], "x01": [430, 1049], "x05": [430, 1049], "x07": 431, "x1": 431, "x10": [430, 1049], "x80": 431, "x83": 431, "x88": 431, "x8e": 431, "x99": 431, "x_": [520, 869, 1151, 1404], "x_0": [325, 357, 519, 520, 521, 522, 869, 1150, 1151, 1152, 1153, 1404], "x_1": [325, 357, 520, 869, 1151, 1404], "x_2": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "x_i": [520, 869, 1151, 1404], "x_invers": [661, 869], "x_pow_8": 1426, "x_round": 1426, "x_round_1": 1426, "x_squar": [661, 869], "x_t": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "x_uniqu": [638, 869], "x_y": [408, 585], "xb": 431, "xb9neq": 431, "xbd": 431, "xc14": 431, "xd3": 431, "xdist": 1435, "xee": 431, "xf4v": 431, "xf9": 431, "xfb": 431, "xff": [426, 427, 428, 429, 432, 717, 1045, 1046, 1047, 1048, 1051, 1323], "xi": [723, 1329], "xl": 156, "xlog2": [637, 661, 869], "xlsb": 156, "xlsx": [42, 156, 357], "xlsx2csv": [156, 174], "xlsx2csv_option": 156, "xlsxwriter": [42, 174, 357], "xor": [441, 869, 1060, 1404, 1423], "xor_xi": [782, 869], "xx": [12, 59, 61, 186, 223, 250, 304, 357, 897, 991, 997, 1420, 1427, 1434], "xxx": [227, 357, 764, 900, 991], "xy": [59, 61], "xyz": [7, 18, 20, 21, 22, 23, 24, 25, 26, 27, 380, 716, 723, 869, 1322, 1329, 1380, 1404, 1427], "y": [29, 58, 66, 89, 108, 133, 139, 142, 179, 180, 182, 190, 211, 231, 252, 254, 259, 281, 291, 292, 321, 324, 325, 357, 360, 367, 368, 375, 380, 382, 384, 403, 408, 431, 500, 503, 517, 518, 538, 540, 565, 572, 585, 613, 615, 638, 640, 642, 644, 646, 647, 650, 651, 655, 669, 670, 671, 675, 751, 753, 754, 766, 775, 782, 784, 786, 789, 790, 800, 805, 812, 828, 832, 834, 837, 848, 853, 869, 915, 947, 949, 956, 991, 996, 997, 1028, 1128, 1131, 1274, 1275, 1357, 1359, 1360, 1404, 1409, 1420, 1427, 1428, 1434], "y_": [519, 520, 521, 522, 869, 1150, 1151, 1152, 1153, 1404], "y_0": [325, 357, 519, 520, 521, 522, 869, 1150, 1151, 1152, 1153, 1404], "y_1": [325, 357], "y_i": [520, 869, 1151, 1404], "y_mul": 766, "y_t": [519, 521, 522, 869, 1150, 1152, 1153, 1404], "y_uniqu": [638, 869], "ya": [741, 1347], "ya29": 168, "ye": [142, 859], "year": [53, 55, 245, 260, 289, 304, 327, 357, 470, 482, 483, 484, 493, 494, 496, 498, 511, 512, 676, 680, 682, 684, 686, 688, 691, 693, 695, 793, 806, 807, 808, 809, 810, 811, 856, 857, 869, 911, 916, 938, 991, 997, 1094, 1106, 1107, 1108, 1121, 1122, 1124, 1126, 1139, 1140, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1404, 1428], "yellow": [357, 361, 426, 427, 428, 429, 432], "yield": [136, 138, 151, 152, 153, 166, 231, 233, 256, 321, 357, 533, 656, 869, 991, 1149, 1156, 1404], "you": [1, 12, 16, 42, 48, 52, 58, 65, 66, 132, 134, 135, 136, 137, 138, 148, 151, 152, 153, 154, 156, 157, 160, 161, 163, 165, 166, 170, 172, 190, 207, 215, 233, 236, 245, 256, 257, 260, 265, 277, 281, 285, 289, 290, 291, 292, 304, 311, 314, 320, 321, 322, 324, 343, 357, 360, 367, 375, 442, 443, 447, 470, 482, 490, 491, 493, 497, 500, 503, 523, 529, 550, 577, 579, 614, 615, 630, 656, 661, 662, 668, 676, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 695, 703, 715, 732, 737, 738, 739, 759, 762, 768, 773, 774, 793, 802, 807, 810, 812, 816, 826, 829, 830, 840, 843, 846, 848, 852, 860, 869, 886, 892, 893, 907, 911, 916, 934, 935, 938, 945, 946, 949, 953, 954, 956, 966, 974, 991, 995, 997, 1061, 1062, 1067, 1094, 1106, 1118, 1119, 1125, 1128, 1131, 1156, 1179, 1209, 1246, 1265, 1266, 1271, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1321, 1338, 1343, 1344, 1345, 1365, 1374, 1382, 1388, 1389, 1404, 1409, 1414, 1419, 1435], "your": [40, 42, 57, 58, 99, 146, 151, 152, 153, 154, 156, 172, 207, 257, 259, 265, 291, 292, 295, 311, 331, 336, 343, 357, 360, 475, 520, 535, 615, 724, 751, 753, 754, 761, 829, 830, 869, 893, 915, 921, 940, 946, 960, 967, 974, 991, 995, 1099, 1151, 1246, 1330, 1357, 1359, 1360, 1367, 1404, 1409, 1435], "yy": [12, 59, 61, 186, 223, 250, 304, 357, 897, 991, 997, 1420, 1427, 1434], "yyi": [227, 357, 764, 900, 991], "yyyi": [42, 357], "yz": [59, 61], "z": [42, 66, 89, 139, 180, 190, 231, 252, 254, 259, 291, 292, 321, 324, 325, 357, 375, 380, 382, 384, 542, 572, 615, 640, 642, 644, 646, 647, 655, 669, 670, 671, 715, 723, 725, 727, 739, 751, 754, 784, 786, 805, 832, 834, 837, 843, 848, 853, 869, 915, 947, 949, 956, 991, 996, 997, 1159, 1274, 1275, 1321, 1329, 1331, 1333, 1345, 1357, 1360, 1404, 1416, 1420, 1432, 1434], "z_0": [325, 357], "z_1": [325, 357], "zap": 997, "zero": [30, 42, 132, 133, 149, 151, 152, 157, 159, 163, 181, 184, 211, 235, 245, 257, 290, 304, 309, 315, 316, 357, 375, 509, 528, 611, 696, 699, 707, 761, 775, 869, 889, 906, 911, 991, 1075, 1137, 1159, 1238, 1314, 1367, 1378, 1384, 1385, 1404, 1426, 1432], "zero_copy_onli": [1384, 1404], "zfill": [736, 782, 869, 1342], "zip": 1435, "zip_with": [238, 357, 1404], "zone": [73, 182, 183, 186, 471, 475, 497, 520, 754, 809, 810, 811, 869, 997, 1095, 1099, 1125, 1151, 1360, 1404], "zoneinfo": [73, 997], "zoom": [42, 357], "zstd": [41, 44, 45, 48, 50, 52, 357, 991], "zz": [186, 223, 250, 304, 357, 897, 991, 1420, 1427, 1434], "zzz": 764, "\u03bc": [139, 216, 245, 257, 289, 291, 292, 311, 327, 357, 471, 472, 474, 475, 476, 477, 479, 481, 485, 487, 488, 490, 491, 492, 493, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 514, 676, 680, 682, 684, 686, 688, 691, 693, 695, 751, 754, 809, 810, 811, 812, 818, 826, 869, 888, 911, 938, 991, 997, 1095, 1096, 1098, 1099, 1100, 1101, 1103, 1104, 1105, 1111, 1112, 1116, 1118, 1119, 1120, 1121, 1125, 1126, 1129, 1130, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1142, 1283, 1285, 1287, 1289, 1291, 1294, 1296, 1298, 1357, 1360, 1404, 1427], "\u0441\u0438\u043d\u0438\u0439": 1427, "\u0967\u096f\u096f\u096f": 997, "\u0968\u0966\u096d\u096d": 997, "\u4eac\u90fd": 997, "\u5927\u962a": 997, "\u6771\u4eac": [447, 448, 732, 733, 997, 1067, 1068, 1338, 1339], "\u90fd\u5e02": 997, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [734, 1340], "\uff54\uff45\uff53\uff54": 1427, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1427, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1427, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1427, "\ud835\udf0b": 1426}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_default_credential_provider", "polars.Config.set_engine_affinity", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_iceberg", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.PartitionByKey", "polars.PartitionMaxSize", "polars.PartitionParted", "polars.ScanCastOptions", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.defer", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.explain_all", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.parquet.ParquetFieldOverwrites", "polars.io.partition.BasePartitionContext", "polars.io.partition.KeyedPartition", "polars.io.partition.KeyedPartitionContext", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_metadata", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.union", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.__setitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_columns", "polars.DataFrame.map_rows", "polars.DataFrame.match_to_schema", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.remove", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "polars.DataType.to_dtype_expr", "polars.DataTypeExpr.arr.inner_dtype", "polars.DataTypeExpr.arr.shape", "polars.DataTypeExpr.arr.width", "polars.DataTypeExpr.list.inner_dtype", "polars.DataTypeExpr.struct.field_dtype", "polars.DataTypeExpr.struct.field_names", "polars.dtype_of", "polars.self_dtype", "Array", "Functions", "List", "Struct", "DataType expressions", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.len", "polars.Expr.arr.max", "polars.Expr.arr.mean", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_business_day", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_close", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.filter", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_kurtosis", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.linear_spaces", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.row_index", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.__getitem__", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_batches", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.match_to_schema", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.pipe_with_schema", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.remote", "polars.LazyFrame.remove", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.sink_batches", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.QueryOptFlags", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.len", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.backward_fill", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.bottom_k_by", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_business_day", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.forward_fill", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_close", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.filter", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.repeat_by", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_kurtosis", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_max_by", "polars.Series.rolling_mean", "polars.Series.rolling_mean_by", "polars.Series.rolling_median", "polars.Series.rolling_median_by", "polars.Series.rolling_min", "polars.Series.rolling_min_by", "polars.Series.rolling_quantile", "polars.Series.rolling_quantile_by", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_std_by", "polars.Series.rolling_sum", "polars.Series.rolling_sum_by", "polars.Series.rolling_var", "polars.Series.rolling_var_by", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.top_k_by", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Bitwise", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1420, 1433], "IF": 1424, "__array__": [209, 999], "__arrow_c_stream__": [210, 1000], "__dataframe__": 211, "__getitem__": [212, 884, 1001], "__iter__": 335, "__setitem__": 213, "ab": [379, 1002, 1426], "aco": 1429, "acosd": 1429, "add": 380, "add_business_dai": [470, 1094], "agg": [336, 967], "agg_group": 381, "aggreg": [208, 378, 883, 998, 1421], "alia": [382, 1003], "alias": [1421, 1426, 1427], "align_fram": 58, "all": [337, 383, 399, 568, 783, 968, 1004, 1019, 1200, 1433], "all_horizont": 784, "and_": 384, "ani": [385, 400, 569, 785, 1005, 1020, 1201], "any_horizont": 786, "api": [1, 59, 60, 61, 62, 881, 1432], "append": [386, 1006], "approx_n_uniqu": [214, 387, 787, 885, 1007], "arang": 788, "arcco": [388, 1008], "arccosh": [389, 1009], "arcsin": [390, 1010], "arcsinh": [391, 1011], "arctan": [392, 1012], "arctan2": 789, "arctan2d": 790, "arctanh": [393, 1013], "arg_max": [394, 401, 570, 1014, 1021, 1202], "arg_min": [395, 402, 571, 1015, 1022, 1203], "arg_sort": [396, 1016], "arg_sort_bi": 791, "arg_tru": [397, 1017], "arg_uniqu": [398, 1018], "arg_wher": 792, "arr": [363, 364, 365, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043], "arrai": [67, 371, 861, 1396, 1422], "array_agg": 1422, "array_contain": 1422, "array_get": 1422, "array_length": 1422, "array_low": 1422, "array_mean": 1422, "array_revers": 1422, "array_sum": 1422, "array_to_str": 1422, "array_uniqu": 1422, "array_upp": 1422, "asin": 1429, "asind": 1429, "assert": 1435, "assert_frame_equ": 175, "assert_frame_not_equ": 176, "assert_series_equ": 177, "assert_series_not_equ": 178, "atan": 1429, "atan2": 1429, "atan2d": 1429, "atand": 1429, "attribut": [352, 986, 1397], "avail": 1, "avg": 1421, "avro": 882, "backward_fil": [425, 1044], "base_utc_offset": [471, 1095], "basepartitioncontext": 143, "batched_read": 141, "batchedcsvread": 141, "bin": [426, 427, 428, 429, 430, 431, 432, 1045, 1046, 1047, 1048, 1049, 1050, 1051], "binari": [68, 862, 875, 1398], "bit_and": 1423, "bit_count": 1423, "bit_length": 1427, "bit_or": 1423, "bit_xor": 1423, "bitwis": 1423, "bitwise_and": [433, 1052], "bitwise_count_on": [434, 1053], "bitwise_count_zero": [435, 1054], "bitwise_leading_on": [436, 1055], "bitwise_leading_zero": [437, 1056], "bitwise_or": [438, 1057], "bitwise_trailing_on": [439, 1058], "bitwise_trailing_zero": [440, 1059], "bitwise_xor": [441, 1060], "boolean": [69, 863, 1399], "bottom_k": [215, 442, 886, 1061], "bottom_k_bi": [443, 1062], "build_info": 63, "business_day_count": 793, "cach": 887, "cancel": 983, "cast": [216, 444, 882, 888, 1063, 1430], "cast_time_unit": [472, 1096], "cat": [445, 446, 447, 448, 449, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071], "catalog": [192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206], "cataloginfo": 198, "categor": 70, "categori": [864, 1400], "categoricalremappingwarn": 101, "cbrt": [450, 1072, 1426], "ceil": [451, 1073, 1426], "centuri": [473, 1097], "chronoformatwarn": 102, "chunk_length": 1074, "claus": 1420, "clear": [217, 889, 1075], "clip": [452, 1076], "clipboard": 882, "clone": [218, 890, 1077], "cloud": 882, "co": [453, 1078, 1429], "coalesc": [794, 1424], "col": 865, "collect": 891, "collect_al": 64, "collect_all_async": 65, "collect_async": 892, "collect_batch": 893, "collect_schema": [219, 894], "column": [179, 180, 220, 866, 895], "columninfo": 199, "columnnotfounderror": 103, "combin": [474, 1098], "comparison": [875, 1408], "comput": [353, 867, 1401], "computeerror": 104, "concat": [66, 572, 713, 1204, 1319, 1427], "concat_arr": 795, "concat_list": 796, "concat_str": 797, "concat_w": 1427, "condit": 1424, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 207], "conjunct": 875, "contain": [403, 426, 573, 714, 1023, 1045, 1205, 1320], "contains_ani": [715, 1321], "context": 207, "convers": 880, "convert_time_zon": [475, 1099], "corr": [221, 798, 1421], "cosd": 1429, "cosh": [454, 1079], "cot": [455, 1080, 1429], "cotd": 1429, "count": [222, 338, 456, 799, 896, 969, 1081, 1421], "count_match": [404, 574, 716, 1024, 1206, 1322], "cov": 800, "creat": 1434, "create_list_strategi": 181, "credenti": 882, "credentialprovid": 33, "credentialprovideraw": 34, "credentialproviderazur": 35, "credentialprovidergcp": 36, "csv": [141, 882], "cum_count": [457, 801, 1082], "cum_fold": 802, "cum_max": [458, 1083], "cum_min": [459, 1084], "cum_prod": [460, 1085], "cum_reduc": 803, "cum_sum": [461, 804, 1086], "cum_sum_horizont": 805, "cumulative_ev": [462, 1087], "customufuncwarn": 105, "cut": [463, 1088], "dai": [478, 1102], "data": 376, "databas": 882, "datafram": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 182, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 357], "dataorientationwarn": 106, "dataset": 882, "datasourceformat": 200, "datatyp": [67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 362, 375, 376], "datatypeexpr": [363, 364, 365, 366, 367, 368], "date": [72, 476, 806, 1100, 1427], "date_part": 1428, "date_rang": [807, 808], "datetim": [73, 477, 809, 1101], "datetime_rang": [810, 811], "decim": 74, "decod": [427, 717, 1046, 1323], "decor": 207, "defer": 97, "degre": [464, 1429], "delet": 1434, "delta": 882, "describ": [223, 897, 1089], "descript": [354, 987, 1402], "deseri": [224, 465, 898], "diff": [466, 575, 1090, 1207], "disable_string_cach": 98, "distinct": 1420, "div": 1426, "document": 1432, "dot": [467, 1091], "drop": [225, 899, 1434], "drop_in_plac": 226, "drop_nan": [227, 468, 900, 1092], "drop_nul": [228, 469, 576, 901, 1093, 1208], "dst_offset": [479, 1103], "dt": [470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143], "dtype": [183, 229, 902, 1144], "dtype_of": 369, "duplicateerror": 107, "durat": [75, 812], "element": 813, "enable_string_cach": 99, "encod": [428, 718, 1047, 1324], "ends_with": [429, 445, 719, 1048, 1064, 1325, 1427], "engine_config": 966, "entropi": [516, 1145], "enum": 76, "epoch": [480, 1104], "eq": [517, 619, 1146], "eq_miss": [518, 1147], "equal": [230, 1148], "error": 377, "escape_regex": [100, 720, 1326], "estimated_s": [231, 1149], "eval": [577, 1209], "ewm_mean": [519, 1150], "ewm_mean_bi": [520, 1151], "ewm_std": [521, 1152], "ewm_var": [522, 1153], "exampl": [1, 997, 1435], "excel": 882, "except": [101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 377, 1433], "exclud": [523, 814], "execut": 1413, "execute_glob": 1414, "exp": [524, 1154, 1426], "explain": [903, 1434], "explain_al": 131, "explod": [232, 405, 525, 578, 721, 904, 1025, 1155, 1210, 1327], "export": [355, 1403], "expr": [379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782], "express": [375, 869, 995, 1432], "extend": [1, 233, 1156], "extend_const": [526, 1157], "extract": [722, 1328, 1428], "extract_al": [723, 1329], "extract_group": [724, 1330], "extract_mani": [725, 1331], "feather": 882, "fetch": 984, "fetch_block": 985, "field": [77, 762, 1368, 1369], "field_dtyp": 367, "field_nam": 368, "fill_nan": [234, 527, 905, 1158], "fill_nul": [235, 528, 906, 1159], "filter": [236, 529, 579, 907, 1160, 1211], "find": [726, 1332], "find_mani": [727, 1333], "first": [339, 406, 530, 580, 815, 908, 970, 1026, 1161, 1212, 1421], "flag": [237, 1162], "flatten": 531, "float32": 78, "float64": 79, "floor": [532, 1163, 1426], "floordiv": 533, "fold": [238, 816], "format": 817, "forward_fil": [534, 1164], "frame": 1432, "from": 1420, "from_arrow": 132, "from_datafram": 133, "from_dict": [134, 135], "from_epoch": 818, "from_json": 535, "from_numpi": 136, "from_panda": 137, "from_record": 138, "from_repr": 139, "function": [1, 372, 868, 880, 997, 1425], "gather": [536, 581, 1165, 1213], "gather_everi": [239, 537, 582, 909, 1166, 1214], "ge": [538, 1167], "get": [407, 539, 583, 1027, 1215], "get_categori": [446, 1065], "get_chunk": 1168, "get_column": [240, 242], "get_column_index": 241, "get_index_typ": 140, "get_polars_schema": 203, "get_table_info": 193, "glimps": 243, "global": 1432, "gpuengin": [966, 988], "greatest": 1424, "group": [819, 1420], "group_bi": [244, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 910, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "group_by_dynam": [245, 911], "groupbi": [335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 356, 989], "gt": [540, 1169], "has_multiple_output": 620, "has_nul": [541, 1170], "has_valid": 1171, "hash": [542, 1172], "hash_row": 246, "have": 1420, "head": [247, 340, 543, 584, 728, 820, 912, 971, 1173, 1216, 1334], "height": 248, "helper": 1435, "hist": [544, 1174], "hour": [481, 1105], "hstack": 249, "iceberg": 882, "ifnul": 1424, "implod": [545, 821, 1175], "import": 997, "in_process": [983, 984, 985], "index": 0, "index_of": [546, 1176], "initcap": 1427, "inner_dtyp": [363, 366], "inprocessqueri": [983, 984, 985, 990], "input": 882, "insert_column": 250, "inspect": [547, 913], "instanc": 207, "int128": 80, "int16": 81, "int32": 82, "int64": 83, "int8": 84, "int_rang": [822, 823], "interfac": 1431, "interpol": [251, 548, 914, 1177], "interpolate_bi": [549, 1178], "intersect": 1433, "introduct": 1432, "invalidoperationerror": 108, "io": [141, 142, 143, 144, 145, 146, 995], "ipc": 882, "is_between": [550, 1179], "is_business_dai": [482, 1106], "is_clos": [551, 1180], "is_column": 621, "is_column_select": 622, "is_dupl": [252, 552, 1181], "is_empti": [253, 1182], "is_finit": [553, 1183], "is_first_distinct": [554, 1184], "is_in": [555, 1185], "is_infinit": [556, 1186], "is_last_distinct": [557, 1187], "is_leap_year": [483, 1107], "is_liter": 623, "is_loc": 1066, "is_nan": [558, 1188], "is_not_nan": [559, 1189], "is_not_nul": [560, 1190], "is_nul": [561, 1191], "is_regex_project": 624, "is_sort": 1192, "is_uniqu": [254, 562, 1193], "iso_year": [484, 1108], "item": [255, 1194], "iter_column": 256, "iter_row": 257, "iter_slic": 258, "join": [259, 408, 585, 729, 915, 1028, 1217, 1335, 1420], "join_asof": [260, 916], "join_wher": [261, 917], "json": 882, "json_decod": [730, 1336], "json_encod": [763, 1370], "json_norm": 147, "json_path_match": [731, 1337], "keep": 639, "keyedpartit": 144, "keyedpartitioncontext": 145, "kurtosi": [563, 1195], "lake": 882, "last": [341, 409, 564, 586, 824, 918, 972, 1029, 1196, 1218, 1421], "lazi": [262, 919], "lazyfram": [49, 50, 51, 52, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 991], "lazygroupbi": [967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982], "le": [565, 1197], "least": 1424, "left": 1427, "len": [342, 410, 566, 587, 825, 973, 1030, 1198, 1219], "len_byt": [447, 732, 1067, 1338], "len_char": [448, 733, 1068, 1339], "length": 1427, "limit": [263, 567, 920, 1199, 1420], "linear_spac": [826, 827], "list": [85, 184, 366, 373, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 870, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1405], "list_catalog": 194, "list_namespac": 195, "list_tabl": 196, "lit": 828, "ln": 1426, "load": [2, 207], "load_from_fil": 3, "load_profil": 185, "log": [609, 1241, 1426], "log10": [610, 1242, 1426], "log1p": [611, 1243, 1426], "log2": 1426, "lower": 1427, "lower_bound": [612, 1244], "lt": [613, 1245], "ltrim": 1427, "manag": 207, "manipul": [359, 873, 993, 1407], "map": 640, "map_batch": [614, 829, 921], "map_column": 264, "map_el": [615, 1246], "map_field": 641, "map_group": [343, 830, 974], "map_row": 265, "mapwithoutreturndtypewarn": 109, "match_to_schema": [266, 922], "math": 1426, "max": [267, 344, 411, 588, 616, 831, 923, 975, 1031, 1109, 1220, 1247, 1421], "max_horizont": [268, 832], "mean": [269, 345, 412, 589, 617, 833, 924, 976, 1110, 1221, 1248], "mean_horizont": [270, 834], "median": [271, 346, 413, 590, 618, 835, 925, 977, 1032, 1111, 1222, 1249, 1421], "melt": [272, 926], "merge_sort": [273, 927], "meta": [619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 871], "metadata": 994, "method": 1432, "microsecond": [485, 1112], "millennium": [486, 1113], "millisecond": [487, 1114], "min": [274, 347, 414, 591, 634, 836, 928, 978, 1033, 1115, 1223, 1250, 1421], "min_horizont": [275, 837], "minut": [488, 1116], "miscellan": [358, 872, 880, 992, 1406], "mod": [635, 1426], "mode": [636, 1251], "moduleupgraderequirederror": 110, "month": [489, 1117], "month_end": [490, 1118], "month_start": [491, 1119], "mul": 637, "multipl": [207, 880], "n_chunk": [276, 1252], "n_uniqu": [277, 348, 415, 592, 638, 838, 979, 1034, 1224, 1253], "name": [639, 640, 641, 642, 643, 644, 645, 646, 647, 866, 874, 1254, 1433], "namespaceinfo": 201, "nan_max": [648, 1255], "nan_min": [649, 1256], "nanosecond": [492, 1120], "ne": [625, 650, 1257], "ne_miss": [651, 1258], "neg": 652, "nest": 376, "new": 1, "new_from_index": 1259, "next_batch": 141, "nodataerror": 111, "normal": [734, 1340, 1427], "norowsreturnederror": 112, "not_": [653, 1260], "nth": 839, "null": 86, "null_count": [278, 654, 929, 1261], "nullif": 1424, "numer": [376, 875, 1408], "object": 87, "octet_length": 1427, "od": 882, "offset": 1420, "offset_bi": [493, 1121], "ones": 840, "oper": [875, 997, 1408, 1433, 1434], "option": [207, 882], "or_": 655, "order": 1420, "ordinal_dai": [494, 1122], "other": 376, "outofboundserror": 113, "output": 882, "output_nam": 626, "over": 656, "pad_end": [735, 1341], "pad_start": [736, 1342], "panic": 377, "panicexcept": 114, "parametercollisionerror": 115, "parametr": [179, 180, 181, 182, 183, 184, 185, 186, 187, 1435], "parquet": [142, 882], "parquetfieldoverwrit": 142, "partit": [143, 144, 145, 882], "partition_bi": 279, "partitionbykei": 53, "partitionmaxs": 54, "partitionpart": 55, "pct_chang": [657, 1262], "peak_max": [658, 1263], "peak_min": [659, 1264], "performancewarn": 116, "pi": 1426, "pipe": [280, 660, 930], "pipe_with_schema": 931, "pivot": 281, "plot": [360, 1409], "plugin": [146, 148, 995], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 362, 363, 364, 365, 366, 367, 368, 369, 370, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 820, 821, 822, 823, 824, 825, 826, 827, 828, 829, 830, 831, 832, 833, 834, 835, 836, 837, 838, 839, 840, 841, 842, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 865, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 937, 938, 939, 940, 941, 942, 943, 944, 945, 946, 947, 948, 949, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1413, 1414, 1415, 1416, 1417, 1418, 1419, 1435], "polarserror": 117, "polarsinefficientmapwarn": 118, "polarswarn": 119, "pop": 627, "pow": [661, 1265, 1426], "prefix": 642, "prefix_field": 643, "product": [282, 662, 1266], "profil": [932, 1435], "provid": 1, "pyarrow": 882, "python": [881, 1432], "qcut": [663, 1267], "quantil": [283, 349, 664, 841, 933, 980, 1268], "quantile_cont": 1421, "quantile_disc": 1421, "quarter": [495, 1123], "queri": [880, 1432], "queryoptflag": 965, "radian": [665, 1429], "random": 880, "rank": [666, 1269], "read_avro": 149, "read_clipboard": 150, "read_csv": 151, "read_csv_batch": 152, "read_databas": 153, "read_database_uri": 154, "read_delta": 155, "read_excel": 156, "read_ipc": 157, "read_ipc_schema": 158, "read_ipc_stream": 159, "read_json": 160, "read_ndjson": 161, "read_od": 162, "read_parquet": 163, "read_parquet_metadata": 164, "read_parquet_schema": 165, "rechunk": [284, 667, 1270], "reduc": 842, "refer": 881, "regexp_lik": 1427, "regist": 1415, "register_dataframe_namespac": 59, "register_expr_namespac": 60, "register_glob": 1416, "register_io_sourc": 146, "register_lazyframe_namespac": 61, "register_mani": 1417, "register_plugin_funct": 148, "register_series_namespac": 62, "registr": 1, "reinterpret": [430, 668, 1049, 1271], "remot": 934, "remov": [285, 935], "renam": [286, 936, 1272], "rename_field": [764, 1371], "repeat": 843, "repeat_bi": [669, 1273], "replac": [496, 670, 737, 1124, 1274, 1343, 1427], "replace_al": [738, 1344], "replace_column": 287, "replace_mani": [739, 1345], "replace_strict": [671, 1275], "replace_time_zon": [497, 1125], "reshap": [672, 1276], "restore_default": 4, "revers": [288, 416, 593, 673, 740, 937, 1035, 1225, 1277, 1346, 1427], "right": 1427, "rle": [674, 1278], "rle_id": [675, 1279], "roll": [289, 676, 938], "rolling_corr": 844, "rolling_cov": 845, "rolling_kurtosi": [677, 1280], "rolling_map": [678, 1281], "rolling_max": [679, 1282], "rolling_max_bi": [680, 1283], "rolling_mean": [681, 1284], "rolling_mean_bi": [682, 1285], "rolling_median": [683, 1286], "rolling_median_bi": [684, 1287], "rolling_min": [685, 1288], "rolling_min_bi": [686, 1289], "rolling_quantil": [687, 1290], "rolling_quantile_bi": [688, 1291], "rolling_skew": [689, 1292], "rolling_std": [690, 1293], "rolling_std_bi": [691, 1294], "rolling_sum": [692, 1295], "rolling_sum_bi": [693, 1296], "rolling_var": [694, 1297], "rolling_var_bi": [695, 1298], "root_nam": 628, "round": [498, 696, 1126, 1299, 1426], "round_sig_fig": [697, 1300], "row": [290, 291], "row_index": 846, "rows_by_kei": 292, "rowserror": 120, "rtrim": 1427, "sampl": [293, 594, 698, 1226, 1301], "save": [5, 207], "save_to_fil": 6, "scan": 882, "scan_csv": 166, "scan_delta": 167, "scan_iceberg": 168, "scan_ipc": 169, "scan_ndjson": 170, "scan_parquet": 171, "scan_pyarrow_dataset": 172, "scan_tabl": 197, "scancastopt": 56, "scatter": 1302, "schema": [294, 939, 996, 1372], "schemaerror": 123, "schemafieldnotfounderror": 124, "search_sort": [699, 1303], "second": [499, 1127], "select": [295, 359, 847, 873, 940, 993, 1407, 1420], "select_seq": [296, 941], "selector": 997, "self_dtyp": 370, "seri": [186, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368, 1369, 1370, 1371, 1372, 1373, 1374, 1375, 1376, 1377, 1378, 1379, 1380, 1381, 1382, 1383, 1384, 1385, 1386, 1387, 1388, 1389, 1390, 1391, 1392, 1393, 1394, 1395, 1404], "serial": [297, 358, 629, 942, 992], "set": [997, 1304, 1433], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_default_credential_provid": 10, "set_differ": [595, 1227], "set_engine_affin": 11, "set_float_precis": 12, "set_fmt_float": 13, "set_fmt_str_length": 14, "set_fmt_table_cell_list_len": 15, "set_intersect": [596, 1228], "set_profil": 187, "set_random_se": 173, "set_sort": [298, 700, 943, 1305], "set_streaming_chunk_s": 16, "set_symmetric_differ": [597, 1229], "set_tbl_cell_align": 17, "set_tbl_cell_numeric_align": 18, "set_tbl_col": 19, "set_tbl_column_data_type_inlin": 20, "set_tbl_dataframe_shape_below": 21, "set_tbl_format": 22, "set_tbl_hide_column_data_typ": 23, "set_tbl_hide_column_nam": 24, "set_tbl_hide_dataframe_shap": 25, "set_tbl_hide_dtype_separ": 26, "set_tbl_row": 27, "set_tbl_width_char": 28, "set_thousands_separ": 29, "set_trim_decimal_zero": 30, "set_union": [598, 1230], "set_verbos": 31, "shape": [299, 364, 1306], "shapeerror": 125, "shift": [300, 417, 599, 701, 944, 1036, 1231, 1307], "show": 1434, "show_graph": [630, 945], "show_vers": 174, "shrink_dtyp": [702, 1308], "shrink_to_fit": [301, 1309], "shuffl": [703, 1310], "sign": [704, 1311, 1426], "sin": [705, 1312, 1429], "sind": 1429, "sinh": [706, 1313], "sink_batch": 946, "sink_csv": 49, "sink_ipc": 50, "sink_ndjson": 51, "sink_parquet": 52, "size": [431, 1050], "skew": [707, 1314], "slice": [302, 600, 708, 741, 947, 1232, 1315, 1347], "sort": [303, 418, 601, 709, 948, 1037, 1233, 1316], "sort_bi": 710, "split": [742, 1348], "split_exact": [743, 1349], "split_part": 1427, "splitn": [744, 1350], "sql": [304, 848, 949, 1420, 1425, 1431, 1432], "sql_expr": 849, "sqlcontext": [1413, 1414, 1415, 1416, 1417, 1418, 1419, 1432], "sqlinterfaceerror": 121, "sqlsyntaxerror": 122, "sqrt": [711, 1317, 1426], "starts_with": [432, 449, 745, 1051, 1069, 1351, 1427], "state": [32, 207], "std": [305, 419, 602, 712, 850, 950, 1038, 1234, 1318], "stddev": 1421, "str": [713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1329, 1330, 1331, 1332, 1333, 1334, 1335, 1336, 1337, 1338, 1339, 1340, 1341, 1342, 1343, 1344, 1345, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1358, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367], "strategi": 1435, "strftime": [500, 1128, 1428], "string": [88, 376, 876, 1410, 1427], "string_to_arrai": 1427, "stringcach": [57, 880], "stringcachemismatcherror": 126, "strip_char": [746, 1352], "strip_chars_end": [747, 1353], "strip_chars_start": [748, 1354], "strip_prefix": [749, 1355], "strip_suffix": [750, 1356], "strpo": 1427, "strptime": [751, 1357, 1427], "struct": [89, 367, 368, 374, 762, 763, 764, 765, 766, 851, 877, 1368, 1369, 1370, 1371, 1372, 1373, 1411], "structfieldnotfounderror": 127, "style": 361, "sub": 767, "substr": 1427, "suffix": 644, "suffix_field": 645, "sum": [306, 350, 420, 603, 768, 852, 951, 981, 1039, 1235, 1374, 1421], "sum_horizont": [307, 853], "tabl": [1418, 1434], "tableinfo": [202, 203], "tabletyp": 204, "tail": [308, 351, 604, 752, 769, 854, 952, 982, 1236, 1358, 1375], "tan": [770, 1376, 1429], "tand": 1429, "tanh": [771, 1377], "tempor": [376, 878, 1412, 1428], "test": [175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 1435], "thread_pool_s": 188, "threadpool_s": 189, "time": [90, 501, 855, 1129], "time_rang": [856, 857], "timestamp": [502, 1130, 1427], "to_arrai": [605, 1237], "to_arrow": [309, 1378], "to_dat": [753, 1359], "to_datetim": [754, 1360], "to_decim": [755, 1361], "to_dict": [310, 311], "to_dtype_expr": 362, "to_dummi": [312, 1379], "to_fram": 1380, "to_init_repr": [313, 1381], "to_integ": [756, 1362], "to_jax": [314, 1382], "to_list": [421, 1040, 1383], "to_loc": 1070, "to_lowercas": [646, 757, 1363], "to_numpi": [315, 1384], "to_panda": [316, 1385], "to_phys": [772, 1386], "to_seri": 317, "to_str": [503, 1131], "to_struct": [318, 422, 606, 1041, 1238], "to_tim": [758, 1364], "to_titlecas": [759, 1365], "to_torch": [319, 1387], "to_uppercas": [647, 760, 1366], "toomanyrowsreturnederror": 128, "top_k": [320, 773, 953, 1388], "top_k_bi": [774, 1389], "total_dai": [504, 1132], "total_hour": [505, 1133], "total_microsecond": [506, 1134], "total_millisecond": [507, 1135], "total_minut": [508, 1136], "total_nanosecond": [509, 1137], "total_second": [510, 1138], "transpos": 321, "tree_format": 631, "trigonometri": 1429, "truediv": 775, "truncat": [511, 1139, 1434], "try_cast": 1430, "type": [376, 1430], "uint16": 91, "uint32": 92, "uint64": 93, "uint8": 94, "undo_alias": 632, "union": [190, 1433], "uniqu": [322, 423, 607, 776, 954, 1042, 1239, 1390], "unique_count": [777, 1391], "uniti": [198, 199, 200, 201, 202, 203, 204, 206], "unknown": 95, "unnest": [323, 765, 955, 1373, 1422, 1434], "unpivot": [324, 956], "unregist": 1419, "unstablewarn": 129, "unstack": 325, "unsuitablesqlerror": 130, "updat": [326, 957], "upper": 1427, "upper_bound": [778, 1392], "upsampl": 327, "us": 207, "uses_lexical_ord": 1071, "using_string_cach": 191, "utf8": 96, "value_count": [779, 1393], "var": [328, 424, 608, 780, 858, 958, 1043, 1240, 1394], "varianc": 1421, "vstack": 329, "warn": 377, "week": [512, 1140], "weekdai": [513, 1141], "when": 859, "where": [781, 1420], "width": [330, 365, 959], "window": 879, "with_column": [331, 960], "with_columns_seq": [332, 961], "with_context": 962, "with_field": 766, "with_row_count": [333, 963], "with_row_index": [334, 964], "with_time_unit": [514, 1142], "write_avro": 37, "write_clipboard": 38, "write_csv": 39, "write_databas": 40, "write_delta": 41, "write_excel": 42, "write_iceberg": 43, "write_ipc": 44, "write_ipc_stream": 45, "write_json": [46, 633], "write_ndjson": 47, "write_parquet": 48, "xor": 782, "year": [515, 1143], "zero": 860, "zfill": [761, 1367], "zip_with": 1395}})